// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

/// @brief Opc Ua Binary.
/// @license GNU LGPL
///
/// Distributed under the GNU LGPL License
/// (See accompanying file LICENSE or copy at
/// http://www.gnu.org/licenses/lgpl.html)
///

#pragma once

#include <opc/ua/protocol/enums.h>
#include <opc/ua/protocol/variable_access_level.h>
#include <opc/ua/protocol/attribute_ids.h>
#include <opc/ua/protocol/nodeid.h>
#include <opc/ua/protocol/types.h>
#include <opc/ua/protocol/types_manual.h>
#include <opc/ua/protocol/variant.h>
#include <opc/ua/protocol/data_value.h>

namespace OpcUa
{

// An XML element encoded as a UTF-8 string.
struct XmlElement
{
  int32_t Length;
  std::vector<uint8_t> Value;
};

/* DISABLED

    struct TwoByteNodeId
    {
         uint8_t Identifier;
    };
*/

/* DISABLED

    struct FourByteNodeId
    {
         uint8_t NamespaceIndex;
         uint16_t Identifier;
    };
*/

/* DISABLED

    struct NumericNodeId
    {
         uint16_t NamespaceIndex;
         uint32_t Identifier;
    };
*/

/* DISABLED

    struct StringNodeId
    {
         uint16_t NamespaceIndex;
         std::string Identifier;
    };
*/

/* DISABLED

    struct GuidNodeId
    {
         uint16_t NamespaceIndex;
         OpcUa::Guid Identifier;
    };
*/

/* DISABLED

    struct ByteStringNodeId
    {
         uint16_t NamespaceIndex;
         OpcUa::ByteString Identifier;
    };
*/

/* DISABLED

    // An identifier for a node in a UA server address space.
    struct NodeId
    {
         OpcUa::NodeIdType NodeIdType;
         OpcUa::TwoByteNodeId TwoByte;
         OpcUa::FourByteNodeId FourByte;
         OpcUa::NumericNodeId Numeric;
         OpcUa::StringNodeId String;
         OpcUa::GuidNodeId Guid;
         OpcUa::ByteStringNodeId ByteString;
    };
*/

struct ExtensionObject
{
  OpcUa::NodeId TypeId;
  uint8_t Encoding;
  OpcUa::ByteString Body;
};

/* DISABLED

    // An identifier for a node in a UA server address space qualified with a complete namespace string.
    struct ExpandedNodeId
    {
         OpcUa::NodeIdType NodeIdType;
         OpcUa::TwoByteNodeId TwoByte;
         OpcUa::FourByteNodeId FourByte;
         OpcUa::NumericNodeId Numeric;
         OpcUa::StringNodeId String;
         OpcUa::GuidNodeId Guid;
         OpcUa::ByteStringNodeId ByteString;
         std::string NamespaceURI;
         uint32_t ServerIndex;
    };
*/

/* DISABLED

    // A recursive structure containing diagnostic information associated with a status code.
    struct DiagnosticInfo
    {
         uint8_t Encoding;
         int32_t SymbolicId;
         int32_t NamespaceURI;
         int32_t LocalizedText;
         std::string AdditionalInfo;
         OpcUa::StatusCode InnerStatusCode;
         std::shared_ptr<OpcUa::DiagnosticInfo> InnerDiagnosticInfo;
    };
*/

/* DISABLED

    // A string qualified with a namespace index.
    struct QualifiedName
    {
         int32_t NamespaceIndex;
         std::string Name;
    };
*/

/* DISABLED

    // A string qualified with a namespace index.
    struct LocalizedText
    {
         uint8_t Encoding;
         std::string Locale;
         std::string Text;
    };
*/

/* DISABLED

    // A union of several types.
    struct Variant
    {
         uint8_t Encoding;
         int32_t ArrayLength;
         std::vector<bool> Boolean;
         std::vector<uint8_t> SByte;
         std::vector<uint8_t> Byte;
         std::vector<int16_t> Int16;
         std::vector<uint16_t> UInt16;
         std::vector<int32_t> Int32;
         std::vector<uint32_t> UInt32;
         std::vector<int64_t> Int64;
         std::vector<uint64_t> UInt64;
         std::vector<float> Float;
         std::vector<double> Double;
         std::vector<std::string> String;
         std::vector<OpcUa::DateTime> DateTime;
         std::vector<OpcUa::Guid> Guid;
         std::vector<OpcUa::ByteString> ByteString;
         std::vector<OpcUa::XmlElement> XmlElement;
         std::vector<OpcUa::NodeId> NodeId;
         std::vector<OpcUa::ExpandedNodeId> ExpandedNodeId;
         std::vector<OpcUa::StatusCode> Status;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfo;
         std::vector<OpcUa::QualifiedName> QualifiedName;
         std::vector<OpcUa::LocalizedText> LocalizedText;
         std::vector<OpcUa::ExtensionObject> ExtensionObject;
         std::vector<OpcUa::DataValue> DataValue;
         std::vector<OpcUa::Variant> Variant;
    };
*/

/* DISABLED

    // A value with an associated timestamp, and quality.
    struct DataValue
    {
         uint8_t Encoding;
         OpcUa::Variant Value;
         OpcUa::StatusCode Status;
         OpcUa::DateTime SourceTimestamp;
         uint16_t SourcePicoseconds;
         OpcUa::DateTime ServerTimestamp;
         uint16_t ServerPicoseconds;
    };
*/

/* DISABLED

    // Specifies a reference which belongs to a node.
    struct ReferenceNode
    {
         OpcUa::NodeId ReferenceTypeId;
         bool IsInverse;
         OpcUa::ExpandedNodeId TargetId;
    };
*/

/* DISABLED

    // Specifies the attributes which belong to all nodes.
    struct Node
    {
         OpcUa::NodeId NodeId;
         OpcUa::NodeClass NodeClass;
         OpcUa::QualifiedName BrowseName;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         std::vector<OpcUa::ReferenceNode> References;
    };
*/

/* DISABLED

    struct InstanceNode
    {
         OpcUa::NodeId NodeId;
         OpcUa::NodeClass NodeClass;
         OpcUa::QualifiedName BrowseName;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         std::vector<OpcUa::ReferenceNode> References;
    };
*/

/* DISABLED

    struct TypeNode
    {
         OpcUa::NodeId NodeId;
         OpcUa::NodeClass NodeClass;
         OpcUa::QualifiedName BrowseName;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         std::vector<OpcUa::ReferenceNode> References;
    };
*/

/* DISABLED

    // Specifies the attributes which belong to object nodes.
    struct ObjectNode
    {
         OpcUa::NodeId NodeId;
         OpcUa::NodeClass NodeClass;
         OpcUa::QualifiedName BrowseName;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         std::vector<OpcUa::ReferenceNode> References;
         uint8_t EventNotifier;
    };
*/

/* DISABLED

    // Specifies the attributes which belong to object type nodes.
    struct ObjectTypeNode
    {
         OpcUa::NodeId NodeId;
         OpcUa::NodeClass NodeClass;
         OpcUa::QualifiedName BrowseName;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         std::vector<OpcUa::ReferenceNode> References;
         bool IsAbstract;
    };
*/

/* DISABLED

    // Specifies the attributes which belong to variable nodes.
    struct VariableNode
    {
         OpcUa::NodeId NodeId;
         OpcUa::NodeClass NodeClass;
         OpcUa::QualifiedName BrowseName;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         std::vector<OpcUa::ReferenceNode> References;
         OpcUa::Variant Value;
         OpcUa::NodeId DataType;
         int32_t ValueRank;
         std::vector<uint32_t> ArrayDimensions;
         OpcUa::VariableAccessLevel AccessLevel;
         OpcUa::VariableAccessLevel UserAccessLevel;
         double MinimumSamplingInterval;
         bool Historizing;
    };
*/

/* DISABLED

    // Specifies the attributes which belong to variable type nodes.
    struct VariableTypeNode
    {
         OpcUa::NodeId NodeId;
         OpcUa::NodeClass NodeClass;
         OpcUa::QualifiedName BrowseName;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         std::vector<OpcUa::ReferenceNode> References;
         OpcUa::Variant Value;
         OpcUa::NodeId DataType;
         int32_t ValueRank;
         std::vector<uint32_t> ArrayDimensions;
         bool IsAbstract;
    };
*/

/* DISABLED

    // Specifies the attributes which belong to reference type nodes.
    struct ReferenceTypeNode
    {
         OpcUa::NodeId NodeId;
         OpcUa::NodeClass NodeClass;
         OpcUa::QualifiedName BrowseName;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         std::vector<OpcUa::ReferenceNode> References;
         bool IsAbstract;
         bool Symmetric;
         OpcUa::LocalizedText InverseName;
    };
*/

/* DISABLED

    // Specifies the attributes which belong to method nodes.
    struct MethodNode
    {
         OpcUa::NodeId NodeId;
         OpcUa::NodeClass NodeClass;
         OpcUa::QualifiedName BrowseName;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         std::vector<OpcUa::ReferenceNode> References;
         bool Executable;
         bool UserExecutable;
    };
*/

/* DISABLED

    struct ViewNode
    {
         OpcUa::NodeId NodeId;
         OpcUa::NodeClass NodeClass;
         OpcUa::QualifiedName BrowseName;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         std::vector<OpcUa::ReferenceNode> References;
         bool ContainsNoLoops;
         uint8_t EventNotifier;
    };
*/

/* DISABLED

    struct DataTypeNode
    {
         OpcUa::NodeId NodeId;
         OpcUa::NodeClass NodeClass;
         OpcUa::QualifiedName BrowseName;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         std::vector<OpcUa::ReferenceNode> References;
         bool IsAbstract;
    };
*/

/* DISABLED

    // An argument for a method.
    struct Argument
    {
         std::string Name;
         OpcUa::NodeId DataType;
         int32_t ValueRank;
         std::vector<uint32_t> ArrayDimensions;
         OpcUa::LocalizedText Description;
    };
*/

/* DISABLED

    // A mapping between a value of an enumerated type and a name and description.
    struct EnumValueType
    {
         int64_t Value;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
    };
*/

/* DISABLED

    struct TimeZoneDataType
    {
         int16_t Offset;
         bool DaylightSavingInOffset;
    };
*/

// Describes an application and how to find it.
struct ApplicationDescription
{
  std::string ApplicationUri;
  std::string ProductUri;
  OpcUa::LocalizedText ApplicationName;
  OpcUa::ApplicationType ApplicationType;
  std::string GatewayServerUri;
  std::string DiscoveryProfileUri;
  std::vector<std::string> DiscoveryUrls;
};

/* DISABLED

    // The header passed with every server request.
    struct RequestHeader
    {
         OpcUa::NodeId AuthenticationToken;
         OpcUa::DateTime Timestamp;
         uint32_t RequestHandle;
         uint32_t ReturnDiagnostics;
         std::string AuditEntryId;
         uint32_t TimeoutHint;
         OpcUa::ExtensionObject AdditionalHeader;

         RequestHeader();
    };
*/

/* DISABLED

    // The header passed with every server response.
    struct ResponseHeader
    {
         OpcUa::DateTime Timestamp;
         uint32_t RequestHandle;
         OpcUa::StatusCode ServiceResult;
         OpcUa::DiagnosticInfo ServiceDiagnostics;
         std::vector<std::string> StringTable;
         OpcUa::ExtensionObject AdditionalHeader;

         ResponseHeader();
    };
*/

/* DISABLED

    // The response returned by all services when there is a service level error.
    struct ServiceFault
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;

         ServiceFault();
    };
*/

/* DISABLED

    struct FindServersParameters
    {
         std::string EndpointUrl;
         std::vector<std::string> LocaleIds;
         std::vector<std::string> ServerUris;
    };
*/

/* DISABLED

    // Finds the servers known to the discovery server.
    struct FindServersRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::FindServersParameters Parameters;

         FindServersRequest();
    };
*/

/* DISABLED

    struct FindServersResult
    {
         std::vector<OpcUa::ApplicationDescription> Servers;
    };
*/

/* DISABLED

    // Finds the servers known to the discovery server.
    struct FindServersResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         OpcUa::FindServersResult Parameters;

         FindServersResponse();
    };
*/

// Describes a user token that can be used with a server.
struct UserTokenPolicy
{
  std::string PolicyId;
  OpcUa::UserTokenType TokenType;
  std::string IssuedTokenType;
  std::string IssuerEndpointUrl;
  std::string SecurityPolicyUri;
};

// The description of a endpoint that can be used to access a server.
struct EndpointDescription
{
  std::string EndpointUrl;
  OpcUa::ApplicationDescription Server;
  OpcUa::ByteString ServerCertificate;
  OpcUa::MessageSecurityMode SecurityMode;
  std::string SecurityPolicyUri;
  std::vector<OpcUa::UserTokenPolicy> UserIdentityTokens;
  std::string TransportProfileUri;
  uint8_t SecurityLevel;
};

struct GetEndpointsParameters
{
  std::string EndpointUrl;
  std::vector<std::string> LocaleIds;
  std::vector<std::string> ProfileUris;
};

// Gets the endpoints used by the server.
struct GetEndpointsRequest
{
  OpcUa::NodeId TypeId;
  OpcUa::RequestHeader Header;
  OpcUa::GetEndpointsParameters Parameters;

  GetEndpointsRequest();
};

// Gets the endpoints used by the server.
struct GetEndpointsResponse
{
  OpcUa::NodeId TypeId;
  OpcUa::ResponseHeader Header;
  std::vector<OpcUa::EndpointDescription> Endpoints;

  GetEndpointsResponse();
};

/* DISABLED

    // The information required to register a server with a discovery server.
    struct RegisteredServer
    {
         std::string ServerUri;
         std::string ProductUri;
         std::vector<OpcUa::LocalizedText> ServerNames;
         OpcUa::ApplicationType ServerType;
         std::string GatewayServerUri;
         std::vector<std::string> DiscoveryUrls;
         std::string SemaphoreFilePath;
         bool IsOnline;
    };
*/

/* DISABLED

    struct RegisterServerParameters
    {
         OpcUa::RegisteredServer Server;
    };
*/

/* DISABLED

    // Registers a server with the discovery server.
    struct RegisterServerRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::RegisterServerParameters Parameters;

         RegisterServerRequest();
    };
*/

/* DISABLED

    // Registers a server with the discovery server.
    struct RegisterServerResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;

         RegisterServerResponse();
    };
*/

/* DISABLED

    // The token that identifies a set of keys for an active secure channel.
    struct ChannelSecurityToken
    {
         uint32_t ChannelId;
         uint32_t TokenId;
         OpcUa::DateTime CreatedAt;
         uint32_t RevisedLifetime;
    };
*/

/* DISABLED

    struct OpenSecureChannelParameters
    {
         uint32_t ClientProtocolVersion;
         OpcUa::SecurityTokenRequestType RequestType;
         OpcUa::MessageSecurityMode SecurityMode;
         OpcUa::ByteString ClientNonce;
         uint32_t RequestedLifetime;

         OpenSecureChannelParameters();
    };
*/

/* DISABLED

    // Creates a secure channel with a server.
    struct OpenSecureChannelRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::OpenSecureChannelParameters Parameters;

         OpenSecureChannelRequest();
    };
*/

/* DISABLED

    struct OpenSecureChannelResult
    {
         uint32_t ServerProtocolVersion;
         OpcUa::ChannelSecurityToken SecurityToken;
         OpcUa::ByteString ServerNonce;
    };
*/

/* DISABLED

    // Creates a secure channel with a server.
    struct OpenSecureChannelResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         OpcUa::OpenSecureChannelResult Parameters;

         OpenSecureChannelResponse();
    };
*/

/* DISABLED

    // Closes a secure channel.
    struct CloseSecureChannelRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;

         CloseSecureChannelRequest();
    };
*/

/* DISABLED

    // Closes a secure channel.
    struct CloseSecureChannelResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;

         CloseSecureChannelResponse();
    };
*/

// A software certificate with a digital signature.
struct SignedSoftwareCertificate
{
  OpcUa::ByteString CertificateData;
  OpcUa::ByteString Signature;
};

// A digital signature.
struct SignatureData
{
  std::string Algorithm;
  OpcUa::ByteString Signature;
};

struct CreateSessionParameters
{
  OpcUa::ApplicationDescription ClientDescription;
  std::string ServerUri;
  std::string EndpointUrl;
  std::string SessionName;
  OpcUa::ByteString ClientNonce;
  OpcUa::ByteString ClientCertificate;
  double RequestedSessionTimeout;
  uint32_t MaxResponseMessageSize;
};

// Creates a new session with the server.
struct CreateSessionRequest
{
  OpcUa::NodeId TypeId;
  OpcUa::RequestHeader Header;
  OpcUa::CreateSessionParameters Parameters;

  CreateSessionRequest();
};

struct CreateSessionResult
{
  OpcUa::NodeId SessionId;
  OpcUa::NodeId AuthenticationToken;
  double RevisedSessionTimeout;
  OpcUa::ByteString ServerNonce;
  OpcUa::ByteString ServerCertificate;
  std::vector<OpcUa::EndpointDescription> ServerEndpoints;
  std::vector<OpcUa::SignedSoftwareCertificate> ServerSoftwareCertificates;
  OpcUa::SignatureData ServerSignature;
  uint32_t MaxRequestMessageSize;
};

// Creates a new session with the server.
struct CreateSessionResponse
{
  OpcUa::NodeId TypeId;
  OpcUa::ResponseHeader Header;
  OpcUa::CreateSessionResult Parameters;

  CreateSessionResponse();
};

/* DISABLED

    // A base type for a user identity token.
    struct UserIdentityToken
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         std::string PolicyId;

         UserIdentityToken();
    };
*/

/* DISABLED

    // A token representing an anonymous user.
    struct AnonymousIdentityToken
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         std::string PolicyId;
    };
*/

/* DISABLED

    // A token representing a user identified by a user name and password.
    struct UserNameIdentityToken
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         std::string PolicyId;
         std::string UserName;
         OpcUa::ByteString Password;
         std::string EncryptionAlgorithm;
    };
*/

/* DISABLED

    // A token representing a user identified by an X509 certificate.
    struct X509IdentityToken
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         std::string PolicyId;
         OpcUa::ByteString CertificateData;
    };
*/

/* DISABLED

    // A token representing a user identified by a WS-Security XML token.
    struct IssuedIdentityToken
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         std::string PolicyId;
         OpcUa::ByteString TokenData;
         std::string EncryptionAlgorithm;
    };
*/

struct ActivateSessionParameters
{
  OpcUa::SignatureData ClientSignature;
  std::vector<OpcUa::SignedSoftwareCertificate> ClientSoftwareCertificates;
  std::vector<std::string> LocaleIds;
  OpcUa::UserIdentifyToken UserIdentityToken;
  OpcUa::SignatureData UserTokenSignature;
};

// Activates a session with the server.
struct ActivateSessionRequest
{
  OpcUa::NodeId TypeId;
  OpcUa::RequestHeader Header;
  OpcUa::ActivateSessionParameters Parameters;

  ActivateSessionRequest();
};

struct ActivateSessionResult
{
  OpcUa::ByteString ServerNonce;
  std::vector<OpcUa::StatusCode> Results;
  std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
};

// Activates a session with the server.
struct ActivateSessionResponse
{
  OpcUa::NodeId TypeId;
  OpcUa::ResponseHeader Header;
  OpcUa::ActivateSessionResult Parameters;

  ActivateSessionResponse();
};

/* DISABLED

    // Closes a session with the server.
    struct CloseSessionRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         bool DeleteSubscriptions;

         CloseSessionRequest();
    };
*/

/* DISABLED

    // Closes a session with the server.
    struct CloseSessionResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;

         CloseSessionResponse();
    };
*/

/* DISABLED

    struct CancelParameters
    {
         uint32_t RequestHandle;
    };
*/

/* DISABLED

    // Cancels an outstanding request.
    struct CancelRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::CancelParameters Parameters;

         CancelRequest();
    };
*/

/* DISABLED

    struct CancelResult
    {
         uint32_t CancelCount;
    };
*/

/* DISABLED

    // Cancels an outstanding request.
    struct CancelResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         OpcUa::CancelResult Parameters;

         CancelResponse();
    };
*/

/* DISABLED

    // The base attributes for all nodes.
    struct NodeAttributes
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         uint32_t SpecifiedAttributes;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
    };
*/

/* DISABLED

    // The attributes for an object node.
    struct ObjectAttributes
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         uint32_t SpecifiedAttributes;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         uint8_t EventNotifier;
    };
*/

/* DISABLED

    // The attributes for a variable node.
    struct VariableAttributes
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         uint32_t SpecifiedAttributes;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         OpcUa::Variant Value;
         OpcUa::NodeId DataType;
         int32_t ValueRank;
         std::vector<uint32_t> ArrayDimensions;
         OpcUa::VariableAccessLevel AccessLevel;
         OpcUa::VariableAccessLevel UserAccessLevel;
         double MinimumSamplingInterval;
         bool Historizing;
    };
*/

/* DISABLED

    // The attributes for a method node.
    struct MethodAttributes
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         uint32_t SpecifiedAttributes;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         bool Executable;
         bool UserExecutable;
    };
*/

/* DISABLED

    // The attributes for an object type node.
    struct ObjectTypeAttributes
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         uint32_t SpecifiedAttributes;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         bool IsAbstract;
    };
*/

/* DISABLED

    // The attributes for a variable type node.
    struct VariableTypeAttributes
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         uint32_t SpecifiedAttributes;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         OpcUa::Variant Value;
         OpcUa::NodeId DataType;
         int32_t ValueRank;
         std::vector<uint32_t> ArrayDimensions;
         bool IsAbstract;
    };
*/

/* DISABLED

    // The attributes for a reference type node.
    struct ReferenceTypeAttributes
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         uint32_t SpecifiedAttributes;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         bool IsAbstract;
         bool Symmetric;
         OpcUa::LocalizedText InverseName;
    };
*/

/* DISABLED

    // The attributes for a data type node.
    struct DataTypeAttributes
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         uint32_t SpecifiedAttributes;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         bool IsAbstract;
    };
*/

/* DISABLED

    // The attributes for a view node.
    struct ViewAttributes
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         uint32_t SpecifiedAttributes;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
         uint32_t WriteMask;
         uint32_t UserWriteMask;
         bool ContainsNoLoops;
         uint8_t EventNotifier;
    };
*/

/* DISABLED

    // A request to add a node to the server address space.
    struct AddNodesItem
    {
         OpcUa::ExpandedNodeId ParentNodeId;
         OpcUa::NodeId ReferenceTypeId;
         OpcUa::ExpandedNodeId RequestedNewNodeId;
         OpcUa::QualifiedName BrowseName;
         OpcUa::NodeClass NodeClass;
         OpcUa::ExtensionObject NodeAttributes;
         OpcUa::ExpandedNodeId TypeDefinition;
    };
*/

/* DISABLED

    // A result of an add node operation.
    struct AddNodesResult
    {
         OpcUa::StatusCode Status;
         OpcUa::NodeId AddedNodeId;
    };
*/

/* DISABLED

    struct AddNodesParameters
    {
         std::vector<OpcUa::AddNodesItem> NodesToAdd;
    };
*/

/* DISABLED

    // Adds one or more nodes to the server address space.
    struct AddNodesRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::AddNodesParameters Parameters;

         AddNodesRequest();
    };
*/

/* DISABLED

    // Adds one or more nodes to the server address space.
    struct AddNodesResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         std::vector<OpcUa::AddNodesResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

         AddNodesResponse();
    };
*/

/* DISABLED

    // A request to add a reference to the server address space.
    struct AddReferencesItem
    {
         OpcUa::NodeId SourceNodeId;
         OpcUa::NodeId ReferenceTypeId;
         bool IsForward;
         std::string TargetServerUri;
         OpcUa::ExpandedNodeId TargetNodeId;
         OpcUa::NodeClass TargetNodeClass;
    };
*/

/* DISABLED

    // Adds one or more references to the server address space.
    struct AddReferencesRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         std::vector<OpcUa::AddReferencesItem> ReferencesToAdd;

         AddReferencesRequest();
    };
*/

/* DISABLED

    // Adds one or more references to the server address space.
    struct AddReferencesResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         std::vector<OpcUa::StatusCode> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

         AddReferencesResponse();
    };
*/

// A request to delete a node to the server address space.
struct DeleteNodesItem
{
  OpcUa::NodeId NodeId;
  bool DeleteTargetReferences;
};

// Delete one or more nodes from the server address space.
struct DeleteNodesRequest
{
  OpcUa::NodeId TypeId;
  OpcUa::RequestHeader Header;
  std::vector<OpcUa::DeleteNodesItem> NodesToDelete;

  DeleteNodesRequest();
};

// Delete one or more nodes from the server address space.
struct DeleteNodesResponse
{
  OpcUa::NodeId TypeId;
  OpcUa::ResponseHeader Header;
  std::vector<OpcUa::StatusCode> Results;
  std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

  DeleteNodesResponse();
};

/* DISABLED

    // A request to delete a node from the server address space.
    struct DeleteReferencesItem
    {
         OpcUa::NodeId SourceNodeId;
         OpcUa::NodeId ReferenceTypeId;
         bool IsForward;
         OpcUa::ExpandedNodeId TargetNodeId;
         bool DeleteBidirectional;
    };
*/

/* DISABLED

    struct DeleteReferencesParameters
    {
         std::vector<OpcUa::DeleteReferencesItem> ReferencesToDelete;
    };
*/

/* DISABLED

    // Delete one or more references from the server address space.
    struct DeleteReferencesRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::DeleteReferencesParameters Parameters;

         DeleteReferencesRequest();
    };
*/

/* DISABLED

    struct DeleteReferencesResult
    {
         std::vector<OpcUa::StatusCode> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };
*/

/* DISABLED

    // Delete one or more references from the server address space.
    struct DeleteReferencesResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         OpcUa::DeleteReferencesResult Parameters;

         DeleteReferencesResponse();
    };
*/

/* DISABLED

    // The view to browse.
    struct ViewDescription
    {
         OpcUa::NodeId ViewId;
         OpcUa::DateTime Timestamp;
         uint32_t ViewVersion;
    };
*/

/* DISABLED

    // A request to browse the the references from a node.
    struct BrowseDescription
    {
         OpcUa::NodeId NodeId;
         OpcUa::BrowseDirection BrowseDirection;
         OpcUa::NodeId ReferenceTypeId;
         bool IncludeSubtypes;
         OpcUa::NodeClass NodeClassMask;
         OpcUa::BrowseResultMask ResultMask;

         BrowseDescription();
    };
*/

/* DISABLED

    // The description of a reference.
    struct ReferenceDescription
    {
         OpcUa::NodeId ReferenceTypeId;
         bool IsForward;
         OpcUa::ExpandedNodeId NodeId;
         OpcUa::QualifiedName BrowseName;
         OpcUa::LocalizedText DisplayName;
         OpcUa::NodeClass NodeClass;
         OpcUa::ExpandedNodeId TypeDefinition;

         ReferenceDescription();
    };
*/

/* DISABLED

    // The result of a browse operation.
    struct BrowseResult
    {
         OpcUa::StatusCode Status;
         OpcUa::ByteString ContinuationPoint;
         std::vector<OpcUa::ReferenceDescription> References;
    };
*/

/* DISABLED

    struct BrowseParameters
    {
         OpcUa::ViewDescription View;
         uint32_t RequestedMaxReferencesPerNode;
         std::vector<OpcUa::BrowseDescription> NodesToBrowse;
    };
*/

/* DISABLED

    // Browse the references for one or more nodes from the server address space.
    struct BrowseRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::BrowseParameters Parameters;

         BrowseRequest();
    };
*/

/* DISABLED

    // Browse the references for one or more nodes from the server address space.
    struct BrowseResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         std::vector<OpcUa::BrowseResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

         BrowseResponse();
    };
*/

/* DISABLED

    struct BrowseNextParameters
    {
         bool ReleaseContinuationPoints;
         std::vector<OpcUa::ByteString> ContinuationPoints;
    };
*/

/* DISABLED

    // Continues one or more browse operations.
    struct BrowseNextRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::BrowseNextParameters Parameters;

         BrowseNextRequest();
    };
*/

/* DISABLED

    struct BrowseNextResult
    {
         std::vector<OpcUa::BrowseResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };
*/

/* DISABLED

    // Continues one or more browse operations.
    struct BrowseNextResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         OpcUa::BrowseNextResult Parameters;

         BrowseNextResponse();
    };
*/

/* DISABLED

    // An element in a relative path.
    struct RelativePathElement
    {
         OpcUa::NodeId ReferenceTypeId;
         bool IsInverse;
         bool IncludeSubtypes;
         OpcUa::QualifiedName TargetName;

         RelativePathElement();
    };
*/

/* DISABLED

    // A relative path constructed from reference types and browse names.
    struct RelativePath
    {
         std::vector<OpcUa::RelativePathElement> Elements;
    };
*/

/* DISABLED

    // A request to translate a path into a node id.
    struct BrowsePath
    {
         OpcUa::NodeId StartingNode;
         OpcUa::RelativePath RelativePath;
    };
*/

/* DISABLED

    // The target of the translated path.
    struct BrowsePathTarget
    {
         OpcUa::ExpandedNodeId TargetId;
         uint32_t RemainingPathIndex;
    };
*/

/* DISABLED

    // The result of a translate opearation.
    struct BrowsePathResult
    {
         OpcUa::StatusCode Status;
         std::vector<OpcUa::BrowsePathTarget> Targets;
    };
*/

/* DISABLED

    struct TranslateBrowsePathsToNodeIdsParameters
    {
         std::vector<OpcUa::BrowsePath> BrowsePaths;
    };
*/

/* DISABLED

    // Translates one or more paths in the server address space.
    struct TranslateBrowsePathsToNodeIdsRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::TranslateBrowsePathsToNodeIdsParameters Parameters;

         TranslateBrowsePathsToNodeIdsRequest();
    };
*/

/* DISABLED

    // Translates one or more paths in the server address space.
    struct TranslateBrowsePathsToNodeIdsResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         std::vector<OpcUa::BrowsePathResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

         TranslateBrowsePathsToNodeIdsResponse();
    };
*/

/* DISABLED

    struct RegisterNodesParameters
    {
         std::vector<OpcUa::NodeId> NodesToRegister;
    };
*/

/* DISABLED

    // Registers one or more nodes for repeated use within a session.
    struct RegisterNodesRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::RegisterNodesParameters Parameters;

         RegisterNodesRequest();
    };
*/

/* DISABLED

    struct RegisterNodesResult
    {
         std::vector<OpcUa::NodeId> RegisteredNodeIds;
    };
*/

/* DISABLED

    // Registers one or more nodes for repeated use within a session.
    struct RegisterNodesResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         OpcUa::RegisterNodesResult Parameters;

         RegisterNodesResponse();
    };
*/

/* DISABLED

    struct UnregisterNodesParameters
    {
         std::vector<OpcUa::NodeId> NodesToUnregister;
    };
*/

/* DISABLED

    // Unregisters one or more previously registered nodes.
    struct UnregisterNodesRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::UnregisterNodesParameters Parameters;

         UnregisterNodesRequest();
    };
*/

/* DISABLED

    // Unregisters one or more previously registered nodes.
    struct UnregisterNodesResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;

         UnregisterNodesResponse();
    };
*/

/* DISABLED

    struct EndpointConfiguration
    {
         int32_t OperationTimeout;
         bool UseBinaryEncoding;
         int32_t MaxStringLength;
         int32_t MaxByteStringLength;
         int32_t MaxArrayLength;
         int32_t MaxMessageSize;
         int32_t MaxBufferSize;
         int32_t ChannelLifetime;
         int32_t SecurityTokenLifetime;
    };
*/

/* DISABLED

    struct SupportedProfile
    {
         std::string OrganizationUri;
         std::string ProfileId;
         std::string ComplianceTool;
         OpcUa::DateTime ComplianceDate;
         OpcUa::ComplianceLevel ComplianceLevel;
         std::vector<std::string> UnsupportedUnitIds;
    };
*/

/* DISABLED

    struct SoftwareCertificate
    {
         std::string ProductName;
         std::string ProductUri;
         std::string VendorName;
         OpcUa::ByteString VendorProductCertificate;
         std::string SoftwareVersion;
         std::string BuildNumber;
         OpcUa::DateTime BuildDate;
         std::string IssuedBy;
         OpcUa::DateTime IssueDate;
         std::vector<OpcUa::SupportedProfile> SupportedProfiles;
    };
*/

/* DISABLED

    struct QueryDataDescription
    {
         OpcUa::RelativePath RelativePath;
         OpcUa::AttributeId AttributeId;
         std::string IndexRange;
    };
*/

/* DISABLED

    struct NodeTypeDescription
    {
         OpcUa::ExpandedNodeId TypeDefinitionNode;
         bool IncludeSubTypes;
         std::vector<OpcUa::QueryDataDescription> DataToReturn;
    };
*/

/* DISABLED

    struct QueryDataSet
    {
         OpcUa::ExpandedNodeId NodeId;
         OpcUa::ExpandedNodeId TypeDefinitionNode;
         std::vector<OpcUa::Variant> Values;
    };
*/

/* DISABLED

    struct NodeReference
    {
         OpcUa::NodeId NodeId;
         OpcUa::NodeId ReferenceTypeId;
         bool IsForward;
         std::vector<OpcUa::NodeId> ReferencedNodeIds;
    };
*/

/* DISABLED

    struct ContentFilterElement
    {
         OpcUa::FilterOperator FilterOperator;
         std::vector<OpcUa::ExtensionObject> FilterOperands;
    };
*/

/* DISABLED

    struct ContentFilter
    {
         std::vector<OpcUa::ContentFilterElement> Elements;
    };
*/

/* DISABLED

    struct FilterOperand
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         OpcUa::ByteString Body;
    };
*/

/* DISABLED

    struct ElementOperand
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         uint32_t Index;
    };
*/

/* DISABLED

    struct LiteralOperand
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         OpcUa::Variant Value;
    };
*/

/* DISABLED

    struct AttributeOperand
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         OpcUa::NodeId NodeId;
         std::string Alias;
         OpcUa::RelativePath BrowsePath;
         OpcUa::AttributeId AttributeId;
         std::string IndexRange;
    };
*/

/* DISABLED

    struct SimpleAttributeOperand
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         OpcUa::NodeId TypeDefinitionId;
         std::vector<OpcUa::QualifiedName> BrowsePath;
         OpcUa::AttributeId AttributeId;
         std::string IndexRange;
    };
*/

/* DISABLED

    struct ContentFilterElementResult
    {
         OpcUa::StatusCode Status;
         std::vector<OpcUa::StatusCode> OperandStatusCodes;
         std::vector<OpcUa::DiagnosticInfo> OperandDiagnosticInfos;
    };
*/

/* DISABLED

    struct ContentFilterResult
    {
         std::vector<OpcUa::ContentFilterElementResult> ElementResults;
         std::vector<OpcUa::DiagnosticInfo> ElementDiagnosticInfos;
    };
*/

/* DISABLED

    struct ParsingResult
    {
         OpcUa::StatusCode Status;
         std::vector<OpcUa::StatusCode> DataStatusCodes;
         std::vector<OpcUa::DiagnosticInfo> DataDiagnosticInfos;
    };
*/

/* DISABLED

    struct QueryFirstParameters
    {
         OpcUa::ViewDescription View;
         std::vector<OpcUa::NodeTypeDescription> NodeTypes;
         OpcUa::ContentFilter Filter;
         uint32_t MaxDataSetsToReturn;
         uint32_t MaxReferencesToReturn;
    };
*/

/* DISABLED

    struct QueryFirstRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::QueryFirstParameters Parameters;

         QueryFirstRequest();
    };
*/

/* DISABLED

    struct QueryFirstResult
    {
         std::vector<OpcUa::QueryDataSet> QueryDataSets;
         OpcUa::ByteString ContinuationPoint;
         std::vector<OpcUa::ParsingResult> ParsingResults;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
         OpcUa::ContentFilterResult FilterResult;
    };
*/

/* DISABLED

    struct QueryFirstResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         OpcUa::QueryFirstResult Parameters;

         QueryFirstResponse();
    };
*/

/* DISABLED

    struct QueryNextParameters
    {
         bool ReleaseContinuationPoint;
         OpcUa::ByteString ContinuationPoint;
    };
*/

/* DISABLED

    struct QueryNextRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::QueryNextParameters Parameters;

         QueryNextRequest();
    };
*/

/* DISABLED

    struct QueryNextResult
    {
         std::vector<OpcUa::QueryDataSet> QueryDataSets;
         OpcUa::ByteString RevisedContinuationPoint;
    };
*/

/* DISABLED

    struct QueryNextResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         OpcUa::QueryNextResult Parameters;

         QueryNextResponse();
    };
*/

struct ReadValueId
{
  OpcUa::NodeId NodeId;
  OpcUa::AttributeId AttributeId;
  std::string IndexRange;
  OpcUa::QualifiedName DataEncoding;
};

struct ReadParameters
{
  double MaxAge;
  OpcUa::TimestampsToReturn TimestampsToReturn;
  std::vector<OpcUa::ReadValueId> AttributesToRead;

  ReadParameters();
};

struct ReadRequest
{
  OpcUa::NodeId TypeId;
  OpcUa::RequestHeader Header;
  OpcUa::ReadParameters Parameters;

  ReadRequest();
};

struct ReadResponse
{
  OpcUa::NodeId TypeId;
  OpcUa::ResponseHeader Header;
  std::vector<OpcUa::DataValue> Results;
  std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

  ReadResponse();
};

/* DISABLED

    struct HistoryReadValueId
    {
         OpcUa::NodeId NodeId;
         std::string IndexRange;
         OpcUa::QualifiedName DataEncoding;
         OpcUa::ByteString ContinuationPoint;
    };
*/

/* DISABLED

    struct HistoryReadResult
    {
         OpcUa::StatusCode Status;
         OpcUa::ByteString ContinuationPoint;
         OpcUa::ExtensionObject HistoryData;
    };
*/

/* DISABLED

    struct HistoryReadDetails
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         OpcUa::ByteString Body;
    };
*/

/* DISABLED

    struct ReadRawModifiedDetails
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         bool IsReadModified;
         OpcUa::DateTime StartTime;
         OpcUa::DateTime EndTime;
         uint32_t NumValuesPerNode;
         bool ReturnBounds;
    };
*/

/* DISABLED

    struct ReadAtTimeDetails
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         std::vector<OpcUa::DateTime> ReqTimes;
         bool UseSimpleBounds;
    };
*/

/* DISABLED

    struct HistoryData
    {
         std::vector<OpcUa::DataValue> DataValues;
    };
*/

/* DISABLED

    struct ModificationInfo
    {
         OpcUa::DateTime ModificationTime;
         OpcUa::HistoryUpdateType UpdateType;
         std::string UserName;
    };
*/

/* DISABLED

    struct HistoryModifiedData
    {
         std::vector<OpcUa::DataValue> DataValues;
         std::vector<OpcUa::ModificationInfo> ModificationInfos;
    };
*/

/* DISABLED

    struct HistoryReadParameters
    {
         OpcUa::ExtensionObject HistoryReadDetails;
         OpcUa::TimestampsToReturn TimestampsToReturn;
         bool ReleaseContinuationPoints;
         std::vector<OpcUa::HistoryReadValueId> AttributesToRead;
    };
*/

/* DISABLED

    struct HistoryReadRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::HistoryReadParameters Parameters;

         HistoryReadRequest();
    };
*/

/* DISABLED

    struct HistoryReadResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         std::vector<OpcUa::HistoryReadResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

         HistoryReadResponse();
    };
*/

struct WriteValue
{
  OpcUa::NodeId NodeId;
  OpcUa::AttributeId AttributeId;
  std::string IndexRange;
  OpcUa::DataValue Value;
};

struct WriteParameters
{
  std::vector<OpcUa::WriteValue> NodesToWrite;
};

struct WriteRequest
{
  OpcUa::NodeId TypeId;
  OpcUa::RequestHeader Header;
  OpcUa::WriteParameters Parameters;

  WriteRequest();
};

struct WriteResponse
{
  OpcUa::NodeId TypeId;
  OpcUa::ResponseHeader Header;
  std::vector<OpcUa::StatusCode> Results;
  std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

  WriteResponse();
};

/* DISABLED

    struct HistoryUpdateDetails
    {
         OpcUa::NodeId NodeId;
    };
*/

/* DISABLED

    struct UpdateDataDetails
    {
         OpcUa::NodeId NodeId;
         OpcUa::PerformUpdateType PerformInsertReplace;
         std::vector<OpcUa::DataValue> UpdateValues;
    };
*/

/* DISABLED

    struct UpdateStructureDataDetails
    {
         OpcUa::NodeId NodeId;
         OpcUa::PerformUpdateType PerformInsertReplace;
         std::vector<OpcUa::DataValue> UpdateValues;
    };
*/

/* DISABLED

    struct DeleteRawModifiedDetails
    {
         OpcUa::NodeId NodeId;
         bool IsDeleteModified;
         OpcUa::DateTime StartTime;
         OpcUa::DateTime EndTime;
    };
*/

/* DISABLED

    struct DeleteAtTimeDetails
    {
         OpcUa::NodeId NodeId;
         std::vector<OpcUa::DateTime> ReqTimes;
    };
*/

/* DISABLED

    struct DeleteEventDetails
    {
         OpcUa::NodeId NodeId;
         std::vector<OpcUa::ByteString> EventIds;
    };
*/

/* DISABLED

    struct HistoryUpdateResult
    {
         OpcUa::StatusCode Status;
         std::vector<OpcUa::StatusCode> OperationResults;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };
*/

/* DISABLED

    struct HistoryUpdateParameters
    {
         std::vector<OpcUa::ExtensionObject> HistoryUpdateDetails;
    };
*/

/* DISABLED

    struct HistoryUpdateRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::HistoryUpdateParameters Parameters;

         HistoryUpdateRequest();
    };
*/

/* DISABLED

    struct HistoryUpdateResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         std::vector<OpcUa::HistoryUpdateResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

         HistoryUpdateResponse();
    };
*/

struct CallMethodRequest
{
  OpcUa::NodeId ObjectId;
  OpcUa::NodeId MethodId;
  std::vector<OpcUa::Variant> InputArguments;
};

struct CallMethodResult
{
  OpcUa::StatusCode Status;
  std::vector<OpcUa::StatusCode> InputArgumentResults;
  std::vector<OpcUa::DiagnosticInfo> InputArgumentDiagnosticInfos;
  std::vector<OpcUa::Variant> OutputArguments;
};

struct CallParameters
{
  std::vector<OpcUa::CallMethodRequest> MethodsToCall;
};

struct CallRequest
{
  OpcUa::NodeId TypeId;
  OpcUa::RequestHeader Header;
  OpcUa::CallParameters Parameters;

  CallRequest();
};

struct CallResponse
{
  OpcUa::NodeId TypeId;
  OpcUa::ResponseHeader Header;
  std::vector<OpcUa::CallMethodResult> Results;
  std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

  CallResponse();
};

/* DISABLED

    struct MonitoringFilter
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         OpcUa::ByteString Body;
    };
*/

/* DISABLED

    struct DataChangeFilter
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         OpcUa::DataChangeTrigger Trigger;
         uint32_t DeadbandType;
         double DeadbandValue;
    };
*/

/* DISABLED

    struct EventFilter
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         std::vector<OpcUa::SimpleAttributeOperand> SelectClauses;
         OpcUa::ContentFilter WhereClause;
    };
*/

/* DISABLED

    struct ReadEventDetails
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         uint32_t NumValuesPerNode;
         OpcUa::DateTime StartTime;
         OpcUa::DateTime EndTime;
         OpcUa::EventFilter Filter;
    };
*/

/* DISABLED

    struct AggregateConfiguration
    {
         bool UseServerCapabilitiesDefaults;
         bool TreatUncertainAsBad;
         uint8_t PercentDataBad;
         uint8_t PercentDataGood;
         bool UseSlopedExtrapolation;
    };
*/

/* DISABLED

    struct ReadProcessedDetails
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         OpcUa::DateTime StartTime;
         OpcUa::DateTime EndTime;
         double ProcessingInterval;
         std::vector<OpcUa::NodeId> AggregateType;
         OpcUa::AggregateConfiguration AggregateConfiguration;
    };
*/

/* DISABLED

    struct AggregateFilter
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         OpcUa::DateTime StartTime;
         OpcUa::NodeId AggregateType;
         double ProcessingInterval;
         OpcUa::AggregateConfiguration AggregateConfiguration;
    };
*/

/* DISABLED

    struct MonitoringFilterResult
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         OpcUa::ByteString Body;
    };
*/

/* DISABLED

    struct EventFilterResult
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         std::vector<OpcUa::StatusCode> SelectClauseResults;
         std::vector<OpcUa::DiagnosticInfo> SelectClauseDiagnosticInfos;
         OpcUa::ContentFilterResult WhereClauseResult;
    };
*/

/* DISABLED

    struct HistoryUpdateEventResult
    {
         OpcUa::StatusCode Status;
         OpcUa::EventFilterResult EventFilterResult;
    };
*/

/* DISABLED

    struct AggregateFilterResult
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         OpcUa::DateTime RevisedStartTime;
         double RevisedProcessingInterval;
         OpcUa::AggregateConfiguration RevisedAggregateConfiguration;
    };
*/

struct MonitoringParameters
{
  uint32_t ClientHandle;
  double SamplingInterval;
  OpcUa::MonitoringFilter Filter;
  uint32_t QueueSize;
  bool DiscardOldest;
};

struct MonitoredItemCreateRequest
{
  OpcUa::ReadValueId ItemToMonitor;
  OpcUa::MonitoringMode MonitoringMode;
  OpcUa::MonitoringParameters RequestedParameters;
};

struct MonitoredItemCreateResult
{
  OpcUa::StatusCode Status;
  uint32_t MonitoredItemId;
  double RevisedSamplingInterval;
  uint32_t RevisedQueueSize;
  OpcUa::MonitoringFilter FilterResult;
};

struct MonitoredItemsParameters
{
  uint32_t SubscriptionId;
  OpcUa::TimestampsToReturn TimestampsToReturn;
  std::vector<OpcUa::MonitoredItemCreateRequest> ItemsToCreate;
};

struct CreateMonitoredItemsRequest
{
  OpcUa::NodeId TypeId;
  OpcUa::RequestHeader Header;
  OpcUa::MonitoredItemsParameters Parameters;

  CreateMonitoredItemsRequest();
};

struct CreateMonitoredItemsResponse
{
  OpcUa::NodeId TypeId;
  OpcUa::ResponseHeader Header;
  std::vector<OpcUa::MonitoredItemCreateResult> Results;
  std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

  CreateMonitoredItemsResponse();
};

/* DISABLED

    struct MonitoredItemModifyRequest
    {
         uint32_t MonitoredItemId;
         OpcUa::MonitoringParameters RequestedParameters;
    };
*/

/* DISABLED

    struct MonitoredItemModifyResult
    {
         OpcUa::StatusCode Status;
         double RevisedSamplingInterval;
         uint32_t RevisedQueueSize;
         OpcUa::ExtensionObject FilterResult;
    };
*/

/* DISABLED

    struct ModifyMonitoredItemsParameters
    {
         uint32_t SubscriptionId;
         OpcUa::TimestampsToReturn TimestampsToReturn;
         std::vector<OpcUa::MonitoredItemModifyRequest> ItemsToModify;
    };
*/

/* DISABLED

    struct ModifyMonitoredItemsRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::ModifyMonitoredItemsParameters Parameters;

         ModifyMonitoredItemsRequest();
    };
*/

/* DISABLED

    struct ModifyMonitoredItemsResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         std::vector<OpcUa::MonitoredItemModifyResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

         ModifyMonitoredItemsResponse();
    };
*/

/* DISABLED

    struct SetMonitoringModeParameters
    {
         uint32_t SubscriptionId;
         OpcUa::MonitoringMode MonitoringMode;
         std::vector<uint32_t> MonitoredItemIds;
    };
*/

/* DISABLED

    struct SetMonitoringModeRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::SetMonitoringModeParameters Parameters;

         SetMonitoringModeRequest();
    };
*/

/* DISABLED

    struct SetMonitoringModeResult
    {
         std::vector<OpcUa::StatusCode> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };
*/

/* DISABLED

    struct SetMonitoringModeResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         OpcUa::SetMonitoringModeResult Parameters;

         SetMonitoringModeResponse();
    };
*/

/* DISABLED

    struct SetTriggeringParameters
    {
         uint32_t SubscriptionId;
         uint32_t TriggeringItemId;
         std::vector<uint32_t> LinksToAdd;
         std::vector<uint32_t> LinksToRemove;
    };
*/

/* DISABLED

    struct SetTriggeringRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::SetTriggeringParameters Parameters;

         SetTriggeringRequest();
    };
*/

/* DISABLED

    struct SetTriggeringResult
    {
         std::vector<OpcUa::StatusCode> AddResults;
         std::vector<OpcUa::DiagnosticInfo> AddDiagnosticInfos;
         std::vector<OpcUa::StatusCode> RemoveResults;
         std::vector<OpcUa::DiagnosticInfo> RemoveDiagnosticInfos;
    };
*/

/* DISABLED

    struct SetTriggeringResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         OpcUa::SetTriggeringResult Parameters;

         SetTriggeringResponse();
    };
*/

struct DeleteMonitoredItemsParameters
{
  uint32_t SubscriptionId;
  std::vector<uint32_t> MonitoredItemIds;
};

struct DeleteMonitoredItemsRequest
{
  OpcUa::NodeId TypeId;
  OpcUa::RequestHeader Header;
  OpcUa::DeleteMonitoredItemsParameters Parameters;

  DeleteMonitoredItemsRequest();
};

struct DeleteMonitoredItemsResponse
{
  OpcUa::NodeId TypeId;
  OpcUa::ResponseHeader Header;
  std::vector<OpcUa::StatusCode> Results;
  std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

  DeleteMonitoredItemsResponse();
};

struct CreateSubscriptionParameters
{
  double RequestedPublishingInterval;
  uint32_t RequestedLifetimeCount;
  uint32_t RequestedMaxKeepAliveCount;
  uint32_t MaxNotificationsPerPublish;
  bool PublishingEnabled;
  uint8_t Priority;

  CreateSubscriptionParameters();
};

struct CreateSubscriptionRequest
{
  OpcUa::NodeId TypeId;
  OpcUa::RequestHeader Header;
  OpcUa::CreateSubscriptionParameters Parameters;

  CreateSubscriptionRequest();
};

struct SubscriptionData
{
  uint32_t SubscriptionId;
  double RevisedPublishingInterval;
  uint32_t RevisedLifetimeCount;
  uint32_t RevisedMaxKeepAliveCount;

  SubscriptionData();
};

struct CreateSubscriptionResponse
{
  OpcUa::NodeId TypeId;
  OpcUa::ResponseHeader Header;
  OpcUa::SubscriptionData Data;

  CreateSubscriptionResponse();
};

struct ModifySubscriptionParameters
{
  uint32_t SubscriptionId;
  double RequestedPublishingInterval;
  uint32_t RequestedLifetimeCount;
  uint32_t RequestedMaxKeepAliveCount;
  uint32_t MaxNotificationsPerPublish;
  uint8_t Priority;
};

struct ModifySubscriptionRequest
{
  OpcUa::NodeId TypeId;
  OpcUa::RequestHeader Header;
  OpcUa::ModifySubscriptionParameters Parameters;

  ModifySubscriptionRequest();
};

struct ModifySubscriptionResult
{
  double RevisedPublishingInterval;
  uint32_t RevisedLifetimeCount;
  uint32_t RevisedMaxKeepAliveCount;
};

struct ModifySubscriptionResponse
{
  OpcUa::NodeId TypeId;
  OpcUa::ResponseHeader Header;
  OpcUa::ModifySubscriptionResult Parameters;

  ModifySubscriptionResponse();
};

struct PublishingModeParameters
{
  bool PublishingEnabled;
  std::vector<uint32_t> SubscriptionIds;
};

struct SetPublishingModeRequest
{
  OpcUa::NodeId TypeId;
  OpcUa::RequestHeader Header;
  OpcUa::PublishingModeParameters Parameters;

  SetPublishingModeRequest();
};

struct PublishingModeResult
{
  std::vector<OpcUa::StatusCode> Results;
  std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
};

struct SetPublishingModeResponse
{
  OpcUa::NodeId TypeId;
  OpcUa::ResponseHeader Header;
  OpcUa::PublishingModeResult Result;

  SetPublishingModeResponse();
};

struct NotificationMessage
{
  uint32_t SequenceNumber;
  OpcUa::DateTime PublishTime;
  std::vector<OpcUa::NotificationData> NotificationData;

  NotificationMessage();
};

/* DISABLED

    struct NotificationData
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         OpcUa::ByteString Body;
    };
*/

/* DISABLED

    struct MonitoredItemNotification
    {
         uint32_t ClientHandle;
         OpcUa::DataValue Value;
    };
*/

/* DISABLED

    struct DataChangeNotification
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         std::vector<OpcUa::MonitoredItemNotification> MonitoredItems;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };
*/

/* DISABLED

    struct EventFieldList
    {
         uint32_t ClientHandle;
         std::vector<OpcUa::Variant> EventFields;
    };
*/

/* DISABLED

    struct EventNotificationList
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         std::vector<OpcUa::EventFieldList> Events;
    };
*/

/* DISABLED

    struct HistoryEventFieldList
    {
         std::vector<OpcUa::Variant> EventFields;
    };
*/

/* DISABLED

    struct HistoryEvent
    {
         std::vector<OpcUa::HistoryEventFieldList> Events;
    };
*/

/* DISABLED

    struct UpdateEventDetails
    {
         OpcUa::NodeId NodeId;
         OpcUa::PerformUpdateType PerformInsertReplace;
         OpcUa::EventFilter Filter;
         std::vector<OpcUa::HistoryEventFieldList> EventData;
    };
*/

/* DISABLED

    struct StatusChangeNotification
    {
         OpcUa::NodeId TypeId;
         uint8_t Encoding;
         int32_t BodyLength;
         OpcUa::StatusCode Status;
         OpcUa::DiagnosticInfo DiagnosticInfo;
    };
*/

struct SubscriptionAcknowledgement
{
  uint32_t SubscriptionId;
  uint32_t SequenceNumber;
};

struct PublishRequest
{
  OpcUa::NodeId TypeId;
  OpcUa::RequestHeader Header;
  std::vector<OpcUa::SubscriptionAcknowledgement> SubscriptionAcknowledgements;

  PublishRequest();
};

struct PublishResult
{
  uint32_t SubscriptionId;
  std::vector<uint32_t> AvailableSequenceNumbers;
  bool MoreNotifications;
  OpcUa::NotificationMessage NotificationMessage;
  std::vector<OpcUa::StatusCode> Results;
  std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

  PublishResult();
};

struct PublishResponse
{
  OpcUa::NodeId TypeId;
  OpcUa::ResponseHeader Header;
  OpcUa::PublishResult Parameters;

  PublishResponse();
};

struct RepublishParameters
{
  uint32_t SubscriptionId;
  uint32_t RetransmitSequenceNumber;
};

struct RepublishRequest
{
  OpcUa::NodeId TypeId;
  OpcUa::RequestHeader Header;
  OpcUa::RepublishParameters Parameters;

  RepublishRequest();
};

struct RepublishResponse
{
  OpcUa::NodeId TypeId;
  OpcUa::ResponseHeader Header;
  OpcUa::NotificationMessage NotificationMessage;

  RepublishResponse();
};

/* DISABLED

    struct TransferResult
    {
         OpcUa::StatusCode Status;
         std::vector<uint32_t> AvailableSequenceNumbers;
    };
*/

/* DISABLED

    struct TransferSubscriptionsParameters
    {
         std::vector<uint32_t> SubscriptionIds;
         bool SendInitialValues;
    };
*/

/* DISABLED

    struct TransferSubscriptionsRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::TransferSubscriptionsParameters Parameters;

         TransferSubscriptionsRequest();
    };
*/

/* DISABLED

    struct TransferSubscriptionsResult
    {
         std::vector<OpcUa::TransferResult> Results;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
    };
*/

/* DISABLED

    struct TransferSubscriptionsResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         OpcUa::TransferSubscriptionsResult Parameters;

         TransferSubscriptionsResponse();
    };
*/

struct DeleteSubscriptionsRequest
{
  OpcUa::NodeId TypeId;
  OpcUa::RequestHeader Header;
  std::vector<uint32_t> SubscriptionIds;

  DeleteSubscriptionsRequest();
};

struct DeleteSubscriptionsResponse
{
  OpcUa::NodeId TypeId;
  OpcUa::ResponseHeader Header;
  std::vector<OpcUa::StatusCode> Results;
  std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;

  DeleteSubscriptionsResponse();
};

/* DISABLED

    // A complex type containing all possible scalar types used for testing.
    struct ScalarTestType
    {
         bool Boolean;
         uint8_t SByte;
         uint8_t Byte;
         int16_t Int16;
         uint16_t UInt16;
         int32_t Int32;
         uint32_t UInt32;
         int64_t Int64;
         uint64_t UInt64;
         float Float;
         double Double;
         std::string String;
         OpcUa::DateTime DateTime;
         OpcUa::Guid Guid;
         OpcUa::ByteString ByteString;
         OpcUa::XmlElement XmlElement;
         OpcUa::NodeId NodeId;
         OpcUa::ExpandedNodeId ExpandedNodeId;
         OpcUa::StatusCode Status;
         OpcUa::DiagnosticInfo DiagnosticInfo;
         OpcUa::QualifiedName QualifiedName;
         OpcUa::LocalizedText LocalizedText;
         OpcUa::ExtensionObject ExtensionObject;
         OpcUa::DataValue DataValue;
         OpcUa::EnumeratedTestType EnumeratedValue;
    };
*/

/* DISABLED

    // A complex type containing all possible array types used for testing.
    struct ArrayTestType
    {
         std::vector<bool> Booleans;
         std::vector<uint8_t> SBytes;
         std::vector<int16_t> Int16s;
         std::vector<uint16_t> UInt16s;
         std::vector<int32_t> Int32s;
         std::vector<uint32_t> UInt32s;
         std::vector<int64_t> Int64s;
         std::vector<uint64_t> UInt64s;
         std::vector<float> Floats;
         std::vector<double> Doubles;
         std::vector<std::string> Strings;
         std::vector<OpcUa::DateTime> DateTimes;
         std::vector<OpcUa::Guid> Guids;
         std::vector<OpcUa::ByteString> ByteStrings;
         std::vector<OpcUa::XmlElement> XmlElements;
         std::vector<OpcUa::NodeId> NodeIds;
         std::vector<OpcUa::ExpandedNodeId> ExpandedNodeIds;
         std::vector<OpcUa::StatusCode> StatusCodes;
         std::vector<OpcUa::DiagnosticInfo> DiagnosticInfos;
         std::vector<OpcUa::QualifiedName> QualifiedNames;
         std::vector<OpcUa::LocalizedText> LocalizedTexts;
         std::vector<OpcUa::ExtensionObject> ExtensionObjects;
         std::vector<OpcUa::DataValue> DataValues;
         std::vector<OpcUa::Variant> Variants;
         std::vector<OpcUa::EnumeratedTestType> EnumeratedValues;
    };
*/

/* DISABLED

    struct CompositeTestType
    {
         OpcUa::ScalarTestType Field1;
         OpcUa::ArrayTestType Field2;
    };
*/

/* DISABLED

    struct TestStackParameters
    {
         uint32_t TestId;
         int32_t Iteration;
         OpcUa::Variant Input;
    };
*/

/* DISABLED

    struct TestStackRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::TestStackParameters Parameters;

         TestStackRequest();
    };
*/

/* DISABLED

    struct TestStackResult
    {
         OpcUa::Variant Output;
    };
*/

/* DISABLED

    struct TestStackResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         OpcUa::TestStackResult Parameters;

         TestStackResponse();
    };
*/

/* DISABLED

    struct TestStackExParameters
    {
         uint32_t TestId;
         int32_t Iteration;
         OpcUa::CompositeTestType Input;
    };
*/

/* DISABLED

    struct TestStackExRequest
    {
         OpcUa::NodeId TypeId;
         OpcUa::RequestHeader Header;
         OpcUa::TestStackExParameters Parameters;

         TestStackExRequest();
    };
*/

/* DISABLED

    struct TestStackExResult
    {
         OpcUa::CompositeTestType Output;
    };
*/

/* DISABLED

    struct TestStackExResponse
    {
         OpcUa::NodeId TypeId;
         OpcUa::ResponseHeader Header;
         OpcUa::TestStackExResult Parameters;

         TestStackExResponse();
    };
*/

/* DISABLED

    struct BuildInfo
    {
         std::string ProductUri;
         std::string ManufacturerName;
         std::string ProductName;
         std::string SoftwareVersion;
         std::string BuildNumber;
         OpcUa::DateTime BuildDate;
    };
*/

/* DISABLED

    struct RedundantServerDataType
    {
         std::string ServerId;
         uint8_t ServiceLevel;
         OpcUa::ServerState ServerState;
    };
*/

/* DISABLED

    struct EndpointUrlListDataType
    {
         std::vector<std::string> EndpointUrlList;
    };
*/

/* DISABLED

    struct NetworkGroupDataType
    {
         std::string ServerUri;
         std::vector<OpcUa::EndpointUrlListDataType> NetworkPaths;
    };
*/

/* DISABLED

    struct SamplingIntervalDiagnosticsDataType
    {
         double SamplingInterval;
         uint32_t MonitoredItemCount;
         uint32_t MaxMonitoredItemCount;
         uint32_t DisabledMonitoredItemCount;
    };
*/

/* DISABLED

    struct ServerDiagnosticsSummaryDataType
    {
         uint32_t ServerViewCount;
         uint32_t CurrentSessionCount;
         uint32_t CumulatedSessionCount;
         uint32_t SecurityRejectedSessionCount;
         uint32_t RejectedSessionCount;
         uint32_t SessionTimeoutCount;
         uint32_t SessionAbortCount;
         uint32_t CurrentSubscriptionCount;
         uint32_t CumulatedSubscriptionCount;
         uint32_t PublishingIntervalCount;
         uint32_t SecurityRejectedRequestsCount;
         uint32_t RejectedRequestsCount;
    };
*/

/* DISABLED

    struct ServerStatusDataType
    {
         OpcUa::DateTime StartTime;
         OpcUa::DateTime CurrentTime;
         OpcUa::ServerState State;
         OpcUa::BuildInfo BuildInfo;
         uint32_t SecondsTillShutdown;
         OpcUa::LocalizedText ShutdownReason;
    };
*/

/* DISABLED

    struct SessionSecurityDiagnosticsDataType
    {
         OpcUa::NodeId SessionId;
         std::string ClientUserIdOfSession;
         std::vector<std::string> ClientUserIdHistory;
         std::string AuthenticationMechanism;
         std::string Encoding;
         std::string TransportProtocol;
         OpcUa::MessageSecurityMode SecurityMode;
         std::string SecurityPolicyUri;
         OpcUa::ByteString ClientCertificate;
    };
*/

/* DISABLED

    struct ServiceCounterDataType
    {
         uint32_t TotalCount;
         uint32_t ErrorCount;
    };
*/

/* DISABLED

    struct SessionDiagnosticsDataType
    {
         OpcUa::NodeId SessionId;
         std::string SessionName;
         OpcUa::ApplicationDescription ClientDescription;
         std::string ServerUri;
         std::string EndpointUrl;
         std::vector<std::string> LocaleIds;
         double ActualSessionTimeout;
         uint32_t MaxResponseMessageSize;
         OpcUa::DateTime ClientConnectionTime;
         OpcUa::DateTime ClientLastContactTime;
         uint32_t CurrentSubscriptionsCount;
         uint32_t CurrentMonitoredItemsCount;
         uint32_t CurrentPublishRequestsInQueue;
         OpcUa::ServiceCounterDataType TotalRequestCount;
         uint32_t UnauthorizedRequestCount;
         OpcUa::ServiceCounterDataType ReadCount;
         OpcUa::ServiceCounterDataType HistoryReadCount;
         OpcUa::ServiceCounterDataType WriteCount;
         OpcUa::ServiceCounterDataType HistoryUpdateCount;
         OpcUa::ServiceCounterDataType CallCount;
         OpcUa::ServiceCounterDataType CreateMonitoredItemsCount;
         OpcUa::ServiceCounterDataType ModifyMonitoredItemsCount;
         OpcUa::ServiceCounterDataType SetMonitoringModeCount;
         OpcUa::ServiceCounterDataType SetTriggeringCount;
         OpcUa::ServiceCounterDataType DeleteMonitoredItemsCount;
         OpcUa::ServiceCounterDataType CreateSubscriptionCount;
         OpcUa::ServiceCounterDataType ModifySubscriptionCount;
         OpcUa::ServiceCounterDataType SetPublishingModeCount;
         OpcUa::ServiceCounterDataType PublishCount;
         OpcUa::ServiceCounterDataType RepublishCount;
         OpcUa::ServiceCounterDataType TransferSubscriptionsCount;
         OpcUa::ServiceCounterDataType DeleteSubscriptionsCount;
         OpcUa::ServiceCounterDataType AddNodesCount;
         OpcUa::ServiceCounterDataType AddReferencesCount;
         OpcUa::ServiceCounterDataType DeleteNodesCount;
         OpcUa::ServiceCounterDataType DeleteReferencesCount;
         OpcUa::ServiceCounterDataType BrowseCount;
         OpcUa::ServiceCounterDataType BrowseNextCount;
         OpcUa::ServiceCounterDataType TranslateBrowsePathsToNodeIdsCount;
         OpcUa::ServiceCounterDataType QueryFirstCount;
         OpcUa::ServiceCounterDataType QueryNextCount;
         OpcUa::ServiceCounterDataType RegisterNodesCount;
         OpcUa::ServiceCounterDataType UnregisterNodesCount;
    };
*/

/* DISABLED

    struct StatusResult
    {
         OpcUa::StatusCode Status;
         OpcUa::DiagnosticInfo DiagnosticInfo;
    };
*/

/* DISABLED

    struct SubscriptionDiagnosticsDataType
    {
         OpcUa::NodeId SessionId;
         uint32_t SubscriptionId;
         uint8_t Priority;
         double PublishingInterval;
         uint32_t MaxKeepAliveCount;
         uint32_t MaxLifetimeCount;
         uint32_t MaxNotificationsPerPublish;
         bool PublishingEnabled;
         uint32_t ModifyCount;
         uint32_t EnableCount;
         uint32_t DisableCount;
         uint32_t RepublishRequestCount;
         uint32_t RepublishMessageRequestCount;
         uint32_t RepublishMessageCount;
         uint32_t TransferRequestCount;
         uint32_t TransferredToAltClientCount;
         uint32_t TransferredToSameClientCount;
         uint32_t PublishRequestCount;
         uint32_t DataChangeNotificationsCount;
         uint32_t EventNotificationsCount;
         uint32_t NotificationsCount;
         uint32_t LatePublishRequestCount;
         uint32_t CurrentKeepAliveCount;
         uint32_t CurrentLifetimeCount;
         uint32_t UnacknowledgedMessageCount;
         uint32_t DiscardedMessageCount;
         uint32_t MonitoredItemCount;
         uint32_t DisabledMonitoredItemCount;
         uint32_t MonitoringQueueOverflowCount;
         uint32_t NextSequenceNumber;
         uint32_t EventQueueOverFlowCount;
    };
*/

/* DISABLED

    struct ModelChangeStructureDataType
    {
         OpcUa::NodeId Affected;
         OpcUa::NodeId AffectedType;
         uint8_t Verb;
    };
*/

/* DISABLED

    struct SemanticChangeStructureDataType
    {
         OpcUa::NodeId Affected;
         OpcUa::NodeId AffectedType;
    };
*/

/* DISABLED

    struct Range
    {
         double Low;
         double High;
    };
*/

/* DISABLED

    struct EUInformation
    {
         std::string NamespaceUri;
         int32_t UnitId;
         OpcUa::LocalizedText DisplayName;
         OpcUa::LocalizedText Description;
    };
*/

/* DISABLED

    struct ComplexNumberType
    {
         float Real;
         float Imaginary;
    };
*/

/* DISABLED

    struct DoubleComplexNumberType
    {
         double Real;
         double Imaginary;
    };
*/

/* DISABLED

    struct AxisInformation
    {
         OpcUa::EUInformation EngineeringUnits;
         OpcUa::Range EURange;
         OpcUa::LocalizedText Title;
         OpcUa::AxisScaleEnumeration AxisScaleType;
         std::vector<double> AxisSteps;
    };
*/

/* DISABLED

    struct XVType
    {
         double X;
         float Value;
    };
*/

/* DISABLED

    struct ProgramDiagnosticDataType
    {
         OpcUa::NodeId CreateSessionId;
         std::string CreateClientName;
         OpcUa::DateTime InvocationCreationTime;
         OpcUa::DateTime LastTransitionTime;
         std::string LastMethodCall;
         OpcUa::NodeId LastMethodSessionId;
         std::vector<OpcUa::Argument> LastMethodInputArguments;
         std::vector<OpcUa::Argument> LastMethodOutputArguments;
         OpcUa::DateTime LastMethodCallTime;
         OpcUa::StatusResult LastMethodReturnStatus;
    };
*/

struct Annotation
{
  std::string Message;
  std::string UserName;
  OpcUa::DateTime AnnotationTime;
};

} // namespace

