
// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

#include "standard_address_space_parts.h"
#include <opc/ua/protocol/string_utils.h>
#include <opc/common/addons_core/addon.h>
#include <opc/ua/protocol/node_classes.h>
#include <opc/ua/protocol/strings.h>
#include <opc/ua/protocol/variable_access_level.h>
#include <opc/ua/services/node_management.h>

#include <algorithm>
#include <iostream>
#include <map>

namespace OpcUa
{
  void CreateAddressSpacePart5(OpcUa::NodeManagementServices& registry)
  {
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=51");
        node.BrowseName = ToQualifiedName("FromState");
        node.Class = NodeClass::ReferenceType;
        node.ParentNodeId = ToNodeId("i=32");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ReferenceTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for a reference to the state before a transition.");
        attrs.DisplayName = LocalizedText("FromState");
        attrs.InverseName = LocalizedText("ToTransition");
        attrs.IsAbstract = false;
        attrs.Symmetric = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=52");
        node.BrowseName = ToQualifiedName("ToState");
        node.Class = NodeClass::ReferenceType;
        node.ParentNodeId = ToNodeId("i=32");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ReferenceTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for a reference to the state after a transition.");
        attrs.DisplayName = LocalizedText("ToState");
        attrs.InverseName = LocalizedText("FromTransition");
        attrs.IsAbstract = false;
        attrs.Symmetric = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=53");
        node.BrowseName = ToQualifiedName("HasCause");
        node.Class = NodeClass::ReferenceType;
        node.ParentNodeId = ToNodeId("i=32");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ReferenceTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for a reference to a method that can cause a transition to occur.");
        attrs.DisplayName = LocalizedText("HasCause");
        attrs.InverseName = LocalizedText("MayBeCausedBy");
        attrs.IsAbstract = false;
        attrs.Symmetric = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=54");
        node.BrowseName = ToQualifiedName("HasEffect");
        node.Class = NodeClass::ReferenceType;
        node.ParentNodeId = ToNodeId("i=32");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ReferenceTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for a reference to an event that may be raised when a transition occurs.");
        attrs.DisplayName = LocalizedText("HasEffect");
        attrs.InverseName = LocalizedText("MayBeEffectedBy");
        attrs.IsAbstract = false;
        attrs.Symmetric = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=117");
        node.BrowseName = ToQualifiedName("HasSubStateMachine");
        node.Class = NodeClass::ReferenceType;
        node.ParentNodeId = ToNodeId("i=32");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ReferenceTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for a reference to a substate for a state.");
        attrs.DisplayName = LocalizedText("HasSubStateMachine");
        attrs.InverseName = LocalizedText("SubStateMachineOf");
        attrs.IsAbstract = false;
        attrs.Symmetric = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=58");
        node.BrowseName = ToQualifiedName("BaseObjectType");
        node.Class = NodeClass::ObjectType;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("The base type for all object nodes.");
        attrs.DisplayName = LocalizedText("BaseObjectType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=61");
        node.BrowseName = ToQualifiedName("FolderType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for objects that organize other nodes.");
        attrs.DisplayName = LocalizedText("FolderType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=62");
        node.BrowseName = ToQualifiedName("BaseVariableType");
        node.Class = NodeClass::VariableType;
        VariableTypeAttributes attrs;
        attrs.Description = LocalizedText("The abstract base type for all variable nodes.");
        attrs.DisplayName = LocalizedText("BaseVariableType");
        attrs.Type = ObjectId::String;
        attrs.Rank = -2;
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=63");
        node.BrowseName = ToQualifiedName("BaseDataVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=62");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for variable that represents a process value.");
        attrs.DisplayName = LocalizedText("BaseDataVariableType");
        attrs.Type = ObjectId::String;
        attrs.Rank = -2;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=68");
        node.BrowseName = ToQualifiedName("PropertyType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=62");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for variable that represents a property of another node.");
        attrs.DisplayName = LocalizedText("PropertyType");
        attrs.Type = ObjectId::String;
        attrs.Rank = -2;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=69");
        node.BrowseName = ToQualifiedName("DataTypeDescriptionType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for variable that represents the description of a data type encoding.");
        attrs.DisplayName = LocalizedText("DataTypeDescriptionType");
        attrs.Type = ObjectId::String;
        attrs.Rank = -2;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=69");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=104");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=69");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=105");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=104");
        node.BrowseName = ToQualifiedName("DataTypeVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=69");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The version number for the data type description.");
        attrs.DisplayName = LocalizedText("DataTypeVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=104");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=105");
        node.BrowseName = ToQualifiedName("DictionaryFragment");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=69");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A fragment of a data type dictionary that defines the data type.");
        attrs.DisplayName = LocalizedText("DictionaryFragment");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=105");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=72");
        node.BrowseName = ToQualifiedName("DataTypeDictionaryType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for variable that represents the collection of data type decriptions.");
        attrs.DisplayName = LocalizedText("DataTypeDictionaryType");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -2;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=72");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=106");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=72");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=107");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=106");
        node.BrowseName = ToQualifiedName("DataTypeVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=72");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The version number for the data type dictionary.");
        attrs.DisplayName = LocalizedText("DataTypeVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=106");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=107");
        node.BrowseName = ToQualifiedName("NamespaceUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=72");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A URI that uniquely identifies the dictionary.");
        attrs.DisplayName = LocalizedText("NamespaceUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=107");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=75");
        node.BrowseName = ToQualifiedName("DataTypeSystemType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("DataTypeSystemType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=76");
        node.BrowseName = ToQualifiedName("DataTypeEncodingType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("DataTypeEncodingType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=77");
        node.BrowseName = ToQualifiedName("ModellingRuleType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for an object that describes how an instance declaration is used when a type is instantiated.");
        attrs.DisplayName = LocalizedText("ModellingRuleType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=77");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=111");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=111");
        node.BrowseName = ToQualifiedName("NamingRule");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=77");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Specified the significances of the BrowseName when a type is instantiated.");
        attrs.DisplayName = LocalizedText("NamingRule");
        attrs.Type = ToNodeId("i=120");
        attrs.Value = (int32_t) 1;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=111");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=78");
        node.BrowseName = ToQualifiedName("Mandatory");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeId("i=77");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Specifies that an instance with the attributes and references of the instance declaration must appear when a type is instantiated.");
        attrs.DisplayName = LocalizedText("Mandatory");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=78");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=112");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=112");
        node.BrowseName = ToQualifiedName("NamingRule");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=78");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Specified the significances of the BrowseName when a type is instantiated.");
        attrs.DisplayName = LocalizedText("NamingRule");
        attrs.Type = ToNodeId("i=120");
        attrs.Value = (int32_t) 1;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=80");
        node.BrowseName = ToQualifiedName("Optional");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeId("i=77");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Specifies that an instance with the attributes and references of the instance declaration may appear when a type is instantiated.");
        attrs.DisplayName = LocalizedText("Optional");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=80");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=113");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=113");
        node.BrowseName = ToQualifiedName("NamingRule");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=80");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Specified the significances of the BrowseName when a type is instantiated.");
        attrs.DisplayName = LocalizedText("NamingRule");
        attrs.Type = ToNodeId("i=120");
        attrs.Value = (int32_t) 2;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=83");
        node.BrowseName = ToQualifiedName("ExposesItsArray");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeId("i=77");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Specifies that an instance appears for each element of the containing array variable.");
        attrs.DisplayName = LocalizedText("ExposesItsArray");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=83");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=114");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=114");
        node.BrowseName = ToQualifiedName("NamingRule");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=83");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Specified the significances of the BrowseName when a type is instantiated.");
        attrs.DisplayName = LocalizedText("NamingRule");
        attrs.Type = ToNodeId("i=120");
        attrs.Value = (int32_t) 3;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=79");
        node.BrowseName = ToQualifiedName("MandatoryShared");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeId("i=77");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Specifies that a reference to a shared instance must appear in when a type is instantiated.");
        attrs.DisplayName = LocalizedText("MandatoryShared");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=79");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=116");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=116");
        node.BrowseName = ToQualifiedName("NamingRule");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=79");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Specified the significances of the BrowseName when a type is instantiated.");
        attrs.DisplayName = LocalizedText("NamingRule");
        attrs.Type = ToNodeId("i=120");
        attrs.Value = (int32_t) 1;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11508");
        node.BrowseName = ToQualifiedName("OptionalPlaceholder");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeId("i=77");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Specifies that zero or more instances with the attributes and references of the instance declaration may appear when a type is instantiated.");
        attrs.DisplayName = LocalizedText("OptionalPlaceholder");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11508");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11509");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11509");
        node.BrowseName = ToQualifiedName("NamingRule");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11508");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Specified the significances of the BrowseName when a type is instantiated.");
        attrs.DisplayName = LocalizedText("NamingRule");
        attrs.Type = ToNodeId("i=120");
        attrs.Value = (int32_t) 2;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11510");
        node.BrowseName = ToQualifiedName("MandatoryPlaceholder");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeId("i=77");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Specifies that one or more instances with the attributes and references of the instance declaration must appear when a type is instantiated.");
        attrs.DisplayName = LocalizedText("MandatoryPlaceholder");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11510");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11511");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11511");
        node.BrowseName = ToQualifiedName("NamingRule");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11510");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Specified the significances of the BrowseName when a type is instantiated.");
        attrs.DisplayName = LocalizedText("NamingRule");
        attrs.Type = ToNodeId("i=120");
        attrs.Value = (int32_t) 1;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=84");
        node.BrowseName = ToQualifiedName("Root");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("The root of the server address space.");
        attrs.DisplayName = LocalizedText("Root");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=85");
        node.BrowseName = ToQualifiedName("Objects");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=84");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("The browse entry point when looking for objects in the server address space.");
        attrs.DisplayName = LocalizedText("Objects");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=86");
        node.BrowseName = ToQualifiedName("Types");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=84");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("The browse entry point when looking for types in the server address space.");
        attrs.DisplayName = LocalizedText("Types");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=87");
        node.BrowseName = ToQualifiedName("Views");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=84");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("The browse entry point when looking for views in the server address space.");
        attrs.DisplayName = LocalizedText("Views");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=88");
        node.BrowseName = ToQualifiedName("ObjectTypes");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=86");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("The browse entry point when looking for object types in the server address space.");
        attrs.DisplayName = LocalizedText("ObjectTypes");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::Organizes;
        ref.SourceNodeId = ToNodeId("i=88");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=58");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=89");
        node.BrowseName = ToQualifiedName("VariableTypes");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=86");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("The browse entry point when looking for variable types in the server address space.");
        attrs.DisplayName = LocalizedText("VariableTypes");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::Organizes;
        ref.SourceNodeId = ToNodeId("i=89");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=62");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=90");
        node.BrowseName = ToQualifiedName("DataTypes");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=86");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("The browse entry point when looking for data types in the server address space.");
        attrs.DisplayName = LocalizedText("DataTypes");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::Organizes;
        ref.SourceNodeId = ToNodeId("i=90");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=24");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=91");
        node.BrowseName = ToQualifiedName("ReferenceTypes");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=86");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("The browse entry point when looking for reference types in the server address space.");
        attrs.DisplayName = LocalizedText("ReferenceTypes");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::Organizes;
        ref.SourceNodeId = ToNodeId("i=91");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=31");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=92");
        node.BrowseName = ToQualifiedName("XML Schema");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=90");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=75");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A type system which uses XML schema to describe the encoding of data types.");
        attrs.DisplayName = LocalizedText("XML Schema");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=93");
        node.BrowseName = ToQualifiedName("OPC Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=90");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=75");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A type system which uses OPC binary schema to describe the encoding of data types.");
        attrs.DisplayName = LocalizedText("OPC Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2004");
        node.BrowseName = ToQualifiedName("ServerType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("Specifies the current status and capabilities of the server.");
        attrs.DisplayName = LocalizedText("ServerType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2005");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2006");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2007");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2008");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2742");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2009");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2010");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2011");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2012");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11527");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11489");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2005");
        node.BrowseName = ToQualifiedName("ServerArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The list of server URIs used by the server.");
        attrs.DisplayName = LocalizedText("ServerArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2005");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2006");
        node.BrowseName = ToQualifiedName("NamespaceArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The list of namespace URIs used by the server.");
        attrs.DisplayName = LocalizedText("NamespaceArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2006");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2007");
        node.BrowseName = ToQualifiedName("ServerStatus");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2138");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The current status of the server.");
        attrs.DisplayName = LocalizedText("ServerStatus");
        attrs.Type = ToNodeId("i=862");
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2007");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3074");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2007");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3075");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2007");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3076");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2007");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3077");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2007");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3084");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2007");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3085");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2007");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3074");
        node.BrowseName = ToQualifiedName("StartTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2007");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StartTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3074");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3075");
        node.BrowseName = ToQualifiedName("CurrentTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2007");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3075");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3076");
        node.BrowseName = ToQualifiedName("State");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2007");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("State");
        attrs.Type = ToNodeId("i=852");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3076");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3077");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2007");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=3051");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.Type = ToNodeId("i=338");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3077");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3078");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3077");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3079");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3077");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3080");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3077");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3081");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3077");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3082");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3077");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3083");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3077");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3078");
        node.BrowseName = ToQualifiedName("ProductUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3077");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3078");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3079");
        node.BrowseName = ToQualifiedName("ManufacturerName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3077");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ManufacturerName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3079");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3080");
        node.BrowseName = ToQualifiedName("ProductName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3077");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3080");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3081");
        node.BrowseName = ToQualifiedName("SoftwareVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3077");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3081");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3082");
        node.BrowseName = ToQualifiedName("BuildNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3077");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildNumber");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3082");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3083");
        node.BrowseName = ToQualifiedName("BuildDate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3077");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildDate");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3083");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3084");
        node.BrowseName = ToQualifiedName("SecondsTillShutdown");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2007");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecondsTillShutdown");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3084");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3085");
        node.BrowseName = ToQualifiedName("ShutdownReason");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2007");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ShutdownReason");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3085");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2008");
        node.BrowseName = ToQualifiedName("ServiceLevel");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A value indicating the level of service the server can provide. 255 indicates the best.");
        attrs.DisplayName = LocalizedText("ServiceLevel");
        attrs.Type = ObjectId::Byte;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2008");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2742");
        node.BrowseName = ToQualifiedName("Auditing");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A flag indicating whether the server is currently generating audit events.");
        attrs.DisplayName = LocalizedText("Auditing");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2742");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2009");
        node.BrowseName = ToQualifiedName("ServerCapabilities");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2013");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Describes capabilities supported by the server.");
        attrs.DisplayName = LocalizedText("ServerCapabilities");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3086");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3087");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3088");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3089");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3090");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3091");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3092");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3093");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3094");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3086");
        node.BrowseName = ToQualifiedName("ServerProfileArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of profiles supported by the server.");
        attrs.DisplayName = LocalizedText("ServerProfileArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3086");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3087");
        node.BrowseName = ToQualifiedName("LocaleIdArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of locales supported by the server.");
        attrs.DisplayName = LocalizedText("LocaleIdArray");
        attrs.Type = ToNodeId("i=295");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3087");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3088");
        node.BrowseName = ToQualifiedName("MinSupportedSampleRate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The minimum sampling interval supported by the server.");
        attrs.DisplayName = LocalizedText("MinSupportedSampleRate");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3088");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3089");
        node.BrowseName = ToQualifiedName("MaxBrowseContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for Browse operations per session.");
        attrs.DisplayName = LocalizedText("MaxBrowseContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3089");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3090");
        node.BrowseName = ToQualifiedName("MaxQueryContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for Query operations per session.");
        attrs.DisplayName = LocalizedText("MaxQueryContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3090");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3091");
        node.BrowseName = ToQualifiedName("MaxHistoryContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for ReadHistory operations per session.");
        attrs.DisplayName = LocalizedText("MaxHistoryContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3091");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3092");
        node.BrowseName = ToQualifiedName("SoftwareCertificates");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The software certificates owned by the server.");
        attrs.DisplayName = LocalizedText("SoftwareCertificates");
        attrs.Type = ToNodeId("i=344");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3092");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3093");
        node.BrowseName = ToQualifiedName("ModellingRules");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A folder for the modelling rules supported by the server.");
        attrs.DisplayName = LocalizedText("ModellingRules");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3093");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3094");
        node.BrowseName = ToQualifiedName("AggregateFunctions");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A folder for the real time aggregates supported by the server.");
        attrs.DisplayName = LocalizedText("AggregateFunctions");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3094");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2010");
        node.BrowseName = ToQualifiedName("ServerDiagnostics");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2020");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Reports diagnostics about the server.");
        attrs.DisplayName = LocalizedText("ServerDiagnostics");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2010");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3095");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2010");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3110");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2010");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3111");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2010");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3114");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2010");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3095");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummary");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2010");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2150");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A summary of server level diagnostics.");
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummary");
        attrs.Type = ToNodeId("i=859");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3096");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3097");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3098");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3099");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3100");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3101");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3102");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3104");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3105");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3106");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3107");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3108");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3096");
        node.BrowseName = ToQualifiedName("ServerViewCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerViewCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3096");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3097");
        node.BrowseName = ToQualifiedName("CurrentSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3097");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3098");
        node.BrowseName = ToQualifiedName("CumulatedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3099");
        node.BrowseName = ToQualifiedName("SecurityRejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3099");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3100");
        node.BrowseName = ToQualifiedName("RejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3100");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3101");
        node.BrowseName = ToQualifiedName("SessionTimeoutCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionTimeoutCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3101");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3102");
        node.BrowseName = ToQualifiedName("SessionAbortCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionAbortCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3102");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3104");
        node.BrowseName = ToQualifiedName("PublishingIntervalCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishingIntervalCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3104");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3105");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3105");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3106");
        node.BrowseName = ToQualifiedName("CumulatedSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3106");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3107");
        node.BrowseName = ToQualifiedName("SecurityRejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3107");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3108");
        node.BrowseName = ToQualifiedName("RejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3108");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3110");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2010");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2171");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each active subscription.");
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsArray");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3110");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3111");
        node.BrowseName = ToQualifiedName("SessionsDiagnosticsSummary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2010");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2026");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A summary of session level diagnostics.");
        attrs.DisplayName = LocalizedText("SessionsDiagnosticsSummary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3111");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3112");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3111");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3113");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3111");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3112");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3111");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2196");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionDiagnosticsArray");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3112");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3113");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3111");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2243");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of security related diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsArray");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3113");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3114");
        node.BrowseName = ToQualifiedName("EnabledFlag");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2010");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("If TRUE the diagnostics collection is enabled.");
        attrs.DisplayName = LocalizedText("EnabledFlag");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        attrs.AccessLevel = (VariableAccessLevel) 3;
        attrs.UserAccessLevel = (VariableAccessLevel) 3;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3114");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2011");
        node.BrowseName = ToQualifiedName("VendorServerInfo");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2033");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Server information provided by the vendor.");
        attrs.DisplayName = LocalizedText("VendorServerInfo");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2011");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2012");
        node.BrowseName = ToQualifiedName("ServerRedundancy");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2034");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Describes the redundancy capabilities of the server.");
        attrs.DisplayName = LocalizedText("ServerRedundancy");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2012");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3115");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2012");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3115");
        node.BrowseName = ToQualifiedName("RedundancySupport");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2012");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Indicates what style of redundancy is supported by the server.");
        attrs.DisplayName = LocalizedText("RedundancySupport");
        attrs.Type = ToNodeId("i=851");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3115");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11527");
        node.BrowseName = ToQualifiedName("Namespaces");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=11645");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Describes the namespaces supported by the server.");
        attrs.DisplayName = LocalizedText("Namespaces");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11527");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11490");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11489");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11490");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11491");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11489");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11491");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2013");
        node.BrowseName = ToQualifiedName("ServerCapabilitiesType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("Describes the capabilities supported by the server.");
        attrs.DisplayName = LocalizedText("ServerCapabilitiesType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2014");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2016");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2017");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2732");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2733");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2734");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3049");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11549");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11550");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11551");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2019");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2754");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11562");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2014");
        node.BrowseName = ToQualifiedName("ServerProfileArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of profiles supported by the server.");
        attrs.DisplayName = LocalizedText("ServerProfileArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2014");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2016");
        node.BrowseName = ToQualifiedName("LocaleIdArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of locales supported by the server.");
        attrs.DisplayName = LocalizedText("LocaleIdArray");
        attrs.Type = ToNodeId("i=295");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2016");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2017");
        node.BrowseName = ToQualifiedName("MinSupportedSampleRate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The minimum sampling interval supported by the server.");
        attrs.DisplayName = LocalizedText("MinSupportedSampleRate");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2017");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2732");
        node.BrowseName = ToQualifiedName("MaxBrowseContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for Browse operations per session.");
        attrs.DisplayName = LocalizedText("MaxBrowseContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2732");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2733");
        node.BrowseName = ToQualifiedName("MaxQueryContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for Query operations per session.");
        attrs.DisplayName = LocalizedText("MaxQueryContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2733");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2734");
        node.BrowseName = ToQualifiedName("MaxHistoryContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for ReadHistory operations per session.");
        attrs.DisplayName = LocalizedText("MaxHistoryContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2734");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3049");
        node.BrowseName = ToQualifiedName("SoftwareCertificates");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The software certificates owned by the server.");
        attrs.DisplayName = LocalizedText("SoftwareCertificates");
        attrs.Type = ToNodeId("i=344");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3049");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11549");
        node.BrowseName = ToQualifiedName("MaxArrayLength");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum length for an array value supported by the server.");
        attrs.DisplayName = LocalizedText("MaxArrayLength");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11549");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11550");
        node.BrowseName = ToQualifiedName("MaxStringLength");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum length for a string value supported by the server.");
        attrs.DisplayName = LocalizedText("MaxStringLength");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11550");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11551");
        node.BrowseName = ToQualifiedName("OperationLimits");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=11564");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Defines the limits supported by the server for different operations.");
        attrs.DisplayName = LocalizedText("OperationLimits");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11551");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2019");
        node.BrowseName = ToQualifiedName("ModellingRules");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A folder for the modelling rules supported by the server.");
        attrs.DisplayName = LocalizedText("ModellingRules");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2019");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2754");
        node.BrowseName = ToQualifiedName("AggregateFunctions");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A folder for the real time aggregates supported by the server.");
        attrs.DisplayName = LocalizedText("AggregateFunctions");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2754");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11562");
        node.BrowseName = ToQualifiedName("<VendorCapability>");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2137");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("<VendorCapability>");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11562");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11508");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2020");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("The diagnostics information for a server.");
        attrs.DisplayName = LocalizedText("ServerDiagnosticsType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2020");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2021");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2020");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2022");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2020");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2023");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2020");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2744");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2020");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2025");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2021");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummary");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2020");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2150");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A summary of server level diagnostics.");
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummary");
        attrs.Type = ToNodeId("i=859");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3116");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3117");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3118");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3119");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3120");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3121");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3122");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3124");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3125");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3126");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3127");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3128");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3116");
        node.BrowseName = ToQualifiedName("ServerViewCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerViewCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3116");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3117");
        node.BrowseName = ToQualifiedName("CurrentSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3117");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3118");
        node.BrowseName = ToQualifiedName("CumulatedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3118");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3119");
        node.BrowseName = ToQualifiedName("SecurityRejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3119");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3120");
        node.BrowseName = ToQualifiedName("RejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3120");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3121");
        node.BrowseName = ToQualifiedName("SessionTimeoutCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionTimeoutCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3121");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3122");
        node.BrowseName = ToQualifiedName("SessionAbortCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionAbortCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3122");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3124");
        node.BrowseName = ToQualifiedName("PublishingIntervalCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishingIntervalCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3124");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3125");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3125");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3126");
        node.BrowseName = ToQualifiedName("CumulatedSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3126");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3127");
        node.BrowseName = ToQualifiedName("SecurityRejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3127");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3128");
        node.BrowseName = ToQualifiedName("RejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3128");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2022");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2020");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2164");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each sampling interval supported by the server.");
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsArray");
        attrs.Type = ToNodeId("i=856");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2022");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2023");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2020");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2171");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each active subscription.");
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsArray");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2023");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2744");
        node.BrowseName = ToQualifiedName("SessionsDiagnosticsSummary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2020");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2026");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A summary of session level diagnostics.");
        attrs.DisplayName = LocalizedText("SessionsDiagnosticsSummary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2744");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3129");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2744");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3130");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2744");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3129");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2744");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2196");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionDiagnosticsArray");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3129");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3130");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2744");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2243");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of security related diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsArray");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3130");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2025");
        node.BrowseName = ToQualifiedName("EnabledFlag");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2020");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("If TRUE the diagnostics collection is enabled.");
        attrs.DisplayName = LocalizedText("EnabledFlag");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        attrs.AccessLevel = (VariableAccessLevel) 3;
        attrs.UserAccessLevel = (VariableAccessLevel) 3;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2025");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2026");
        node.BrowseName = ToQualifiedName("SessionsDiagnosticsSummaryType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("Provides a summary of session level diagnostics.");
        attrs.DisplayName = LocalizedText("SessionsDiagnosticsSummaryType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2026");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2027");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2026");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2028");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2026");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12097");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2027");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2026");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2196");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionDiagnosticsArray");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2027");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2028");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2026");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2243");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of security related diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsArray");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2028");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12097");
        node.BrowseName = ToQualifiedName("<SessionPlaceholder>");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2026");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2029");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("<SessionPlaceholder>");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12097");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12098");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12097");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12142");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12097");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12152");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12097");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11508");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12098");
        node.BrowseName = ToQualifiedName("SessionDiagnostics");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12097");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2197");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Diagnostics information for an active session.");
        attrs.DisplayName = LocalizedText("SessionDiagnostics");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12099");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12100");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12101");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12102");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12103");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12104");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12105");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12106");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12107");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12108");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12109");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12110");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12111");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12112");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12113");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12114");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12115");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12116");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12117");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12118");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12119");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12120");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12121");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12122");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12123");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12124");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12125");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12126");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12127");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12128");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12129");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12130");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12131");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12132");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12133");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12134");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12135");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12136");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12137");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12138");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12139");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12140");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12141");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12099");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12099");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12100");
        node.BrowseName = ToQualifiedName("SessionName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12100");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12101");
        node.BrowseName = ToQualifiedName("ClientDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientDescription");
        attrs.Type = ToNodeId("i=308");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12101");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12102");
        node.BrowseName = ToQualifiedName("ServerUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12102");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12103");
        node.BrowseName = ToQualifiedName("EndpointUrl");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrl");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12103");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12104");
        node.BrowseName = ToQualifiedName("LocaleIds");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LocaleIds");
        attrs.Type = ToNodeId("i=295");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12104");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12105");
        node.BrowseName = ToQualifiedName("ActualSessionTimeout");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ActualSessionTimeout");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12105");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12106");
        node.BrowseName = ToQualifiedName("MaxResponseMessageSize");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxResponseMessageSize");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12106");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12107");
        node.BrowseName = ToQualifiedName("ClientConnectionTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientConnectionTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12107");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12108");
        node.BrowseName = ToQualifiedName("ClientLastContactTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientLastContactTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12108");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12109");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12109");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12110");
        node.BrowseName = ToQualifiedName("CurrentMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentMonitoredItemsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12110");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12111");
        node.BrowseName = ToQualifiedName("CurrentPublishRequestsInQueue");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentPublishRequestsInQueue");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12111");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12112");
        node.BrowseName = ToQualifiedName("TotalRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TotalRequestCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12112");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12113");
        node.BrowseName = ToQualifiedName("UnauthorizedRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnauthorizedRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12113");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12114");
        node.BrowseName = ToQualifiedName("ReadCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ReadCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12114");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12115");
        node.BrowseName = ToQualifiedName("HistoryReadCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryReadCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12115");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12116");
        node.BrowseName = ToQualifiedName("WriteCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("WriteCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12116");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12117");
        node.BrowseName = ToQualifiedName("HistoryUpdateCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryUpdateCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12117");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12118");
        node.BrowseName = ToQualifiedName("CallCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CallCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12118");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12119");
        node.BrowseName = ToQualifiedName("CreateMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CreateMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12119");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12120");
        node.BrowseName = ToQualifiedName("ModifyMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifyMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12120");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12121");
        node.BrowseName = ToQualifiedName("SetMonitoringModeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetMonitoringModeCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12121");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12122");
        node.BrowseName = ToQualifiedName("SetTriggeringCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetTriggeringCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12122");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12123");
        node.BrowseName = ToQualifiedName("DeleteMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12123");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12124");
        node.BrowseName = ToQualifiedName("CreateSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CreateSubscriptionCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12124");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12125");
        node.BrowseName = ToQualifiedName("ModifySubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifySubscriptionCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12125");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12126");
        node.BrowseName = ToQualifiedName("SetPublishingModeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetPublishingModeCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12126");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12127");
        node.BrowseName = ToQualifiedName("PublishCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12127");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12128");
        node.BrowseName = ToQualifiedName("RepublishCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RepublishCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12128");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12129");
        node.BrowseName = ToQualifiedName("TransferSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransferSubscriptionsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12129");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12130");
        node.BrowseName = ToQualifiedName("DeleteSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteSubscriptionsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12130");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12131");
        node.BrowseName = ToQualifiedName("AddNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12131");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12132");
        node.BrowseName = ToQualifiedName("AddReferencesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddReferencesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12132");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12133");
        node.BrowseName = ToQualifiedName("DeleteNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12133");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12134");
        node.BrowseName = ToQualifiedName("DeleteReferencesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteReferencesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12134");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12135");
        node.BrowseName = ToQualifiedName("BrowseCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BrowseCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12135");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12136");
        node.BrowseName = ToQualifiedName("BrowseNextCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BrowseNextCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12136");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12137");
        node.BrowseName = ToQualifiedName("TranslateBrowsePathsToNodeIdsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TranslateBrowsePathsToNodeIdsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12137");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12138");
        node.BrowseName = ToQualifiedName("QueryFirstCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("QueryFirstCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12138");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12139");
        node.BrowseName = ToQualifiedName("QueryNextCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("QueryNextCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12139");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12140");
        node.BrowseName = ToQualifiedName("RegisterNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RegisterNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12140");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12141");
        node.BrowseName = ToQualifiedName("UnregisterNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnregisterNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12141");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12142");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnostics");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12097");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2244");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Security related diagnostics information for an active session.");
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnostics");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12143");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12144");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12145");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12146");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12147");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12148");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12149");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12150");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12151");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12143");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12143");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12144");
        node.BrowseName = ToQualifiedName("ClientUserIdOfSession");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientUserIdOfSession");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12144");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12145");
        node.BrowseName = ToQualifiedName("ClientUserIdHistory");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientUserIdHistory");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12145");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12146");
        node.BrowseName = ToQualifiedName("AuthenticationMechanism");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AuthenticationMechanism");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12146");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12147");
        node.BrowseName = ToQualifiedName("Encoding");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Encoding");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12147");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12148");
        node.BrowseName = ToQualifiedName("TransportProtocol");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransportProtocol");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12148");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12149");
        node.BrowseName = ToQualifiedName("SecurityMode");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityMode");
        attrs.Type = ToNodeId("i=302");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12149");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12150");
        node.BrowseName = ToQualifiedName("SecurityPolicyUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityPolicyUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12151");
        node.BrowseName = ToQualifiedName("ClientCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientCertificate");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12151");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12152");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12097");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2171");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each subscription owned by the session.");
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsArray");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12152");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2029");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsObjectType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A container for session level diagnostics information.");
        attrs.DisplayName = LocalizedText("SessionDiagnosticsObjectType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2029");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2030");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2029");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2031");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2029");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2032");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2030");
        node.BrowseName = ToQualifiedName("SessionDiagnostics");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2029");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2197");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Diagnostics information for an active session.");
        attrs.DisplayName = LocalizedText("SessionDiagnostics");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3131");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3132");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3133");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3134");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3135");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3136");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3137");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3138");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3139");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3140");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3141");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3142");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3143");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8898");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11891");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3151");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3152");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3153");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3154");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3155");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3156");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3157");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3158");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3159");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3160");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3161");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3162");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3163");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3164");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3165");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3166");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3167");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3168");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3169");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3170");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3171");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3172");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3173");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3174");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3175");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3176");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3177");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3178");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3131");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3131");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3132");
        node.BrowseName = ToQualifiedName("SessionName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3132");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3133");
        node.BrowseName = ToQualifiedName("ClientDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientDescription");
        attrs.Type = ToNodeId("i=308");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3133");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3134");
        node.BrowseName = ToQualifiedName("ServerUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3134");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3135");
        node.BrowseName = ToQualifiedName("EndpointUrl");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrl");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3135");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3136");
        node.BrowseName = ToQualifiedName("LocaleIds");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LocaleIds");
        attrs.Type = ToNodeId("i=295");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3136");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3137");
        node.BrowseName = ToQualifiedName("ActualSessionTimeout");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ActualSessionTimeout");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3137");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3138");
        node.BrowseName = ToQualifiedName("MaxResponseMessageSize");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxResponseMessageSize");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3138");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3139");
        node.BrowseName = ToQualifiedName("ClientConnectionTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientConnectionTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3139");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3140");
        node.BrowseName = ToQualifiedName("ClientLastContactTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientLastContactTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3140");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3141");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3141");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3142");
        node.BrowseName = ToQualifiedName("CurrentMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentMonitoredItemsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3143");
        node.BrowseName = ToQualifiedName("CurrentPublishRequestsInQueue");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentPublishRequestsInQueue");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3143");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8898");
        node.BrowseName = ToQualifiedName("TotalRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TotalRequestCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8898");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11891");
        node.BrowseName = ToQualifiedName("UnauthorizedRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnauthorizedRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11891");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3151");
        node.BrowseName = ToQualifiedName("ReadCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ReadCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3151");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3152");
        node.BrowseName = ToQualifiedName("HistoryReadCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryReadCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3152");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3153");
        node.BrowseName = ToQualifiedName("WriteCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("WriteCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3153");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3154");
        node.BrowseName = ToQualifiedName("HistoryUpdateCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryUpdateCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3154");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3155");
        node.BrowseName = ToQualifiedName("CallCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CallCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3155");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3156");
        node.BrowseName = ToQualifiedName("CreateMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CreateMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3156");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3157");
        node.BrowseName = ToQualifiedName("ModifyMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifyMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3157");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3158");
        node.BrowseName = ToQualifiedName("SetMonitoringModeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetMonitoringModeCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3158");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3159");
        node.BrowseName = ToQualifiedName("SetTriggeringCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetTriggeringCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3159");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3160");
        node.BrowseName = ToQualifiedName("DeleteMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3160");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3161");
        node.BrowseName = ToQualifiedName("CreateSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CreateSubscriptionCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3161");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3162");
        node.BrowseName = ToQualifiedName("ModifySubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifySubscriptionCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3162");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3163");
        node.BrowseName = ToQualifiedName("SetPublishingModeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetPublishingModeCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3163");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3164");
        node.BrowseName = ToQualifiedName("PublishCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3164");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3165");
        node.BrowseName = ToQualifiedName("RepublishCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RepublishCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3165");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3166");
        node.BrowseName = ToQualifiedName("TransferSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransferSubscriptionsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3166");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3167");
        node.BrowseName = ToQualifiedName("DeleteSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteSubscriptionsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3167");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3168");
        node.BrowseName = ToQualifiedName("AddNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3168");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3169");
        node.BrowseName = ToQualifiedName("AddReferencesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddReferencesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3169");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3170");
        node.BrowseName = ToQualifiedName("DeleteNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3170");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3171");
        node.BrowseName = ToQualifiedName("DeleteReferencesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteReferencesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3171");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3172");
        node.BrowseName = ToQualifiedName("BrowseCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BrowseCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3173");
        node.BrowseName = ToQualifiedName("BrowseNextCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BrowseNextCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3173");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3174");
        node.BrowseName = ToQualifiedName("TranslateBrowsePathsToNodeIdsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TranslateBrowsePathsToNodeIdsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3174");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3175");
        node.BrowseName = ToQualifiedName("QueryFirstCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("QueryFirstCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3175");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3176");
        node.BrowseName = ToQualifiedName("QueryNextCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("QueryNextCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3176");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3177");
        node.BrowseName = ToQualifiedName("RegisterNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RegisterNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3177");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3178");
        node.BrowseName = ToQualifiedName("UnregisterNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnregisterNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3178");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2031");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnostics");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2029");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2244");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Security related diagnostics information for an active session.");
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnostics");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3179");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3180");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3181");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3182");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3183");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3184");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3185");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3186");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3187");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3179");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3179");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3180");
        node.BrowseName = ToQualifiedName("ClientUserIdOfSession");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientUserIdOfSession");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3180");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3181");
        node.BrowseName = ToQualifiedName("ClientUserIdHistory");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientUserIdHistory");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3181");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3182");
        node.BrowseName = ToQualifiedName("AuthenticationMechanism");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AuthenticationMechanism");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3182");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3183");
        node.BrowseName = ToQualifiedName("Encoding");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Encoding");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3183");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3184");
        node.BrowseName = ToQualifiedName("TransportProtocol");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransportProtocol");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3184");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3185");
        node.BrowseName = ToQualifiedName("SecurityMode");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityMode");
        attrs.Type = ToNodeId("i=302");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3185");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3186");
        node.BrowseName = ToQualifiedName("SecurityPolicyUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityPolicyUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3186");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3187");
        node.BrowseName = ToQualifiedName("ClientCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientCertificate");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3187");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2032");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2029");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2171");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each subscription owned by the session.");
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsArray");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2032");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2033");
        node.BrowseName = ToQualifiedName("VendorServerInfoType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A base type for vendor specific server information.");
        attrs.DisplayName = LocalizedText("VendorServerInfoType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2034");
        node.BrowseName = ToQualifiedName("ServerRedundancyType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A base type for an object that describe how a server supports redundancy.");
        attrs.DisplayName = LocalizedText("ServerRedundancyType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2034");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2035");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2035");
        node.BrowseName = ToQualifiedName("RedundancySupport");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2034");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Indicates what style of redundancy is supported by the server.");
        attrs.DisplayName = LocalizedText("RedundancySupport");
        attrs.Type = ToNodeId("i=851");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2035");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2036");
        node.BrowseName = ToQualifiedName("TransparentRedundancyType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2034");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("Identifies the capabilties of server that supports transparent redundancy.");
        attrs.DisplayName = LocalizedText("TransparentRedundancyType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2036");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2037");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2036");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2038");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2037");
        node.BrowseName = ToQualifiedName("CurrentServerId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2036");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The Id of the server that is currently in use.");
        attrs.DisplayName = LocalizedText("CurrentServerId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2037");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2038");
        node.BrowseName = ToQualifiedName("RedundantServerArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2036");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of servers in the same redundant set.");
        attrs.DisplayName = LocalizedText("RedundantServerArray");
        attrs.Type = ToNodeId("i=853");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2038");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2039");
        node.BrowseName = ToQualifiedName("NonTransparentRedundancyType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2034");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("Identifies the capabilties of server that supports non-transparent redundancy.");
        attrs.DisplayName = LocalizedText("NonTransparentRedundancyType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2039");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2040");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2040");
        node.BrowseName = ToQualifiedName("ServerUriArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2039");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of servers in the same redundant set.");
        attrs.DisplayName = LocalizedText("ServerUriArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2040");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11945");
        node.BrowseName = ToQualifiedName("NonTransparentNetworkRedundancyType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2039");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("NonTransparentNetworkRedundancyType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11945");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11948");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11948");
        node.BrowseName = ToQualifiedName("ServerNetworkGroups");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11945");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerNetworkGroups");
        attrs.Type = ToNodeId("i=11944");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11948");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11564");
        node.BrowseName = ToQualifiedName("OperationLimitsType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("Identifies the operation limits imposed by the server.");
        attrs.DisplayName = LocalizedText("OperationLimitsType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11565");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12161");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12162");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11567");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12163");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12164");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11569");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11570");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11571");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11572");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11573");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11574");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11565");
        node.BrowseName = ToQualifiedName("MaxNodesPerRead");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Read request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerRead");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11565");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12161");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryReadData");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single data HistoryRead request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryReadData");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12161");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12162");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryReadEvents");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single event HistoryRead request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryReadEvents");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12162");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11567");
        node.BrowseName = ToQualifiedName("MaxNodesPerWrite");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Write request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerWrite");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11567");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12163");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryUpdateData");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single data HistoryUpdate request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryUpdateData");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12163");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12164");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryUpdateEvents");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single event HistoryUpdate request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryUpdateEvents");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12164");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11569");
        node.BrowseName = ToQualifiedName("MaxNodesPerMethodCall");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Call request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerMethodCall");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11569");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11570");
        node.BrowseName = ToQualifiedName("MaxNodesPerBrowse");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Browse request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerBrowse");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11570");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11571");
        node.BrowseName = ToQualifiedName("MaxNodesPerRegisterNodes");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single RegisterNodes request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerRegisterNodes");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11571");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11572");
        node.BrowseName = ToQualifiedName("MaxNodesPerTranslateBrowsePathsToNodeIds");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single TranslateBrowsePathsToNodeIds request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerTranslateBrowsePathsToNodeIds");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11572");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11573");
        node.BrowseName = ToQualifiedName("MaxNodesPerNodeManagement");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single AddNodes, AddReferences, DeleteNodes or DeleteReferences request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerNodeManagement");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11573");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11574");
        node.BrowseName = ToQualifiedName("MaxMonitoredItemsPerCall");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single MonitoredItem related request.");
        attrs.DisplayName = LocalizedText("MaxMonitoredItemsPerCall");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11574");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11575");
        node.BrowseName = ToQualifiedName("FileType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("An object that represents a file that can be accessed via the server.");
        attrs.DisplayName = LocalizedText("FileType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11576");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11577");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11578");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11579");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11580");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11583");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11585");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11588");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11590");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11593");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11576");
        node.BrowseName = ToQualifiedName("Size");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11575");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The size of the file in bytes.");
        attrs.DisplayName = LocalizedText("Size");
        attrs.Type = ObjectId::UInt64;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11576");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11577");
        node.BrowseName = ToQualifiedName("Writeable");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11575");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Whether the file is writeable.");
        attrs.DisplayName = LocalizedText("Writeable");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11577");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11578");
        node.BrowseName = ToQualifiedName("UserWriteable");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11575");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Whether the file is writeable by the current user.");
        attrs.DisplayName = LocalizedText("UserWriteable");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11578");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11579");
        node.BrowseName = ToQualifiedName("OpenCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11575");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The current number of open file handles.");
        attrs.DisplayName = LocalizedText("OpenCount");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11579");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11581");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11580");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11581");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11582");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11580");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11582");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11584");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11583");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11584");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11586");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11585");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11586");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11587");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11585");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11587");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11589");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11588");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11589");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11591");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11590");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11591");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11592");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11590");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11592");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11594");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11593");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11594");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11595");
        node.BrowseName = ToQualifiedName("AddressSpaceFileType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=11575");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A file used to store a namespace exported from the server.");
        attrs.DisplayName = LocalizedText("AddressSpaceFileType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11595");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11615");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11616");
        node.BrowseName = ToQualifiedName("NamespaceMetadataType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("Provides the metadata for a namespace used by the server.");
        attrs.DisplayName = LocalizedText("NamespaceMetadataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11616");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11617");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11616");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11618");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11616");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11619");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11616");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11620");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11616");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11621");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11616");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11622");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11616");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11623");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11616");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11624");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11617");
        node.BrowseName = ToQualifiedName("NamespaceUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11616");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The URI of the namespace.");
        attrs.DisplayName = LocalizedText("NamespaceUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11618");
        node.BrowseName = ToQualifiedName("NamespaceVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11616");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The human readable string representing version of the namespace.");
        attrs.DisplayName = LocalizedText("NamespaceVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11618");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11619");
        node.BrowseName = ToQualifiedName("NamespacePublicationDate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11616");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The publication date for the namespace.");
        attrs.DisplayName = LocalizedText("NamespacePublicationDate");
        attrs.Type = ObjectId::DateTime;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11619");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11620");
        node.BrowseName = ToQualifiedName("IsNamespaceSubset");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11616");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("If TRUE then the server only supports a subset of the namespace.");
        attrs.DisplayName = LocalizedText("IsNamespaceSubset");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11620");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11621");
        node.BrowseName = ToQualifiedName("StaticNodeIdIdentifierTypes");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11616");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of IdTypes for nodes which are the same in every server that exposes them.");
        attrs.DisplayName = LocalizedText("StaticNodeIdIdentifierTypes");
        attrs.Type = ToNodeId("i=256");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11621");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11622");
        node.BrowseName = ToQualifiedName("StaticNumericNodeIdRange");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11616");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of ranges for numeric node ids which are the same in every server that exposes them.");
        attrs.DisplayName = LocalizedText("StaticNumericNodeIdRange");
        attrs.Type = ToNodeId("i=291");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11622");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11623");
        node.BrowseName = ToQualifiedName("StaticStringNodeIdPattern");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11616");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A regular expression which matches string node ids are the same in every server that exposes them.");
        attrs.DisplayName = LocalizedText("StaticStringNodeIdPattern");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11623");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11624");
        node.BrowseName = ToQualifiedName("NamespaceFile");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11616");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=11595");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A file containing the nodes of the namespace.");
        attrs.DisplayName = LocalizedText("NamespaceFile");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11625");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11626");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11627");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11628");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11629");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11632");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11634");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11637");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11639");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11642");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11625");
        node.BrowseName = ToQualifiedName("Size");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11624");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The size of the file in bytes.");
        attrs.DisplayName = LocalizedText("Size");
        attrs.Type = ObjectId::UInt64;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11625");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11626");
        node.BrowseName = ToQualifiedName("Writeable");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11624");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Whether the file is writeable.");
        attrs.DisplayName = LocalizedText("Writeable");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11626");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11627");
        node.BrowseName = ToQualifiedName("UserWriteable");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11624");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Whether the file is writeable by the current user.");
        attrs.DisplayName = LocalizedText("UserWriteable");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11627");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11628");
        node.BrowseName = ToQualifiedName("OpenCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11624");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The current number of open file handles.");
        attrs.DisplayName = LocalizedText("OpenCount");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11628");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11630");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11629");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11630");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11631");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11629");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11631");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11633");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11632");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11633");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11635");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11634");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11635");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11636");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11634");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11636");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11638");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11637");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11638");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11640");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11639");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11640");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11641");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11639");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11641");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11643");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11642");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11643");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11645");
        node.BrowseName = ToQualifiedName("NamespacesType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A container for the namespace metadata provided by the server.");
        attrs.DisplayName = LocalizedText("NamespacesType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11645");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11646");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11645");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11675");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11646");
        node.BrowseName = ToQualifiedName("<NamespaceIdentifier>");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11645");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=11616");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("<NamespaceIdentifier>");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11646");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11647");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11646");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11648");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11646");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11649");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11646");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11650");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11646");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11651");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11646");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11652");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11646");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11653");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11646");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11508");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11647");
        node.BrowseName = ToQualifiedName("NamespaceUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11646");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The URI of the namespace.");
        attrs.DisplayName = LocalizedText("NamespaceUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11647");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11648");
        node.BrowseName = ToQualifiedName("NamespaceVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11646");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The human readable string representing version of the namespace.");
        attrs.DisplayName = LocalizedText("NamespaceVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11648");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11649");
        node.BrowseName = ToQualifiedName("NamespacePublicationDate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11646");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The publication date for the namespace.");
        attrs.DisplayName = LocalizedText("NamespacePublicationDate");
        attrs.Type = ObjectId::DateTime;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11649");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11650");
        node.BrowseName = ToQualifiedName("IsNamespaceSubset");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11646");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("If TRUE then the server only supports a subset of the namespace.");
        attrs.DisplayName = LocalizedText("IsNamespaceSubset");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11650");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11651");
        node.BrowseName = ToQualifiedName("StaticNodeIdIdentifierTypes");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11646");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of IdTypes for nodes which are the same in every server that exposes them.");
        attrs.DisplayName = LocalizedText("StaticNodeIdIdentifierTypes");
        attrs.Type = ToNodeId("i=256");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11651");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11652");
        node.BrowseName = ToQualifiedName("StaticNumericNodeIdRange");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11646");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of ranges for numeric node ids which are the same in every server that exposes them.");
        attrs.DisplayName = LocalizedText("StaticNumericNodeIdRange");
        attrs.Type = ToNodeId("i=291");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11652");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11653");
        node.BrowseName = ToQualifiedName("StaticStringNodeIdPattern");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11646");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A regular expression which matches string node ids are the same in every server that exposes them.");
        attrs.DisplayName = LocalizedText("StaticStringNodeIdPattern");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11653");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11675");
        node.BrowseName = ToQualifiedName("AddressSpaceFile");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11645");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=11595");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A file containing the nodes of the namespace.");
        attrs.DisplayName = LocalizedText("AddressSpaceFile");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11676");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11677");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11678");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11679");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11680");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11683");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11685");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11688");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11690");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11693");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11676");
        node.BrowseName = ToQualifiedName("Size");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11675");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The size of the file in bytes.");
        attrs.DisplayName = LocalizedText("Size");
        attrs.Type = ObjectId::UInt64;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11676");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11677");
        node.BrowseName = ToQualifiedName("Writeable");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11675");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Whether the file is writeable.");
        attrs.DisplayName = LocalizedText("Writeable");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11677");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11678");
        node.BrowseName = ToQualifiedName("UserWriteable");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11675");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Whether the file is writeable by the current user.");
        attrs.DisplayName = LocalizedText("UserWriteable");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11678");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11679");
        node.BrowseName = ToQualifiedName("OpenCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11675");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The current number of open file handles.");
        attrs.DisplayName = LocalizedText("OpenCount");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11679");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11681");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11680");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11681");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11682");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11680");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11682");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11684");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11683");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11684");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11686");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11685");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11686");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11687");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11685");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11687");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11689");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11688");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11689");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11691");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11690");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11691");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11692");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11690");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11692");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11694");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11693");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11694");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2041");
        node.BrowseName = ToQualifiedName("BaseEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("The base type for all events.");
        attrs.DisplayName = LocalizedText("BaseEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2042");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2043");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2044");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2045");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2046");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2047");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3190");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2050");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2051");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2042");
        node.BrowseName = ToQualifiedName("EventId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A globally unique identifier for the event.");
        attrs.DisplayName = LocalizedText("EventId");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2042");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2043");
        node.BrowseName = ToQualifiedName("EventType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The identifier for the event type.");
        attrs.DisplayName = LocalizedText("EventType");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2043");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2044");
        node.BrowseName = ToQualifiedName("SourceNode");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The source of the event.");
        attrs.DisplayName = LocalizedText("SourceNode");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2044");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2045");
        node.BrowseName = ToQualifiedName("SourceName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A description of the source of the event.");
        attrs.DisplayName = LocalizedText("SourceName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2045");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2046");
        node.BrowseName = ToQualifiedName("Time");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("When the event occurred.");
        attrs.DisplayName = LocalizedText("Time");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2046");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2047");
        node.BrowseName = ToQualifiedName("ReceiveTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("When the server received the event from the underlying system.");
        attrs.DisplayName = LocalizedText("ReceiveTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2047");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3190");
        node.BrowseName = ToQualifiedName("LocalTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Information about the local time where the event originated.");
        attrs.DisplayName = LocalizedText("LocalTime");
        attrs.Type = ToNodeId("i=8912");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3190");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2050");
        node.BrowseName = ToQualifiedName("Message");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A localized description of the event.");
        attrs.DisplayName = LocalizedText("Message");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2050");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2051");
        node.BrowseName = ToQualifiedName("Severity");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Indicates how urgent an event is.");
        attrs.DisplayName = LocalizedText("Severity");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2051");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2052");
        node.BrowseName = ToQualifiedName("AuditEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A base type for events used to track client initiated changes to the server state.");
        attrs.DisplayName = LocalizedText("AuditEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2052");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2053");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2052");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2054");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2052");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2055");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2052");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2056");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2052");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2057");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2053");
        node.BrowseName = ToQualifiedName("ActionTimeStamp");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("When the action triggering the event occurred.");
        attrs.DisplayName = LocalizedText("ActionTimeStamp");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2053");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2054");
        node.BrowseName = ToQualifiedName("Status");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("If TRUE the action was performed. If FALSE the action failed and the server state did not change.");
        attrs.DisplayName = LocalizedText("Status");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2054");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2055");
        node.BrowseName = ToQualifiedName("ServerId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The unique identifier for the server generating the event.");
        attrs.DisplayName = LocalizedText("ServerId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2055");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2056");
        node.BrowseName = ToQualifiedName("ClientAuditEntryId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The log entry id provided in the request that initiated the action.");
        attrs.DisplayName = LocalizedText("ClientAuditEntryId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2056");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2057");
        node.BrowseName = ToQualifiedName("ClientUserId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The user identity associated with the session that initiated the action.");
        attrs.DisplayName = LocalizedText("ClientUserId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2057");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2058");
        node.BrowseName = ToQualifiedName("AuditSecurityEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A base type for events used to track security related changes.");
        attrs.DisplayName = LocalizedText("AuditSecurityEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2059");
        node.BrowseName = ToQualifiedName("AuditChannelEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2058");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A base type for events used to track related changes to a secure channel.");
        attrs.DisplayName = LocalizedText("AuditChannelEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2059");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2745");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2745");
        node.BrowseName = ToQualifiedName("SecureChannelId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2059");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The identifier for the secure channel that was changed.");
        attrs.DisplayName = LocalizedText("SecureChannelId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2745");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2060");
        node.BrowseName = ToQualifiedName("AuditOpenSecureChannelEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2059");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("An event that is raised when a secure channel is opened.");
        attrs.DisplayName = LocalizedText("AuditOpenSecureChannelEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2060");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2061");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2060");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2746");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2060");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2062");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2060");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2063");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2060");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2065");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2060");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2066");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2061");
        node.BrowseName = ToQualifiedName("ClientCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2060");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The certificate provided by the client.");
        attrs.DisplayName = LocalizedText("ClientCertificate");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2061");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2746");
        node.BrowseName = ToQualifiedName("ClientCertificateThumbprint");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2060");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The thumbprint for certificate provided by the client.");
        attrs.DisplayName = LocalizedText("ClientCertificateThumbprint");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2746");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2062");
        node.BrowseName = ToQualifiedName("RequestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2060");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The type of request (NEW or RENEW).");
        attrs.DisplayName = LocalizedText("RequestType");
        attrs.Type = ToNodeId("i=315");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2062");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2063");
        node.BrowseName = ToQualifiedName("SecurityPolicyUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2060");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The security policy used by the channel.");
        attrs.DisplayName = LocalizedText("SecurityPolicyUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2063");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2065");
        node.BrowseName = ToQualifiedName("SecurityMode");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2060");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The security mode used by the channel.");
        attrs.DisplayName = LocalizedText("SecurityMode");
        attrs.Type = ToNodeId("i=302");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2065");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2066");
        node.BrowseName = ToQualifiedName("RequestedLifetime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2060");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The lifetime of the channel requested by the client.");
        attrs.DisplayName = LocalizedText("RequestedLifetime");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2066");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2069");
        node.BrowseName = ToQualifiedName("AuditSessionEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A base type for events used to track related changes to a session.");
        attrs.DisplayName = LocalizedText("AuditSessionEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2069");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2070");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2070");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2069");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The unique identifier for the session,.");
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2070");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2071");
        node.BrowseName = ToQualifiedName("AuditCreateSessionEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2069");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("An event that is raised when a session is created.");
        attrs.DisplayName = LocalizedText("AuditCreateSessionEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2071");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2072");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2071");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2073");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2071");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2747");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2071");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2074");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2072");
        node.BrowseName = ToQualifiedName("SecureChannelId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2071");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The secure channel associated with the session.");
        attrs.DisplayName = LocalizedText("SecureChannelId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2072");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2073");
        node.BrowseName = ToQualifiedName("ClientCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2071");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The certificate provided by the client.");
        attrs.DisplayName = LocalizedText("ClientCertificate");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2073");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2747");
        node.BrowseName = ToQualifiedName("ClientCertificateThumbprint");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2071");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The thumbprint of the certificate provided by the client.");
        attrs.DisplayName = LocalizedText("ClientCertificateThumbprint");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2747");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2074");
        node.BrowseName = ToQualifiedName("RevisedSessionTimeout");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2071");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The timeout for the session.");
        attrs.DisplayName = LocalizedText("RevisedSessionTimeout");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2074");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2748");
        node.BrowseName = ToQualifiedName("AuditUrlMismatchEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2071");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditUrlMismatchEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2748");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2749");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2749");
        node.BrowseName = ToQualifiedName("EndpointUrl");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2748");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrl");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2749");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2075");
        node.BrowseName = ToQualifiedName("AuditActivateSessionEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2069");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditActivateSessionEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2075");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2076");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2075");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2077");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2075");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11485");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2076");
        node.BrowseName = ToQualifiedName("ClientSoftwareCertificates");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2075");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientSoftwareCertificates");
        attrs.Type = ToNodeId("i=344");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2076");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2077");
        node.BrowseName = ToQualifiedName("UserIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2075");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserIdentityToken");
        attrs.Type = ToNodeId("i=316");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2077");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11485");
        node.BrowseName = ToQualifiedName("SecureChannelId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2075");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecureChannelId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11485");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2078");
        node.BrowseName = ToQualifiedName("AuditCancelEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2069");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditCancelEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2078");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2079");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2079");
        node.BrowseName = ToQualifiedName("RequestHandle");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2078");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RequestHandle");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2079");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2080");
        node.BrowseName = ToQualifiedName("AuditCertificateEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2058");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditCertificateEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2080");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2081");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2081");
        node.BrowseName = ToQualifiedName("Certificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2080");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Certificate");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2081");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2082");
        node.BrowseName = ToQualifiedName("AuditCertificateDataMismatchEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2080");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditCertificateDataMismatchEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2082");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2083");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2082");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2084");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2083");
        node.BrowseName = ToQualifiedName("InvalidHostname");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2082");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InvalidHostname");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2083");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2084");
        node.BrowseName = ToQualifiedName("InvalidUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2082");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InvalidUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2084");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2085");
        node.BrowseName = ToQualifiedName("AuditCertificateExpiredEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2080");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditCertificateExpiredEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2086");
        node.BrowseName = ToQualifiedName("AuditCertificateInvalidEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2080");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditCertificateInvalidEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2087");
        node.BrowseName = ToQualifiedName("AuditCertificateUntrustedEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2080");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditCertificateUntrustedEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2088");
        node.BrowseName = ToQualifiedName("AuditCertificateRevokedEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2080");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditCertificateRevokedEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2089");
        node.BrowseName = ToQualifiedName("AuditCertificateMismatchEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2080");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditCertificateMismatchEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2090");
        node.BrowseName = ToQualifiedName("AuditNodeManagementEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditNodeManagementEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2091");
        node.BrowseName = ToQualifiedName("AuditAddNodesEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2090");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditAddNodesEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2091");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2092");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2092");
        node.BrowseName = ToQualifiedName("NodesToAdd");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2091");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NodesToAdd");
        attrs.Type = ToNodeId("i=376");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2092");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2093");
        node.BrowseName = ToQualifiedName("AuditDeleteNodesEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2090");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditDeleteNodesEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2093");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2094");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2094");
        node.BrowseName = ToQualifiedName("NodesToDelete");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2093");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NodesToDelete");
        attrs.Type = ToNodeId("i=382");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2094");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2095");
        node.BrowseName = ToQualifiedName("AuditAddReferencesEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2090");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditAddReferencesEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2096");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2096");
        node.BrowseName = ToQualifiedName("ReferencesToAdd");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2095");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ReferencesToAdd");
        attrs.Type = ToNodeId("i=379");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2096");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2097");
        node.BrowseName = ToQualifiedName("AuditDeleteReferencesEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2090");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditDeleteReferencesEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2097");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2098");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2098");
        node.BrowseName = ToQualifiedName("ReferencesToDelete");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2097");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ReferencesToDelete");
        attrs.Type = ToNodeId("i=385");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2099");
        node.BrowseName = ToQualifiedName("AuditUpdateEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditUpdateEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2100");
        node.BrowseName = ToQualifiedName("AuditWriteUpdateEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2099");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditWriteUpdateEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2100");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2750");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2100");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2101");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2100");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2102");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2100");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2103");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2750");
        node.BrowseName = ToQualifiedName("AttributeId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2100");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AttributeId");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2750");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2101");
        node.BrowseName = ToQualifiedName("IndexRange");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2100");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("IndexRange");
        attrs.Type = ToNodeId("i=291");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2101");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2102");
        node.BrowseName = ToQualifiedName("OldValue");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2100");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OldValue");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2102");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2103");
        node.BrowseName = ToQualifiedName("NewValue");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2100");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NewValue");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2103");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2104");
        node.BrowseName = ToQualifiedName("AuditHistoryUpdateEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2099");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditHistoryUpdateEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2104");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2751");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2751");
        node.BrowseName = ToQualifiedName("ParameterDataTypeId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2104");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ParameterDataTypeId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2751");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2127");
        node.BrowseName = ToQualifiedName("AuditUpdateMethodEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditUpdateMethodEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2127");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2128");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2127");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2129");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2128");
        node.BrowseName = ToQualifiedName("MethodId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2127");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MethodId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2128");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2129");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2127");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2129");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2130");
        node.BrowseName = ToQualifiedName("SystemEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SystemEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2131");
        node.BrowseName = ToQualifiedName("DeviceFailureEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2130");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("DeviceFailureEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11446");
        node.BrowseName = ToQualifiedName("SystemStatusChangeEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2130");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SystemStatusChangeEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11446");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11696");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11696");
        node.BrowseName = ToQualifiedName("SystemState");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11446");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SystemState");
        attrs.Type = ToNodeId("i=852");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11696");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2132");
        node.BrowseName = ToQualifiedName("BaseModelChangeEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("BaseModelChangeEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2133");
        node.BrowseName = ToQualifiedName("GeneralModelChangeEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2132");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("GeneralModelChangeEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2133");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2134");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2134");
        node.BrowseName = ToQualifiedName("Changes");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2133");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Changes");
        attrs.Type = ToNodeId("i=877");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2134");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2738");
        node.BrowseName = ToQualifiedName("SemanticChangeEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2132");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SemanticChangeEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2738");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2739");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2739");
        node.BrowseName = ToQualifiedName("Changes");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2738");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Changes");
        attrs.Type = ToNodeId("i=897");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2739");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3035");
        node.BrowseName = ToQualifiedName("EventQueueOverflowEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("EventQueueOverflowEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11436");
        node.BrowseName = ToQualifiedName("ProgressEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ProgressEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2340");
        node.BrowseName = ToQualifiedName("AggregateFunctionType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AggregateFunctionType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2137");
        node.BrowseName = ToQualifiedName("ServerVendorCapabilityType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerVendorCapabilityType");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2138");
        node.BrowseName = ToQualifiedName("ServerStatusType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerStatusType");
        attrs.Type = ToNodeId("i=862");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2138");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2139");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2138");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2140");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2138");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2141");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2138");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2142");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2138");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2752");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2138");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2753");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2139");
        node.BrowseName = ToQualifiedName("StartTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StartTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2139");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2140");
        node.BrowseName = ToQualifiedName("CurrentTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2140");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2141");
        node.BrowseName = ToQualifiedName("State");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("State");
        attrs.Type = ToNodeId("i=852");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2141");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2142");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=3051");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.Type = ToNodeId("i=338");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3698");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3699");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3700");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3701");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3702");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3703");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3698");
        node.BrowseName = ToQualifiedName("ProductUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3698");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3699");
        node.BrowseName = ToQualifiedName("ManufacturerName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ManufacturerName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3699");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3700");
        node.BrowseName = ToQualifiedName("ProductName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3700");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3701");
        node.BrowseName = ToQualifiedName("SoftwareVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3701");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3702");
        node.BrowseName = ToQualifiedName("BuildNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildNumber");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3702");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3703");
        node.BrowseName = ToQualifiedName("BuildDate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildDate");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3703");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2752");
        node.BrowseName = ToQualifiedName("SecondsTillShutdown");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecondsTillShutdown");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2752");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2753");
        node.BrowseName = ToQualifiedName("ShutdownReason");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ShutdownReason");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2753");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3051");
        node.BrowseName = ToQualifiedName("BuildInfoType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfoType");
        attrs.Type = ToNodeId("i=338");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3051");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3052");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3051");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3053");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3051");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3054");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3051");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3055");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3051");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3056");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3051");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3057");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3052");
        node.BrowseName = ToQualifiedName("ProductUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3052");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3053");
        node.BrowseName = ToQualifiedName("ManufacturerName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ManufacturerName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3053");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3054");
        node.BrowseName = ToQualifiedName("ProductName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3054");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3055");
        node.BrowseName = ToQualifiedName("SoftwareVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3055");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3056");
        node.BrowseName = ToQualifiedName("BuildNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildNumber");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3056");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3057");
        node.BrowseName = ToQualifiedName("BuildDate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildDate");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3057");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2150");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummaryType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummaryType");
        attrs.Type = ToNodeId("i=859");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2151");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2152");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2153");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2154");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2155");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2156");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2157");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2159");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2160");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2161");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2162");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2163");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2151");
        node.BrowseName = ToQualifiedName("ServerViewCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerViewCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2151");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2152");
        node.BrowseName = ToQualifiedName("CurrentSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2152");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2153");
        node.BrowseName = ToQualifiedName("CumulatedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2153");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2154");
        node.BrowseName = ToQualifiedName("SecurityRejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2154");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2155");
        node.BrowseName = ToQualifiedName("RejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2155");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2156");
        node.BrowseName = ToQualifiedName("SessionTimeoutCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionTimeoutCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2156");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2157");
        node.BrowseName = ToQualifiedName("SessionAbortCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionAbortCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2157");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2159");
        node.BrowseName = ToQualifiedName("PublishingIntervalCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishingIntervalCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2159");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2160");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2160");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2161");
        node.BrowseName = ToQualifiedName("CumulatedSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2161");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2162");
        node.BrowseName = ToQualifiedName("SecurityRejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2162");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2163");
        node.BrowseName = ToQualifiedName("RejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2163");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2164");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsArrayType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsArrayType");
        attrs.Type = ToNodeId("i=856");
        attrs.Rank = 1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2165");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsType");
        attrs.Type = ToNodeId("i=856");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2165");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2166");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2165");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11697");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2165");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11698");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2165");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11699");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2166");
        node.BrowseName = ToQualifiedName("SamplingInterval");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2165");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingInterval");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2166");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11697");
        node.BrowseName = ToQualifiedName("SampledMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2165");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SampledMonitoredItemsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11697");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11698");
        node.BrowseName = ToQualifiedName("MaxSampledMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2165");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxSampledMonitoredItemsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11698");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11699");
        node.BrowseName = ToQualifiedName("DisabledMonitoredItemsSamplingCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2165");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DisabledMonitoredItemsSamplingCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11699");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2171");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsArrayType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsArrayType");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = 1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2172");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsType");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2173");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2174");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2175");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2176");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2177");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8888");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2179");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2180");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2181");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2182");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2183");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2184");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2185");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2186");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2187");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2188");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2189");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2190");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2191");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2998");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2193");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8889");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8890");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8891");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8892");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8893");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8894");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8895");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8896");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8897");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8902");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2173");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2173");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2174");
        node.BrowseName = ToQualifiedName("SubscriptionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionId");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2174");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2175");
        node.BrowseName = ToQualifiedName("Priority");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Priority");
        attrs.Type = ObjectId::Byte;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2175");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2176");
        node.BrowseName = ToQualifiedName("PublishingInterval");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishingInterval");
        attrs.Type = ObjectId::Double;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2176");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2177");
        node.BrowseName = ToQualifiedName("MaxKeepAliveCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxKeepAliveCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2177");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8888");
        node.BrowseName = ToQualifiedName("MaxLifetimeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxLifetimeCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8888");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2179");
        node.BrowseName = ToQualifiedName("MaxNotificationsPerPublish");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxNotificationsPerPublish");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2179");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2180");
        node.BrowseName = ToQualifiedName("PublishingEnabled");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishingEnabled");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2180");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2181");
        node.BrowseName = ToQualifiedName("ModifyCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifyCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2181");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2182");
        node.BrowseName = ToQualifiedName("EnableCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnableCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2182");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2183");
        node.BrowseName = ToQualifiedName("DisableCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DisableCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2183");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2184");
        node.BrowseName = ToQualifiedName("RepublishRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RepublishRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2184");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2185");
        node.BrowseName = ToQualifiedName("RepublishMessageRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RepublishMessageRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2185");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2186");
        node.BrowseName = ToQualifiedName("RepublishMessageCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RepublishMessageCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2186");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2187");
        node.BrowseName = ToQualifiedName("TransferRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransferRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2187");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2188");
        node.BrowseName = ToQualifiedName("TransferredToAltClientCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransferredToAltClientCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2188");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2189");
        node.BrowseName = ToQualifiedName("TransferredToSameClientCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransferredToSameClientCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2189");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2190");
        node.BrowseName = ToQualifiedName("PublishRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2190");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2191");
        node.BrowseName = ToQualifiedName("DataChangeNotificationsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DataChangeNotificationsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2191");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2998");
        node.BrowseName = ToQualifiedName("EventNotificationsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EventNotificationsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2998");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2193");
        node.BrowseName = ToQualifiedName("NotificationsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NotificationsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2193");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8889");
        node.BrowseName = ToQualifiedName("LatePublishRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LatePublishRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8889");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8890");
        node.BrowseName = ToQualifiedName("CurrentKeepAliveCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentKeepAliveCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8890");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8891");
        node.BrowseName = ToQualifiedName("CurrentLifetimeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentLifetimeCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8891");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8892");
        node.BrowseName = ToQualifiedName("UnacknowledgedMessageCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnacknowledgedMessageCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8892");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8893");
        node.BrowseName = ToQualifiedName("DiscardedMessageCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DiscardedMessageCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8893");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8894");
        node.BrowseName = ToQualifiedName("MonitoredItemCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MonitoredItemCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8894");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8895");
        node.BrowseName = ToQualifiedName("DisabledMonitoredItemCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DisabledMonitoredItemCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8895");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8896");
        node.BrowseName = ToQualifiedName("MonitoringQueueOverflowCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MonitoringQueueOverflowCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8896");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8897");
        node.BrowseName = ToQualifiedName("NextSequenceNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NextSequenceNumber");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8897");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8902");
        node.BrowseName = ToQualifiedName("EventQueueOverFlowCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EventQueueOverFlowCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8902");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2196");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsArrayType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionDiagnosticsArrayType");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = 1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2197");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionDiagnosticsVariableType");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2198");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2199");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2200");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2201");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2202");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2203");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2204");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3050");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2205");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2206");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2207");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2208");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2209");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8900");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11892");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2217");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2218");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2219");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2220");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2221");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2222");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2223");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2224");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2225");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2226");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2227");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2228");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2229");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2230");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2231");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2232");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2233");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2234");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2235");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2236");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2237");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2238");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2239");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2240");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2241");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2242");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2730");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2731");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2198");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2198");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2199");
        node.BrowseName = ToQualifiedName("SessionName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2199");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2200");
        node.BrowseName = ToQualifiedName("ClientDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientDescription");
        attrs.Type = ToNodeId("i=308");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2200");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2201");
        node.BrowseName = ToQualifiedName("ServerUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2201");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2202");
        node.BrowseName = ToQualifiedName("EndpointUrl");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrl");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2202");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2203");
        node.BrowseName = ToQualifiedName("LocaleIds");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LocaleIds");
        attrs.Type = ToNodeId("i=295");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2203");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2204");
        node.BrowseName = ToQualifiedName("ActualSessionTimeout");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ActualSessionTimeout");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2204");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3050");
        node.BrowseName = ToQualifiedName("MaxResponseMessageSize");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxResponseMessageSize");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3050");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2205");
        node.BrowseName = ToQualifiedName("ClientConnectionTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientConnectionTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2205");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2206");
        node.BrowseName = ToQualifiedName("ClientLastContactTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientLastContactTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2206");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2207");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2207");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2208");
        node.BrowseName = ToQualifiedName("CurrentMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentMonitoredItemsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2208");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2209");
        node.BrowseName = ToQualifiedName("CurrentPublishRequestsInQueue");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentPublishRequestsInQueue");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2209");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8900");
        node.BrowseName = ToQualifiedName("TotalRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TotalRequestCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8900");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11892");
        node.BrowseName = ToQualifiedName("UnauthorizedRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnauthorizedRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11892");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2217");
        node.BrowseName = ToQualifiedName("ReadCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ReadCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2217");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2218");
        node.BrowseName = ToQualifiedName("HistoryReadCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryReadCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2218");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2219");
        node.BrowseName = ToQualifiedName("WriteCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("WriteCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2219");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2220");
        node.BrowseName = ToQualifiedName("HistoryUpdateCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryUpdateCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2220");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2221");
        node.BrowseName = ToQualifiedName("CallCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CallCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2221");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2222");
        node.BrowseName = ToQualifiedName("CreateMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CreateMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2222");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2223");
        node.BrowseName = ToQualifiedName("ModifyMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifyMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2223");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2224");
        node.BrowseName = ToQualifiedName("SetMonitoringModeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetMonitoringModeCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2224");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2225");
        node.BrowseName = ToQualifiedName("SetTriggeringCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetTriggeringCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2225");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2226");
        node.BrowseName = ToQualifiedName("DeleteMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2226");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2227");
        node.BrowseName = ToQualifiedName("CreateSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CreateSubscriptionCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2227");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2228");
        node.BrowseName = ToQualifiedName("ModifySubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifySubscriptionCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2228");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2229");
        node.BrowseName = ToQualifiedName("SetPublishingModeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetPublishingModeCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2229");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2230");
        node.BrowseName = ToQualifiedName("PublishCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2230");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2231");
        node.BrowseName = ToQualifiedName("RepublishCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RepublishCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2231");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2232");
        node.BrowseName = ToQualifiedName("TransferSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransferSubscriptionsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2232");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2233");
        node.BrowseName = ToQualifiedName("DeleteSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteSubscriptionsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2233");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2234");
        node.BrowseName = ToQualifiedName("AddNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2234");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2235");
        node.BrowseName = ToQualifiedName("AddReferencesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddReferencesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2235");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2236");
        node.BrowseName = ToQualifiedName("DeleteNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2236");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2237");
        node.BrowseName = ToQualifiedName("DeleteReferencesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteReferencesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2237");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2238");
        node.BrowseName = ToQualifiedName("BrowseCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BrowseCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2238");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2239");
        node.BrowseName = ToQualifiedName("BrowseNextCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BrowseNextCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2239");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2240");
        node.BrowseName = ToQualifiedName("TranslateBrowsePathsToNodeIdsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TranslateBrowsePathsToNodeIdsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2240");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2241");
        node.BrowseName = ToQualifiedName("QueryFirstCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("QueryFirstCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2241");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2242");
        node.BrowseName = ToQualifiedName("QueryNextCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("QueryNextCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2242");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2730");
        node.BrowseName = ToQualifiedName("RegisterNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RegisterNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2730");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2731");
        node.BrowseName = ToQualifiedName("UnregisterNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnregisterNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2731");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2243");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsArrayType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsArrayType");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = 1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2244");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsType");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2245");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2246");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2247");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2248");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2249");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2250");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2251");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2252");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3058");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2245");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2245");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2246");
        node.BrowseName = ToQualifiedName("ClientUserIdOfSession");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientUserIdOfSession");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2246");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2247");
        node.BrowseName = ToQualifiedName("ClientUserIdHistory");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientUserIdHistory");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2247");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2248");
        node.BrowseName = ToQualifiedName("AuthenticationMechanism");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AuthenticationMechanism");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2248");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2249");
        node.BrowseName = ToQualifiedName("Encoding");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Encoding");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2249");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2250");
        node.BrowseName = ToQualifiedName("TransportProtocol");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransportProtocol");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2250");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2251");
        node.BrowseName = ToQualifiedName("SecurityMode");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityMode");
        attrs.Type = ToNodeId("i=302");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2251");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2252");
        node.BrowseName = ToQualifiedName("SecurityPolicyUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityPolicyUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3058");
        node.BrowseName = ToQualifiedName("ClientCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientCertificate");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3058");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11487");
        node.BrowseName = ToQualifiedName("OptionSetType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("OptionSetType");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11487");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11488");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11487");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11701");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11488");
        node.BrowseName = ToQualifiedName("OptionSetValues");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11487");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OptionSetValues");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11488");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11701");
        node.BrowseName = ToQualifiedName("BitMask");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11487");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BitMask");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11701");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3048");
        node.BrowseName = ToQualifiedName("EventTypes");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=86");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("EventTypes");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::Organizes;
        ref.SourceNodeId = ToNodeId("i=3048");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2041");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2253");
        node.BrowseName = ToQualifiedName("Server");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=85");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=2004");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Server");
        attrs.EventNotifier = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2254");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2255");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2256");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2267");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2994");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2268");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2274");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2295");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2296");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11715");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11492");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2254");
        node.BrowseName = ToQualifiedName("ServerArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The list of server URIs used by the server.");
        attrs.DisplayName = LocalizedText("ServerArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2255");
        node.BrowseName = ToQualifiedName("NamespaceArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The list of namespace URIs used by the server.");
        attrs.DisplayName = LocalizedText("NamespaceArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2256");
        node.BrowseName = ToQualifiedName("ServerStatus");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2138");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The current status of the server.");
        attrs.DisplayName = LocalizedText("ServerStatus");
        attrs.Type = ToNodeId("i=862");
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2256");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2257");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2256");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2258");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2256");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2259");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2256");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2260");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2256");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2992");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2256");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2993");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2257");
        node.BrowseName = ToQualifiedName("StartTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StartTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2258");
        node.BrowseName = ToQualifiedName("CurrentTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2259");
        node.BrowseName = ToQualifiedName("State");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("State");
        attrs.Type = ToNodeId("i=852");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2260");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=3051");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.Type = ToNodeId("i=338");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2260");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2262");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2260");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2263");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2260");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2261");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2260");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2264");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2260");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2265");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2260");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2266");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2262");
        node.BrowseName = ToQualifiedName("ProductUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2263");
        node.BrowseName = ToQualifiedName("ManufacturerName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ManufacturerName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2261");
        node.BrowseName = ToQualifiedName("ProductName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2264");
        node.BrowseName = ToQualifiedName("SoftwareVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2265");
        node.BrowseName = ToQualifiedName("BuildNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildNumber");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2266");
        node.BrowseName = ToQualifiedName("BuildDate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildDate");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2992");
        node.BrowseName = ToQualifiedName("SecondsTillShutdown");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecondsTillShutdown");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2993");
        node.BrowseName = ToQualifiedName("ShutdownReason");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ShutdownReason");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2267");
        node.BrowseName = ToQualifiedName("ServiceLevel");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A value indicating the level of service the server can provide. 255 indicates the best.");
        attrs.DisplayName = LocalizedText("ServiceLevel");
        attrs.Type = ObjectId::Byte;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2994");
        node.BrowseName = ToQualifiedName("Auditing");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A flag indicating whether the server is currently generating audit events.");
        attrs.DisplayName = LocalizedText("Auditing");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2268");
        node.BrowseName = ToQualifiedName("ServerCapabilities");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2013");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Describes capabilities supported by the server.");
        attrs.DisplayName = LocalizedText("ServerCapabilities");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2269");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2271");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2272");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2735");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2736");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2737");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3704");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11702");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11703");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11704");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2996");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2997");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2269");
        node.BrowseName = ToQualifiedName("ServerProfileArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of profiles supported by the server.");
        attrs.DisplayName = LocalizedText("ServerProfileArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2271");
        node.BrowseName = ToQualifiedName("LocaleIdArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of locales supported by the server.");
        attrs.DisplayName = LocalizedText("LocaleIdArray");
        attrs.Type = ToNodeId("i=295");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2272");
        node.BrowseName = ToQualifiedName("MinSupportedSampleRate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The minimum sampling interval supported by the server.");
        attrs.DisplayName = LocalizedText("MinSupportedSampleRate");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2735");
        node.BrowseName = ToQualifiedName("MaxBrowseContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for Browse operations per session.");
        attrs.DisplayName = LocalizedText("MaxBrowseContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2736");
        node.BrowseName = ToQualifiedName("MaxQueryContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for Query operations per session.");
        attrs.DisplayName = LocalizedText("MaxQueryContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2737");
        node.BrowseName = ToQualifiedName("MaxHistoryContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for ReadHistory operations per session.");
        attrs.DisplayName = LocalizedText("MaxHistoryContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3704");
        node.BrowseName = ToQualifiedName("SoftwareCertificates");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The software certificates owned by the server.");
        attrs.DisplayName = LocalizedText("SoftwareCertificates");
        attrs.Type = ToNodeId("i=344");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11702");
        node.BrowseName = ToQualifiedName("MaxArrayLength");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum length for an array value supported by the server.");
        attrs.DisplayName = LocalizedText("MaxArrayLength");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11703");
        node.BrowseName = ToQualifiedName("MaxStringLength");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum length for a string value supported by the server.");
        attrs.DisplayName = LocalizedText("MaxStringLength");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11704");
        node.BrowseName = ToQualifiedName("OperationLimits");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=11564");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Defines the limits supported by the server for different operations.");
        attrs.DisplayName = LocalizedText("OperationLimits");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11705");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12165");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12166");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11707");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12167");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12168");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11709");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11710");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11711");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11712");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11713");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11714");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11705");
        node.BrowseName = ToQualifiedName("MaxNodesPerRead");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Read request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerRead");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12165");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryReadData");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single data HistoryRead request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryReadData");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12166");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryReadEvents");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single event HistoryRead request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryReadEvents");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11707");
        node.BrowseName = ToQualifiedName("MaxNodesPerWrite");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Write request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerWrite");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12167");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryUpdateData");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single data HistoryUpdate request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryUpdateData");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12168");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryUpdateEvents");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single event HistoryUpdate request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryUpdateEvents");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11709");
        node.BrowseName = ToQualifiedName("MaxNodesPerMethodCall");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Call request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerMethodCall");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11710");
        node.BrowseName = ToQualifiedName("MaxNodesPerBrowse");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Browse request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerBrowse");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11711");
        node.BrowseName = ToQualifiedName("MaxNodesPerRegisterNodes");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single RegisterNodes request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerRegisterNodes");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11712");
        node.BrowseName = ToQualifiedName("MaxNodesPerTranslateBrowsePathsToNodeIds");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single TranslateBrowsePathsToNodeIds request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerTranslateBrowsePathsToNodeIds");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11713");
        node.BrowseName = ToQualifiedName("MaxNodesPerNodeManagement");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single AddNodes, AddReferences, DeleteNodes or DeleteReferences request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerNodeManagement");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11714");
        node.BrowseName = ToQualifiedName("MaxMonitoredItemsPerCall");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single MonitoredItem related request.");
        attrs.DisplayName = LocalizedText("MaxMonitoredItemsPerCall");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2996");
        node.BrowseName = ToQualifiedName("ModellingRules");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A folder for the modelling rules supported by the server.");
        attrs.DisplayName = LocalizedText("ModellingRules");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2997");
        node.BrowseName = ToQualifiedName("AggregateFunctions");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A folder for the real time aggregates supported by the server.");
        attrs.DisplayName = LocalizedText("AggregateFunctions");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2274");
        node.BrowseName = ToQualifiedName("ServerDiagnostics");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2020");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Reports diagnostics about the server.");
        attrs.DisplayName = LocalizedText("ServerDiagnostics");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2274");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2275");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2274");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2289");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2274");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2290");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2274");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3706");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2274");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2294");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2275");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummary");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2274");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2150");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A summary of server level diagnostics.");
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummary");
        attrs.Type = ToNodeId("i=859");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2276");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2277");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2278");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2279");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3705");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2281");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2282");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2284");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2285");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2286");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2287");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2288");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2276");
        node.BrowseName = ToQualifiedName("ServerViewCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerViewCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2277");
        node.BrowseName = ToQualifiedName("CurrentSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2278");
        node.BrowseName = ToQualifiedName("CumulatedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2279");
        node.BrowseName = ToQualifiedName("SecurityRejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3705");
        node.BrowseName = ToQualifiedName("RejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2281");
        node.BrowseName = ToQualifiedName("SessionTimeoutCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionTimeoutCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2282");
        node.BrowseName = ToQualifiedName("SessionAbortCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionAbortCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2284");
        node.BrowseName = ToQualifiedName("PublishingIntervalCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishingIntervalCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2285");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2286");
        node.BrowseName = ToQualifiedName("CumulatedSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2287");
        node.BrowseName = ToQualifiedName("SecurityRejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2288");
        node.BrowseName = ToQualifiedName("RejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2289");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2274");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2164");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each sampling interval supported by the server.");
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsArray");
        attrs.Type = ToNodeId("i=856");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2290");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2274");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2171");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each active subscription.");
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsArray");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3706");
        node.BrowseName = ToQualifiedName("SessionsDiagnosticsSummary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2274");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2026");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A summary of session level diagnostics.");
        attrs.DisplayName = LocalizedText("SessionsDiagnosticsSummary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3706");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3707");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3706");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3708");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3707");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3706");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2196");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionDiagnosticsArray");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3708");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3706");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2243");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of security related diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsArray");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2294");
        node.BrowseName = ToQualifiedName("EnabledFlag");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2274");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("If TRUE the diagnostics collection is enabled.");
        attrs.DisplayName = LocalizedText("EnabledFlag");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        attrs.AccessLevel = (VariableAccessLevel) 3;
        attrs.UserAccessLevel = (VariableAccessLevel) 3;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2295");
        node.BrowseName = ToQualifiedName("VendorServerInfo");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2033");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Server information provided by the vendor.");
        attrs.DisplayName = LocalizedText("VendorServerInfo");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2296");
        node.BrowseName = ToQualifiedName("ServerRedundancy");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2034");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Describes the redundancy capabilities of the server.");
        attrs.DisplayName = LocalizedText("ServerRedundancy");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2296");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3709");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2296");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11312");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2296");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11313");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2296");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11314");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3709");
        node.BrowseName = ToQualifiedName("RedundancySupport");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2296");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Indicates what style of redundancy is supported by the server.");
        attrs.DisplayName = LocalizedText("RedundancySupport");
        attrs.Type = ToNodeId("i=851");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11312");
        node.BrowseName = ToQualifiedName("CurrentServerId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2296");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentServerId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11313");
        node.BrowseName = ToQualifiedName("RedundantServerArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2296");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RedundantServerArray");
        attrs.Type = ToNodeId("i=853");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11314");
        node.BrowseName = ToQualifiedName("ServerUriArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2296");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerUriArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11715");
        node.BrowseName = ToQualifiedName("Namespaces");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=11645");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Describes the namespaces supported by the server.");
        attrs.DisplayName = LocalizedText("Namespaces");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11493");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11492");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11494");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11492");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11737");
        node.BrowseName = ToQualifiedName("BitFieldMaskDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=9");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("b'A mask of 32 bits that can be updated individually by using the top 32 bits as a mask.'");
        attrs.DisplayName = LocalizedText("BitFieldMaskDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2299");
        node.BrowseName = ToQualifiedName("StateMachineType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("StateMachineType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2299");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2769");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2299");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2770");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2769");
        node.BrowseName = ToQualifiedName("CurrentState");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2299");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2755");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentState");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2769");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3720");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2769");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3720");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2769");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3720");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2770");
        node.BrowseName = ToQualifiedName("LastTransition");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2299");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2762");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LastTransition");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2770");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3724");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2770");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3724");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2770");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3724");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2755");
        node.BrowseName = ToQualifiedName("StateVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("StateVariableType");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2755");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2756");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2755");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2757");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2755");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2758");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2755");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2759");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2756");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2755");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2756");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2757");
        node.BrowseName = ToQualifiedName("Name");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2755");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Name");
        attrs.Type = ObjectId::QualifiedName;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2757");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2758");
        node.BrowseName = ToQualifiedName("Number");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2755");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Number");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2758");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2759");
        node.BrowseName = ToQualifiedName("EffectiveDisplayName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2755");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EffectiveDisplayName");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2759");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2762");
        node.BrowseName = ToQualifiedName("TransitionVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("TransitionVariableType");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2762");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2763");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2762");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2764");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2762");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2765");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2762");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2766");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2762");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11456");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2763");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2763");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2764");
        node.BrowseName = ToQualifiedName("Name");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Name");
        attrs.Type = ObjectId::QualifiedName;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2764");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2765");
        node.BrowseName = ToQualifiedName("Number");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Number");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2765");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2766");
        node.BrowseName = ToQualifiedName("TransitionTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransitionTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2766");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11456");
        node.BrowseName = ToQualifiedName("EffectiveTransitionTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EffectiveTransitionTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11456");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2771");
        node.BrowseName = ToQualifiedName("FiniteStateMachineType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2299");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("FiniteStateMachineType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2771");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2772");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2771");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2773");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2772");
        node.BrowseName = ToQualifiedName("CurrentState");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2771");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2760");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentState");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2772");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3728");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2772");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3728");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2772");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3728");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2773");
        node.BrowseName = ToQualifiedName("LastTransition");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2771");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2767");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LastTransition");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2773");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3732");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2773");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3732");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2773");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3732");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2760");
        node.BrowseName = ToQualifiedName("FiniteStateVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=2755");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("FiniteStateVariableType");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2760");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2761");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2761");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2760");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2761");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2767");
        node.BrowseName = ToQualifiedName("FiniteTransitionVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("FiniteTransitionVariableType");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2767");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2768");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2768");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2767");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2768");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2307");
        node.BrowseName = ToQualifiedName("StateType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("StateType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2307");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2308");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2308");
        node.BrowseName = ToQualifiedName("StateNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2307");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StateNumber");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2308");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2309");
        node.BrowseName = ToQualifiedName("InitialStateType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2307");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("InitialStateType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2310");
        node.BrowseName = ToQualifiedName("TransitionType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("TransitionType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2310");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2312");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2312");
        node.BrowseName = ToQualifiedName("TransitionNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2310");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransitionNumber");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2312");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2311");
        node.BrowseName = ToQualifiedName("TransitionEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("TransitionEventType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2311");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2774");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2311");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2775");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2311");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2776");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2774");
        node.BrowseName = ToQualifiedName("Transition");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2311");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2762");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Transition");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2774");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3754");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2774");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3754");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2774");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3754");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2775");
        node.BrowseName = ToQualifiedName("FromState");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2311");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2755");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("FromState");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2775");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3746");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2775");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3746");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2775");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3746");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2776");
        node.BrowseName = ToQualifiedName("ToState");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2311");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2755");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ToState");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2776");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3750");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2776");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3750");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2776");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3750");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2315");
        node.BrowseName = ToQualifiedName("AuditUpdateStateEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2127");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditUpdateStateEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2315");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2777");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2315");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2778");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2777");
        node.BrowseName = ToQualifiedName("OldStateId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2315");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OldStateId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2777");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2778");
        node.BrowseName = ToQualifiedName("NewStateId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2315");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NewStateId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2778");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=338");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=851");
        node.BrowseName = ToQualifiedName("RedundancySupport");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=29");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("RedundancySupport");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=851");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7611");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7611");
        node.BrowseName = ToQualifiedName("EnumStrings");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=851");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumStrings");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=7611");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=852");
        node.BrowseName = ToQualifiedName("ServerState");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=29");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerState");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=852");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7612");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7612");
        node.BrowseName = ToQualifiedName("EnumStrings");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=852");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumStrings");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=7612");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=853");
        node.BrowseName = ToQualifiedName("RedundantServerDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("RedundantServerDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11943");
        node.BrowseName = ToQualifiedName("EndpointUrlListDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrlListDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11944");
        node.BrowseName = ToQualifiedName("NetworkGroupDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("NetworkGroupDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=856");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=859");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummaryDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummaryDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=862");
        node.BrowseName = ToQualifiedName("ServerStatusDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerStatusDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=865");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionDiagnosticsDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=868");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=871");
        node.BrowseName = ToQualifiedName("ServiceCounterDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServiceCounterDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=299");
        node.BrowseName = ToQualifiedName("StatusResult");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("StatusResult");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=874");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=877");
        node.BrowseName = ToQualifiedName("ModelChangeStructureDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ModelChangeStructureDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=897");
        node.BrowseName = ToQualifiedName("SemanticChangeStructureDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SemanticChangeStructureDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=339");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=338");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=339");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8327");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=854");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=853");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=854");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8843");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11949");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11943");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=11949");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11951");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11950");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11944");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=11950");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11954");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=857");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=856");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=857");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8846");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=860");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=859");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=860");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8849");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=863");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=862");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=863");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8852");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=866");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=865");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=866");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8855");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=869");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=868");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=869");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8858");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=872");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=871");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=872");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8861");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=300");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=299");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=300");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8294");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=875");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=874");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=875");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8864");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=878");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=877");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=878");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8867");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=898");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=897");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=898");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8870");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8252");
        node.BrowseName = ToQualifiedName("Opc.Ua");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=92");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=72");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Opc.Ua");
        attrs.Type = ObjectId::ByteString;
        attrs.Value = +"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8254");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8285");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8291");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8918");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8300");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8297");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8303");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8417");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8333");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8306");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8309");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8312");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8315");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8318");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8363");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8366");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8369");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8372");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8321");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8324");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8330");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8564");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8567");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8570");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8573");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8576");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8579");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8582");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8639");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8702");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8708");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8711");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8807");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8384");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8387");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8390");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8327");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8843");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11951");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11954");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8846");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8849");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8852");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8855");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8858");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8861");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8294");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8864");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8867");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8870");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8873");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8876");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12175");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12178");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12083");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12086");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8882");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8879");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8254");
        node.BrowseName = ToQualifiedName("NamespaceUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A URI that uniquely identifies the dictionary.");
        attrs.DisplayName = LocalizedText("NamespaceUri");
        attrs.Type = ObjectId::String;
        attrs.Value = +"http://opcfoundation.org/UA/2008/02/Types.xsd";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8285");
        node.BrowseName = ToQualifiedName("Argument");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Argument");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='Argument']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8291");
        node.BrowseName = ToQualifiedName("EnumValueType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumValueType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='EnumValueType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8918");
        node.BrowseName = ToQualifiedName("TimeZoneDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TimeZoneDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='TimeZoneDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8300");
        node.BrowseName = ToQualifiedName("ApplicationDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ApplicationDescription");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ApplicationDescription']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8297");
        node.BrowseName = ToQualifiedName("UserTokenPolicy");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserTokenPolicy");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='UserTokenPolicy']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8303");
        node.BrowseName = ToQualifiedName("EndpointDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointDescription");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='EndpointDescription']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8417");
        node.BrowseName = ToQualifiedName("RegisteredServer");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RegisteredServer");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='RegisteredServer']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8333");
        node.BrowseName = ToQualifiedName("SignedSoftwareCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SignedSoftwareCertificate");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SignedSoftwareCertificate']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8306");
        node.BrowseName = ToQualifiedName("UserIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='UserIdentityToken']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8309");
        node.BrowseName = ToQualifiedName("AnonymousIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AnonymousIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='AnonymousIdentityToken']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8312");
        node.BrowseName = ToQualifiedName("UserNameIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserNameIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='UserNameIdentityToken']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8315");
        node.BrowseName = ToQualifiedName("X509IdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("X509IdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='X509IdentityToken']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8318");
        node.BrowseName = ToQualifiedName("IssuedIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("IssuedIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='IssuedIdentityToken']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8363");
        node.BrowseName = ToQualifiedName("AddNodesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddNodesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='AddNodesItem']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8366");
        node.BrowseName = ToQualifiedName("AddReferencesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddReferencesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='AddReferencesItem']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8369");
        node.BrowseName = ToQualifiedName("DeleteNodesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteNodesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='DeleteNodesItem']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8372");
        node.BrowseName = ToQualifiedName("DeleteReferencesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteReferencesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='DeleteReferencesItem']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8321");
        node.BrowseName = ToQualifiedName("EndpointConfiguration");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointConfiguration");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='EndpointConfiguration']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8324");
        node.BrowseName = ToQualifiedName("SupportedProfile");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SupportedProfile");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SupportedProfile']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8330");
        node.BrowseName = ToQualifiedName("SoftwareCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareCertificate");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SoftwareCertificate']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8564");
        node.BrowseName = ToQualifiedName("ContentFilterElement");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ContentFilterElement");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ContentFilterElement']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8567");
        node.BrowseName = ToQualifiedName("ContentFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ContentFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ContentFilter']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8570");
        node.BrowseName = ToQualifiedName("FilterOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("FilterOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='FilterOperand']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8573");
        node.BrowseName = ToQualifiedName("ElementOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ElementOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ElementOperand']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8576");
        node.BrowseName = ToQualifiedName("LiteralOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LiteralOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='LiteralOperand']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8579");
        node.BrowseName = ToQualifiedName("AttributeOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AttributeOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='AttributeOperand']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8582");
        node.BrowseName = ToQualifiedName("SimpleAttributeOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SimpleAttributeOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SimpleAttributeOperand']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8639");
        node.BrowseName = ToQualifiedName("HistoryEvent");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryEvent");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='HistoryEvent']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8702");
        node.BrowseName = ToQualifiedName("MonitoringFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MonitoringFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='MonitoringFilter']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8708");
        node.BrowseName = ToQualifiedName("EventFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EventFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='EventFilter']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8711");
        node.BrowseName = ToQualifiedName("AggregateConfiguration");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AggregateConfiguration");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='AggregateConfiguration']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8807");
        node.BrowseName = ToQualifiedName("HistoryEventFieldList");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryEventFieldList");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='HistoryEventFieldList']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8384");
        node.BrowseName = ToQualifiedName("ScalarTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ScalarTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ScalarTestType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8387");
        node.BrowseName = ToQualifiedName("ArrayTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ArrayTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ArrayTestType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8390");
        node.BrowseName = ToQualifiedName("CompositeTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CompositeTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='CompositeTestType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8327");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='BuildInfo']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8843");
        node.BrowseName = ToQualifiedName("RedundantServerDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RedundantServerDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='RedundantServerDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11951");
        node.BrowseName = ToQualifiedName("EndpointUrlListDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrlListDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='EndpointUrlListDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11954");
        node.BrowseName = ToQualifiedName("NetworkGroupDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NetworkGroupDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='NetworkGroupDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8846");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SamplingIntervalDiagnosticsDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8849");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummaryDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummaryDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ServerDiagnosticsSummaryDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8852");
        node.BrowseName = ToQualifiedName("ServerStatusDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerStatusDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ServerStatusDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8855");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SessionDiagnosticsDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8858");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SessionSecurityDiagnosticsDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8861");
        node.BrowseName = ToQualifiedName("ServiceCounterDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServiceCounterDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ServiceCounterDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8294");
        node.BrowseName = ToQualifiedName("StatusResult");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StatusResult");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='StatusResult']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8864");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SubscriptionDiagnosticsDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8867");
        node.BrowseName = ToQualifiedName("ModelChangeStructureDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModelChangeStructureDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ModelChangeStructureDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8870");
        node.BrowseName = ToQualifiedName("SemanticChangeStructureDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SemanticChangeStructureDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='SemanticChangeStructureDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8873");
        node.BrowseName = ToQualifiedName("Range");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Range");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='Range']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8876");
        node.BrowseName = ToQualifiedName("EUInformation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EUInformation");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='EUInformation']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12175");
        node.BrowseName = ToQualifiedName("ComplexNumberType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ComplexNumberType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ComplexNumberType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12178");
        node.BrowseName = ToQualifiedName("DoubleComplexNumberType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DoubleComplexNumberType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='DoubleComplexNumberType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12083");
        node.BrowseName = ToQualifiedName("AxisInformation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AxisInformation");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='AxisInformation']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12086");
        node.BrowseName = ToQualifiedName("XVType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("XVType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='XVType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8882");
        node.BrowseName = ToQualifiedName("ProgramDiagnosticDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProgramDiagnosticDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='ProgramDiagnosticDataType']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8879");
        node.BrowseName = ToQualifiedName("Annotation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Annotation");
        attrs.Type = ObjectId::String;
        attrs.Value = +"//xs:element[@name='Annotation']";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=340");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=338");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=340");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7692");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=855");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=853");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=855");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8208");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11957");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11943");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=11957");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11959");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11958");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11944");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=11958");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11962");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=858");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=856");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=858");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8211");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=861");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=859");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=861");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8214");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=864");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=862");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=864");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8217");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=867");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=865");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=867");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8220");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=870");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=868");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=870");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8223");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=873");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=871");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=873");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8226");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=301");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=299");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=301");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7659");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=876");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=874");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=876");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8229");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=879");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=877");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=879");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8232");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=899");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=897");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=899");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8235");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7617");
        node.BrowseName = ToQualifiedName("Opc.Ua");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=93");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=72");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Opc.Ua");
        attrs.Type = ObjectId::ByteString;
        attrs.Value = +"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7619");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7650");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7656");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8914");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7665");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7662");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7668");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7782");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7698");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7671");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7674");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7677");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7680");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7683");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7728");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7731");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7734");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7737");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7686");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7689");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7695");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7929");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7932");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7935");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7938");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7941");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7944");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7947");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8004");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8067");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8073");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8076");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8172");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7749");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7752");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7755");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7692");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8208");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11959");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11962");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8211");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8214");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8217");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8220");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8223");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8226");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7659");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8229");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8232");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8235");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8238");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8241");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12183");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12186");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12091");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12094");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8247");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8244");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7619");
        node.BrowseName = ToQualifiedName("NamespaceUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A URI that uniquely identifies the dictionary.");
        attrs.DisplayName = LocalizedText("NamespaceUri");
        attrs.Type = ObjectId::String;
        attrs.Value = +"http://opcfoundation.org/UA/";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7650");
        node.BrowseName = ToQualifiedName("Argument");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Argument");
        attrs.Type = ObjectId::String;
        attrs.Value = +"Argument";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7656");
        node.BrowseName = ToQualifiedName("EnumValueType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumValueType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"EnumValueType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8914");
        node.BrowseName = ToQualifiedName("TimeZoneDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TimeZoneDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"TimeZoneDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7665");
        node.BrowseName = ToQualifiedName("ApplicationDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ApplicationDescription");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ApplicationDescription";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7662");
        node.BrowseName = ToQualifiedName("UserTokenPolicy");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserTokenPolicy");
        attrs.Type = ObjectId::String;
        attrs.Value = +"UserTokenPolicy";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7668");
        node.BrowseName = ToQualifiedName("EndpointDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointDescription");
        attrs.Type = ObjectId::String;
        attrs.Value = +"EndpointDescription";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7782");
        node.BrowseName = ToQualifiedName("RegisteredServer");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RegisteredServer");
        attrs.Type = ObjectId::String;
        attrs.Value = +"RegisteredServer";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7698");
        node.BrowseName = ToQualifiedName("SignedSoftwareCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SignedSoftwareCertificate");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SignedSoftwareCertificate";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7671");
        node.BrowseName = ToQualifiedName("UserIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"UserIdentityToken";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7674");
        node.BrowseName = ToQualifiedName("AnonymousIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AnonymousIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"AnonymousIdentityToken";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7677");
        node.BrowseName = ToQualifiedName("UserNameIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserNameIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"UserNameIdentityToken";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7680");
        node.BrowseName = ToQualifiedName("X509IdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("X509IdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"X509IdentityToken";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7683");
        node.BrowseName = ToQualifiedName("IssuedIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("IssuedIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +"IssuedIdentityToken";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7728");
        node.BrowseName = ToQualifiedName("AddNodesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddNodesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +"AddNodesItem";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7731");
        node.BrowseName = ToQualifiedName("AddReferencesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddReferencesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +"AddReferencesItem";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7734");
        node.BrowseName = ToQualifiedName("DeleteNodesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteNodesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +"DeleteNodesItem";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7737");
        node.BrowseName = ToQualifiedName("DeleteReferencesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteReferencesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +"DeleteReferencesItem";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7686");
        node.BrowseName = ToQualifiedName("EndpointConfiguration");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointConfiguration");
        attrs.Type = ObjectId::String;
        attrs.Value = +"EndpointConfiguration";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7689");
        node.BrowseName = ToQualifiedName("SupportedProfile");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SupportedProfile");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SupportedProfile";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7695");
        node.BrowseName = ToQualifiedName("SoftwareCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareCertificate");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SoftwareCertificate";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7929");
        node.BrowseName = ToQualifiedName("ContentFilterElement");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ContentFilterElement");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ContentFilterElement";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7932");
        node.BrowseName = ToQualifiedName("ContentFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ContentFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ContentFilter";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7935");
        node.BrowseName = ToQualifiedName("FilterOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("FilterOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"FilterOperand";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7938");
        node.BrowseName = ToQualifiedName("ElementOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ElementOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ElementOperand";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7941");
        node.BrowseName = ToQualifiedName("LiteralOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LiteralOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"LiteralOperand";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7944");
        node.BrowseName = ToQualifiedName("AttributeOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AttributeOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"AttributeOperand";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7947");
        node.BrowseName = ToQualifiedName("SimpleAttributeOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SimpleAttributeOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SimpleAttributeOperand";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8004");
        node.BrowseName = ToQualifiedName("HistoryEvent");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryEvent");
        attrs.Type = ObjectId::String;
        attrs.Value = +"HistoryEvent";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8067");
        node.BrowseName = ToQualifiedName("MonitoringFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MonitoringFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +"MonitoringFilter";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8073");
        node.BrowseName = ToQualifiedName("EventFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EventFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +"EventFilter";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8076");
        node.BrowseName = ToQualifiedName("AggregateConfiguration");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AggregateConfiguration");
        attrs.Type = ObjectId::String;
        attrs.Value = +"AggregateConfiguration";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8172");
        node.BrowseName = ToQualifiedName("HistoryEventFieldList");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryEventFieldList");
        attrs.Type = ObjectId::String;
        attrs.Value = +"HistoryEventFieldList";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7749");
        node.BrowseName = ToQualifiedName("ScalarTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ScalarTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ScalarTestType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7752");
        node.BrowseName = ToQualifiedName("ArrayTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ArrayTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ArrayTestType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7755");
        node.BrowseName = ToQualifiedName("CompositeTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CompositeTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"CompositeTestType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7692");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.Type = ObjectId::String;
        attrs.Value = +"BuildInfo";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8208");
        node.BrowseName = ToQualifiedName("RedundantServerDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RedundantServerDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"RedundantServerDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11959");
        node.BrowseName = ToQualifiedName("EndpointUrlListDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrlListDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"EndpointUrlListDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11962");
        node.BrowseName = ToQualifiedName("NetworkGroupDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NetworkGroupDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"NetworkGroupDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8211");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SamplingIntervalDiagnosticsDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8214");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummaryDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummaryDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ServerDiagnosticsSummaryDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8217");
        node.BrowseName = ToQualifiedName("ServerStatusDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerStatusDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ServerStatusDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8220");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SessionDiagnosticsDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8223");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SessionSecurityDiagnosticsDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8226");
        node.BrowseName = ToQualifiedName("ServiceCounterDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServiceCounterDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ServiceCounterDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7659");
        node.BrowseName = ToQualifiedName("StatusResult");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StatusResult");
        attrs.Type = ObjectId::String;
        attrs.Value = +"StatusResult";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8229");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SubscriptionDiagnosticsDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8232");
        node.BrowseName = ToQualifiedName("ModelChangeStructureDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModelChangeStructureDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ModelChangeStructureDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8235");
        node.BrowseName = ToQualifiedName("SemanticChangeStructureDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SemanticChangeStructureDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"SemanticChangeStructureDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8238");
        node.BrowseName = ToQualifiedName("Range");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Range");
        attrs.Type = ObjectId::String;
        attrs.Value = +"Range";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8241");
        node.BrowseName = ToQualifiedName("EUInformation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EUInformation");
        attrs.Type = ObjectId::String;
        attrs.Value = +"EUInformation";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12183");
        node.BrowseName = ToQualifiedName("ComplexNumberType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ComplexNumberType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ComplexNumberType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12186");
        node.BrowseName = ToQualifiedName("DoubleComplexNumberType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DoubleComplexNumberType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"DoubleComplexNumberType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12091");
        node.BrowseName = ToQualifiedName("AxisInformation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AxisInformation");
        attrs.Type = ObjectId::String;
        attrs.Value = +"AxisInformation";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12094");
        node.BrowseName = ToQualifiedName("XVType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("XVType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"XVType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8247");
        node.BrowseName = ToQualifiedName("ProgramDiagnosticDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProgramDiagnosticDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +"ProgramDiagnosticDataType";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8244");
        node.BrowseName = ToQualifiedName("Annotation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Annotation");
        attrs.Type = ObjectId::String;
        attrs.Value = +"Annotation";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }

   }

} // namespace
    
