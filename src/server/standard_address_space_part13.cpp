
// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

#include "standard_address_space_parts.h"
#include <opc/ua/protocol/string_utils.h>
#include <opc/common/addons_core/addon.h>
#include <opc/ua/protocol/strings.h>
#include <opc/ua/protocol/variable_access_level.h>
#include <opc/ua/services/node_management.h>

#include <algorithm>
#include <iostream>
#include <map>

namespace OpcUa
{

static void create_11187(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11187");
  node.BrowseName = ToQualifiedName("AggregateConfigurationType");
  node.Class = NodeClass::ObjectType;
  node.ParentNodeId = ToNodeId("i=58");
  node.ReferenceTypeId = ReferenceId::HasSubtype;
  ObjectTypeAttributes attrs;
  attrs.DisplayName = LocalizedText("AggregateConfigurationType");
  attrs.IsAbstract = false;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
  std::vector<AddReferencesItem> refs;
  {
    AddReferencesItem ref;
    ref.IsForward = true;
    ref.ReferenceTypeId = ReferenceId::HasProperty;
    ref.SourceNodeId = ToNodeId("i=11187");
    ref.TargetNodeClass = NodeClass::DataType;
    ref.TargetNodeId = ToNodeId("i=11188");
    refs.push_back(ref);
  }
  {
    AddReferencesItem ref;
    ref.IsForward = true;
    ref.ReferenceTypeId = ReferenceId::HasProperty;
    ref.SourceNodeId = ToNodeId("i=11187");
    ref.TargetNodeClass = NodeClass::DataType;
    ref.TargetNodeId = ToNodeId("i=11189");
    refs.push_back(ref);
  }
  {
    AddReferencesItem ref;
    ref.IsForward = true;
    ref.ReferenceTypeId = ReferenceId::HasProperty;
    ref.SourceNodeId = ToNodeId("i=11187");
    ref.TargetNodeClass = NodeClass::DataType;
    ref.TargetNodeId = ToNodeId("i=11190");
    refs.push_back(ref);
  }
  {
    AddReferencesItem ref;
    ref.IsForward = true;
    ref.ReferenceTypeId = ReferenceId::HasProperty;
    ref.SourceNodeId = ToNodeId("i=11187");
    ref.TargetNodeClass = NodeClass::DataType;
    ref.TargetNodeId = ToNodeId("i=11191");
    refs.push_back(ref);
  }
  registry.AddReferences(refs);
}

static void create_11188(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11188");
  node.BrowseName = ToQualifiedName("TreatUncertainAsBad");
  node.Class = NodeClass::Variable;
  node.ParentNodeId = ToNodeId("i=11187");
  node.ReferenceTypeId = ReferenceId::HasProperty;
  node.TypeDefinition = ToNodeId("i=68");
  VariableAttributes attrs;
  attrs.DisplayName = LocalizedText("TreatUncertainAsBad");
  attrs.Type = ObjectId::Boolean;
  attrs.Rank = -1;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
  std::vector<AddReferencesItem> refs;
  {
    AddReferencesItem ref;
    ref.IsForward = true;
    ref.ReferenceTypeId = ReferenceId::HasModellingRule;
    ref.SourceNodeId = ToNodeId("i=11188");
    ref.TargetNodeClass = NodeClass::DataType;
    ref.TargetNodeId = ToNodeId("i=78");
    refs.push_back(ref);
  }
  registry.AddReferences(refs);
}

static void create_11189(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11189");
  node.BrowseName = ToQualifiedName("PercentDataBad");
  node.Class = NodeClass::Variable;
  node.ParentNodeId = ToNodeId("i=11187");
  node.ReferenceTypeId = ReferenceId::HasProperty;
  node.TypeDefinition = ToNodeId("i=68");
  VariableAttributes attrs;
  attrs.DisplayName = LocalizedText("PercentDataBad");
  attrs.Type = ObjectId::Byte;
  attrs.Rank = -1;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
  std::vector<AddReferencesItem> refs;
  {
    AddReferencesItem ref;
    ref.IsForward = true;
    ref.ReferenceTypeId = ReferenceId::HasModellingRule;
    ref.SourceNodeId = ToNodeId("i=11189");
    ref.TargetNodeClass = NodeClass::DataType;
    ref.TargetNodeId = ToNodeId("i=78");
    refs.push_back(ref);
  }
  registry.AddReferences(refs);
}

static void create_11190(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11190");
  node.BrowseName = ToQualifiedName("PercentDataGood");
  node.Class = NodeClass::Variable;
  node.ParentNodeId = ToNodeId("i=11187");
  node.ReferenceTypeId = ReferenceId::HasProperty;
  node.TypeDefinition = ToNodeId("i=68");
  VariableAttributes attrs;
  attrs.DisplayName = LocalizedText("PercentDataGood");
  attrs.Type = ObjectId::Byte;
  attrs.Rank = -1;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
  std::vector<AddReferencesItem> refs;
  {
    AddReferencesItem ref;
    ref.IsForward = true;
    ref.ReferenceTypeId = ReferenceId::HasModellingRule;
    ref.SourceNodeId = ToNodeId("i=11190");
    ref.TargetNodeClass = NodeClass::DataType;
    ref.TargetNodeId = ToNodeId("i=78");
    refs.push_back(ref);
  }
  registry.AddReferences(refs);
}

static void create_11191(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11191");
  node.BrowseName = ToQualifiedName("UseSlopedExtrapolation");
  node.Class = NodeClass::Variable;
  node.ParentNodeId = ToNodeId("i=11187");
  node.ReferenceTypeId = ReferenceId::HasProperty;
  node.TypeDefinition = ToNodeId("i=68");
  VariableAttributes attrs;
  attrs.DisplayName = LocalizedText("UseSlopedExtrapolation");
  attrs.Type = ObjectId::Boolean;
  attrs.Rank = -1;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
  std::vector<AddReferencesItem> refs;
  {
    AddReferencesItem ref;
    ref.IsForward = true;
    ref.ReferenceTypeId = ReferenceId::HasModellingRule;
    ref.SourceNodeId = ToNodeId("i=11191");
    ref.TargetNodeClass = NodeClass::DataType;
    ref.TargetNodeId = ToNodeId("i=78");
    refs.push_back(ref);
  }
  registry.AddReferences(refs);
}

static void create_2341(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2341");
  node.BrowseName = ToQualifiedName("Interpolative");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("At the beginning of each interval, retrieve the calculated value from the data points on either side of the requested timestamp.");
  attrs.DisplayName = LocalizedText("Interpolative");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2342(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2342");
  node.BrowseName = ToQualifiedName("Average");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the average value of the data over the interval.");
  attrs.DisplayName = LocalizedText("Average");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2343(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2343");
  node.BrowseName = ToQualifiedName("TimeAverage");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the time weighted average data over the interval using Interpolated Bounding Values.");
  attrs.DisplayName = LocalizedText("TimeAverage");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11285(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11285");
  node.BrowseName = ToQualifiedName("TimeAverage2");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the time weighted average data over the interval using Simple Bounding Values.");
  attrs.DisplayName = LocalizedText("TimeAverage2");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2344(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2344");
  node.BrowseName = ToQualifiedName("Total");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the total (time integral) of the data over the interval using Interpolated Bounding Values.");
  attrs.DisplayName = LocalizedText("Total");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11304(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11304");
  node.BrowseName = ToQualifiedName("Total2");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the total (time integral) of the data over the interval using Simple Bounding Values.");
  attrs.DisplayName = LocalizedText("Total2");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2346(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2346");
  node.BrowseName = ToQualifiedName("Minimum");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the minimum raw value in the interval with the timestamp of the start of the interval.");
  attrs.DisplayName = LocalizedText("Minimum");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2347(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2347");
  node.BrowseName = ToQualifiedName("Maximum");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the maximum raw value in the interval with the timestamp of the start of the interval.");
  attrs.DisplayName = LocalizedText("Maximum");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2348(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2348");
  node.BrowseName = ToQualifiedName("MinimumActualTime");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the minimum value in the interval and the Timestamp of the minimum value.");
  attrs.DisplayName = LocalizedText("MinimumActualTime");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2349(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2349");
  node.BrowseName = ToQualifiedName("MaximumActualTime");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the maximum value in the interval and the Timestamp of the maximum value.");
  attrs.DisplayName = LocalizedText("MaximumActualTime");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2350(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2350");
  node.BrowseName = ToQualifiedName("Range");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the difference between the minimum and maximum Value over the interval.");
  attrs.DisplayName = LocalizedText("Range");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11286(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11286");
  node.BrowseName = ToQualifiedName("Minimum2");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the minimum value in the interval including the Simple Bounding Values.");
  attrs.DisplayName = LocalizedText("Minimum2");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11287(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11287");
  node.BrowseName = ToQualifiedName("Maximum2");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the maximum value in the interval including the Simple Bounding Values.");
  attrs.DisplayName = LocalizedText("Maximum2");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11305(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11305");
  node.BrowseName = ToQualifiedName("MinimumActualTime2");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the minimum value with the actual timestamp including the Simple Bounding Values.");
  attrs.DisplayName = LocalizedText("MinimumActualTime2");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11306(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11306");
  node.BrowseName = ToQualifiedName("MaximumActualTime2");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the maximum value with the actual timestamp including the Simple Bounding Values.");
  attrs.DisplayName = LocalizedText("MaximumActualTime2");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11288(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11288");
  node.BrowseName = ToQualifiedName("Range2");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the difference between the Minimum2 and Maximum2 value over the interval.");
  attrs.DisplayName = LocalizedText("Range2");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2351(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2351");
  node.BrowseName = ToQualifiedName("AnnotationCount");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the number of Annotations in the interval.");
  attrs.DisplayName = LocalizedText("AnnotationCount");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2352(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2352");
  node.BrowseName = ToQualifiedName("Count");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the number of raw values over the interval.");
  attrs.DisplayName = LocalizedText("Count");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11307(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11307");
  node.BrowseName = ToQualifiedName("DurationInStateZero");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the time a Boolean or numeric was in a zero state using Simple Bounding Values.");
  attrs.DisplayName = LocalizedText("DurationInStateZero");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11308(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11308");
  node.BrowseName = ToQualifiedName("DurationInStateNonZero");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the time a Boolean or numeric was in a non-zero state using Simple Bounding Values.");
  attrs.DisplayName = LocalizedText("DurationInStateNonZero");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2355(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2355");
  node.BrowseName = ToQualifiedName("NumberOfTransitions");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the number of changes between zero and non-zero that a Boolean or Numeric value experienced in the interval.");
  attrs.DisplayName = LocalizedText("NumberOfTransitions");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2357(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2357");
  node.BrowseName = ToQualifiedName("Start");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the value at the beginning of the interval using Interpolated Bounding Values.");
  attrs.DisplayName = LocalizedText("Start");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2358(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2358");
  node.BrowseName = ToQualifiedName("End");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the value at the end of the interval using Interpolated Bounding Values.");
  attrs.DisplayName = LocalizedText("End");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2359(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2359");
  node.BrowseName = ToQualifiedName("Delta");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the difference between the Start and End value in the interval.");
  attrs.DisplayName = LocalizedText("Delta");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11505(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11505");
  node.BrowseName = ToQualifiedName("StartBound");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the value at the beginning of the interval using Simple Bounding Values.");
  attrs.DisplayName = LocalizedText("StartBound");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11506(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11506");
  node.BrowseName = ToQualifiedName("EndBound");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the value at the end of the interval using Simple Bounding Values.");
  attrs.DisplayName = LocalizedText("EndBound");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11507(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11507");
  node.BrowseName = ToQualifiedName("DeltaBounds");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the difference between the StartBound and EndBound value in the interval.");
  attrs.DisplayName = LocalizedText("DeltaBounds");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2360(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2360");
  node.BrowseName = ToQualifiedName("DurationGood");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the total duration of time in the interval during which the data is good.");
  attrs.DisplayName = LocalizedText("DurationGood");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2361(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2361");
  node.BrowseName = ToQualifiedName("DurationBad");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the total duration of time in the interval during which the data is bad.");
  attrs.DisplayName = LocalizedText("DurationBad");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2362(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2362");
  node.BrowseName = ToQualifiedName("PercentGood");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the percent of data (0 to 100) in the interval which has a good StatusCode.");
  attrs.DisplayName = LocalizedText("PercentGood");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2363(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2363");
  node.BrowseName = ToQualifiedName("PercentBad");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the percent of data (0 to 100) in the interval which has a bad StatusCode.");
  attrs.DisplayName = LocalizedText("PercentBad");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_2364(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=2364");
  node.BrowseName = ToQualifiedName("WorstQuality");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the worst StatusCode of data in the interval.");
  attrs.DisplayName = LocalizedText("WorstQuality");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11292(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11292");
  node.BrowseName = ToQualifiedName("WorstQuality2");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the worst StatusCode of data in the interval including the Simple Bounding Values.");
  attrs.DisplayName = LocalizedText("WorstQuality2");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11426(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11426");
  node.BrowseName = ToQualifiedName("StandardDeviationSample");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the standard deviation for the interval for a sample of the population (n-1).");
  attrs.DisplayName = LocalizedText("StandardDeviationSample");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11427(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11427");
  node.BrowseName = ToQualifiedName("StandardDeviationPopulation");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the standard deviation for the interval for a complete population (n) which includes Simple Bounding Values.");
  attrs.DisplayName = LocalizedText("StandardDeviationPopulation");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11428(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11428");
  node.BrowseName = ToQualifiedName("VarianceSample");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the variance for the interval as calculated by the StandardDeviationSample.");
  attrs.DisplayName = LocalizedText("VarianceSample");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

static void create_11429(OpcUa::NodeManagementServices & registry)
{
  AddNodesItem node;
  node.RequestedNewNodeId = ToNodeId("i=11429");
  node.BrowseName = ToQualifiedName("VariancePopulation");
  node.Class = NodeClass::Object;
  node.TypeDefinition = ToNodeId("i=2340");
  ObjectAttributes attrs;
  attrs.Description = LocalizedText("Retrieve the variance for the interval as calculated by the StandardDeviationPopulation which includes Simple Bounding Values.");
  attrs.DisplayName = LocalizedText("VariancePopulation");
  attrs.EventNotifier = 0;
  node.Attributes = attrs;
  registry.AddNodes(std::vector<AddNodesItem> {node});
}

void CreateAddressSpacePart13(OpcUa::NodeManagementServices & registry)
{
  create_11187(registry);
  create_11188(registry);
  create_11189(registry);
  create_11190(registry);
  create_11191(registry);
  create_2341(registry);
  create_2342(registry);
  create_2343(registry);
  create_11285(registry);
  create_2344(registry);
  create_11304(registry);
  create_2346(registry);
  create_2347(registry);
  create_2348(registry);
  create_2349(registry);
  create_2350(registry);
  create_11286(registry);
  create_11287(registry);
  create_11305(registry);
  create_11306(registry);
  create_11288(registry);
  create_2351(registry);
  create_2352(registry);
  create_11307(registry);
  create_11308(registry);
  create_2355(registry);
  create_2357(registry);
  create_2358(registry);
  create_2359(registry);
  create_11505(registry);
  create_11506(registry);
  create_11507(registry);
  create_2360(registry);
  create_2361(registry);
  create_2362(registry);
  create_2363(registry);
  create_2364(registry);
  create_11292(registry);
  create_11426(registry);
  create_11427(registry);
  create_11428(registry);
  create_11429(registry);

}

} // namespace

