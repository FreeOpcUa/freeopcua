// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

/// @author Olivier Roulet-Dubonnet
/// @email olivier@sintef.no
/// @brief Opc Ua Binary.
/// @license GNU LGPL
///
/// Distributed under the GNU LGPL License
/// (See accompanying file LICENSE or copy at
/// http://www.gnu.org/licenses/lgpl.html)
///

#include "binary_serialization.h"
#include <opc/ua/protocol/protocol.h>

#include <opc/ua/protocol/binary/stream.h>

namespace OpcUa
{
namespace Binary
{

template<>
std::size_t RawSize<OpenFileMode>(const OpenFileMode & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<NodeClass>(const NodeClass & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<ApplicationType>(const ApplicationType & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<MessageSecurityMode>(const MessageSecurityMode & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<UserTokenType>(const UserTokenType & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<SecurityTokenRequestType>(const SecurityTokenRequestType & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<NodeAttributesMask>(const NodeAttributesMask & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<AttributeWriteMask>(const AttributeWriteMask & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<BrowseDirection>(const BrowseDirection & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<BrowseResultMask>(const BrowseResultMask & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<ComplianceLevel>(const ComplianceLevel & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<FilterOperator>(const FilterOperator & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<TimestampsToReturn>(const TimestampsToReturn & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<HistoryUpdateType>(const HistoryUpdateType & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<PerformUpdateType>(const PerformUpdateType & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<MonitoringMode>(const MonitoringMode & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<DataChangeTrigger>(const DataChangeTrigger & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<DeadbandType>(const DeadbandType & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<EnumeratedTestType>(const EnumeratedTestType & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<RedundancySupport>(const RedundancySupport & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<ServerState>(const ServerState & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<ModelChangeStructureVerbMask>(const ModelChangeStructureVerbMask & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<AxisScaleEnumeration>(const AxisScaleEnumeration & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<ExceptionDeviationFormat>(const ExceptionDeviationFormat & data)
{
  return sizeof(uint32_t);
}


template<>
std::size_t RawSize<XmlElement>(const XmlElement & data)
{
  size_t size = 0;
  size += RawSize(data.Length);
  size += RawSizeContainer(data.Value);
  return size;
}


/* DISABLED

    template<>
    std::size_t RawSize<TwoByteNodeId>(const TwoByteNodeId& data)
    {
        size_t size = 0;
        size += RawSize(data.Identifier);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<FourByteNodeId>(const FourByteNodeId& data)
    {
        size_t size = 0;
        size += RawSize(data.NamespaceIndex);
        size += RawSize(data.Identifier);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<NumericNodeId>(const NumericNodeId& data)
    {
        size_t size = 0;
        size += RawSize(data.NamespaceIndex);
        size += RawSize(data.Identifier);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<StringNodeId>(const StringNodeId& data)
    {
        size_t size = 0;
        size += RawSize(data.NamespaceIndex);
        size += RawSize(data.Identifier);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<GuidNodeId>(const GuidNodeId& data)
    {
        size_t size = 0;
        size += RawSize(data.NamespaceIndex);
        size += RawSize(data.Identifier);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ByteStringNodeId>(const ByteStringNodeId& data)
    {
        size_t size = 0;
        size += RawSize(data.NamespaceIndex);
        size += RawSize(data.Identifier);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<NodeId>(const NodeId& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeIdType);
        if ((data.NodeIdType) & (1<<(0))) size += RawSize(data.TwoByte);
        if ((data.NodeIdType) & (1<<(1))) size += RawSize(data.FourByte);
        if ((data.NodeIdType) & (1<<(2))) size += RawSize(data.Numeric);
        if ((data.NodeIdType) & (1<<(3))) size += RawSize(data.String);
        if ((data.NodeIdType) & (1<<(4))) size += RawSize(data.Guid);
        if ((data.NodeIdType) & (1<<(5))) size += RawSize(data.ByteString);
        return size;
    }

*/

template<>
std::size_t RawSize<ExtensionObject>(const ExtensionObject & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Encoding);

  if ((data.Encoding) & (1 << (0))) { size += RawSize(data.Body); }

  return size;
}


/* DISABLED

    template<>
    std::size_t RawSize<ExpandedNodeId>(const ExpandedNodeId& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeIdType);
        if ((data.NodeIdType) & (1<<(0))) size += RawSize(data.TwoByte);
        if ((data.NodeIdType) & (1<<(1))) size += RawSize(data.FourByte);
        if ((data.NodeIdType) & (1<<(2))) size += RawSize(data.Numeric);
        if ((data.NodeIdType) & (1<<(3))) size += RawSize(data.String);
        if ((data.NodeIdType) & (1<<(4))) size += RawSize(data.Guid);
        if ((data.NodeIdType) & (1<<(5))) size += RawSize(data.ByteString);
        if ((data.NodeIdType) & (1<<(7))) size += RawSize(data.NamespaceURI);
        if ((data.NodeIdType) & (1<<(6))) size += RawSize(data.ServerIndex);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<DiagnosticInfo>(const DiagnosticInfo& data)
    {
        size_t size = 0;
        size += RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) size += RawSize(data.SymbolicId);
        if ((data.Encoding) & (1<<(1))) size += RawSize(data.NamespaceURI);
        if ((data.Encoding) & (1<<(2))) size += RawSize(data.LocalizedText);
        if ((data.Encoding) & (1<<(4))) size += RawSize(data.AdditionalInfo);
        if ((data.Encoding) & (1<<(5))) size += RawSize(data.InnerStatusCode);
        if ((data.Encoding) & (1<<(6))) size += RawSize(data.InnerDiagnosticInfo);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<QualifiedName>(const QualifiedName& data)
    {
        size_t size = 0;
        size += RawSize(data.NamespaceIndex);
        size += RawSize(data.Name);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<LocalizedText>(const LocalizedText& data)
    {
        size_t size = 0;
        size += RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) size += RawSize(data.Locale);
        if ((data.Encoding) & (1<<(1))) size += RawSize(data.Text);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<Variant>(const Variant& data)
    {
        size_t size = 0;
        size += RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(7))) size += RawSize(data.ArrayLength);
        if ((data.VariantType) & (1<<(1))) size += RawSizeContainer(data.Boolean);
        if ((data.VariantType) & (1<<(2))) size += RawSizeContainer(data.SByte);
        if ((data.VariantType) & (1<<(3))) size += RawSizeContainer(data.Byte);
        if ((data.VariantType) & (1<<(4))) size += RawSizeContainer(data.Int16);
        if ((data.VariantType) & (1<<(5))) size += RawSizeContainer(data.UInt16);
        if ((data.VariantType) & (1<<(6))) size += RawSizeContainer(data.Int32);
        if ((data.VariantType) & (1<<(7))) size += RawSizeContainer(data.UInt32);
        if ((data.VariantType) & (1<<(8))) size += RawSizeContainer(data.Int64);
        if ((data.VariantType) & (1<<(9))) size += RawSizeContainer(data.UInt64);
        if ((data.VariantType) & (1<<(10))) size += RawSizeContainer(data.Float);
        if ((data.VariantType) & (1<<(11))) size += RawSizeContainer(data.Double);
        if ((data.VariantType) & (1<<(12))) size += RawSizeContainer(data.String);
        if ((data.VariantType) & (1<<(13))) size += RawSizeContainer(data.DateTime);
        if ((data.VariantType) & (1<<(14))) size += RawSizeContainer(data.Guid);
        if ((data.VariantType) & (1<<(15))) size += RawSizeContainer(data.ByteString);
        if ((data.VariantType) & (1<<(16))) size += RawSizeContainer(data.XmlElement);
        if ((data.VariantType) & (1<<(17))) size += RawSizeContainer(data.NodeId);
        if ((data.VariantType) & (1<<(18))) size += RawSizeContainer(data.ExpandedNodeId);
        if ((data.VariantType) & (1<<(19))) size += RawSizeContainer(data.Status);
        if ((data.VariantType) & (1<<(20))) size += RawSizeContainer(data.DiagnosticInfo);
        if ((data.VariantType) & (1<<(21))) size += RawSizeContainer(data.QualifiedName);
        if ((data.VariantType) & (1<<(22))) size += RawSizeContainer(data.LocalizedText);
        if ((data.VariantType) & (1<<(23))) size += RawSizeContainer(data.ExtensionObject);
        if ((data.VariantType) & (1<<(24))) size += RawSizeContainer(data.DataValue);
        if ((data.VariantType) & (1<<(25))) size += RawSizeContainer(data.Variant);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<DataValue>(const DataValue& data)
    {
        size_t size = 0;
        size += RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) size += RawSize(data.Value);
        if ((data.Encoding) & (1<<(1))) size += RawSize(data.Status);
        if ((data.Encoding) & (1<<(2))) size += RawSize(data.SourceTimestamp);
        if ((data.Encoding) & (1<<(3))) size += RawSize(data.SourcePicoseconds);
        if ((data.Encoding) & (1<<(4))) size += RawSize(data.ServerTimestamp);
        if ((data.Encoding) & (1<<(5))) size += RawSize(data.ServerPicoseconds);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ReferenceNode>(const ReferenceNode& data)
    {
        size_t size = 0;
        size += RawSize(data.ReferenceTypeId);
        size += RawSize(data.IsInverse);
        size += RawSize(data.TargetId);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<Node>(const Node& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.NodeClass);
        size += RawSize(data.BrowseName);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSizeContainer(data.References);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<InstanceNode>(const InstanceNode& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.NodeClass);
        size += RawSize(data.BrowseName);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSizeContainer(data.References);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TypeNode>(const TypeNode& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.NodeClass);
        size += RawSize(data.BrowseName);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSizeContainer(data.References);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ObjectNode>(const ObjectNode& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.NodeClass);
        size += RawSize(data.BrowseName);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSizeContainer(data.References);
        size += RawSize(data.EventNotifier);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ObjectTypeNode>(const ObjectTypeNode& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.NodeClass);
        size += RawSize(data.BrowseName);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSizeContainer(data.References);
        size += RawSize(data.IsAbstract);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<VariableNode>(const VariableNode& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.NodeClass);
        size += RawSize(data.BrowseName);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSizeContainer(data.References);
        size += RawSize(data.Value);
        size += RawSize(data.DataType);
        size += RawSize(data.ValueRank);
        size += RawSizeContainer(data.ArrayDimensions);
        size += RawSize(data.AccessLevel);
        size += RawSize(data.UserAccessLevel);
        size += RawSize(data.MinimumSamplingInterval);
        size += RawSize(data.Historizing);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<VariableTypeNode>(const VariableTypeNode& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.NodeClass);
        size += RawSize(data.BrowseName);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSizeContainer(data.References);
        size += RawSize(data.Value);
        size += RawSize(data.DataType);
        size += RawSize(data.ValueRank);
        size += RawSizeContainer(data.ArrayDimensions);
        size += RawSize(data.IsAbstract);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ReferenceTypeNode>(const ReferenceTypeNode& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.NodeClass);
        size += RawSize(data.BrowseName);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSizeContainer(data.References);
        size += RawSize(data.IsAbstract);
        size += RawSize(data.Symmetric);
        size += RawSize(data.InverseName);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<MethodNode>(const MethodNode& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.NodeClass);
        size += RawSize(data.BrowseName);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSizeContainer(data.References);
        size += RawSize(data.Executable);
        size += RawSize(data.UserExecutable);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ViewNode>(const ViewNode& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.NodeClass);
        size += RawSize(data.BrowseName);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSizeContainer(data.References);
        size += RawSize(data.ContainsNoLoops);
        size += RawSize(data.EventNotifier);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<DataTypeNode>(const DataTypeNode& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.NodeClass);
        size += RawSize(data.BrowseName);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSizeContainer(data.References);
        size += RawSize(data.IsAbstract);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<Argument>(const Argument& data)
    {
        size_t size = 0;
        size += RawSize(data.Name);
        size += RawSize(data.DataType);
        size += RawSize(data.ValueRank);
        size += RawSizeContainer(data.ArrayDimensions);
        size += RawSize(data.Description);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<EnumValueType>(const EnumValueType& data)
    {
        size_t size = 0;
        size += RawSize(data.Value);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TimeZoneDataType>(const TimeZoneDataType& data)
    {
        size_t size = 0;
        size += RawSize(data.Offset);
        size += RawSize(data.DaylightSavingInOffset);
        return size;
    }

*/

template<>
std::size_t RawSize<ApplicationDescription>(const ApplicationDescription & data)
{
  size_t size = 0;
  size += RawSize(data.ApplicationUri);
  size += RawSize(data.ProductUri);
  size += RawSize(data.ApplicationName);
  size += RawSize(data.ApplicationType);
  size += RawSize(data.GatewayServerUri);
  size += RawSize(data.DiscoveryProfileUri);
  size += RawSizeContainer(data.DiscoveryUrls);
  return size;
}


/* DISABLED

    template<>
    std::size_t RawSize<RequestHeader>(const RequestHeader& data)
    {
        size_t size = 0;
        size += RawSize(data.AuthenticationToken);
        size += RawSize(data.Timestamp);
        size += RawSize(data.RequestHandle);
        size += RawSize(data.ReturnDiagnostics);
        size += RawSize(data.AuditEntryId);
        size += RawSize(data.TimeoutHint);
        size += RawSize(data.AdditionalHeader);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ResponseHeader>(const ResponseHeader& data)
    {
        size_t size = 0;
        size += RawSize(data.Timestamp);
        size += RawSize(data.RequestHandle);
        size += RawSize(data.ServiceResult);
        size += RawSize(data.ServiceDiagnostics);
        size += RawSizeContainer(data.StringTable);
        size += RawSize(data.AdditionalHeader);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ServiceFault>(const ServiceFault& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<FindServersParameters>(const FindServersParameters& data)
    {
        size_t size = 0;
        size += RawSize(data.EndpointUrl);
        size += RawSizeContainer(data.LocaleIds);
        size += RawSizeContainer(data.ServerUris);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<FindServersRequest>(const FindServersRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<FindServersResult>(const FindServersResult& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.Servers);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<FindServersResponse>(const FindServersResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

template<>
std::size_t RawSize<UserTokenPolicy>(const UserTokenPolicy & data)
{
  size_t size = 0;
  size += RawSize(data.PolicyId);
  size += RawSize(data.TokenType);
  size += RawSize(data.IssuedTokenType);
  size += RawSize(data.IssuerEndpointUrl);
  size += RawSize(data.SecurityPolicyUri);
  return size;
}


template<>
std::size_t RawSize<EndpointDescription>(const EndpointDescription & data)
{
  size_t size = 0;
  size += RawSize(data.EndpointUrl);
  size += RawSize(data.Server);
  size += RawSize(data.ServerCertificate);
  size += RawSize(data.SecurityMode);
  size += RawSize(data.SecurityPolicyUri);
  size += RawSizeContainer(data.UserIdentityTokens);
  size += RawSize(data.TransportProfileUri);
  size += RawSize(data.SecurityLevel);
  return size;
}


template<>
std::size_t RawSize<GetEndpointsParameters>(const GetEndpointsParameters & data)
{
  size_t size = 0;
  size += RawSize(data.EndpointUrl);
  size += RawSizeContainer(data.LocaleIds);
  size += RawSizeContainer(data.ProfileUris);
  return size;
}


template<>
std::size_t RawSize<GetEndpointsRequest>(const GetEndpointsRequest & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Parameters);
  return size;
}


template<>
std::size_t RawSize<GetEndpointsResponse>(const GetEndpointsResponse & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSizeContainer(data.Endpoints);
  return size;
}


/* DISABLED

    template<>
    std::size_t RawSize<RegisteredServer>(const RegisteredServer& data)
    {
        size_t size = 0;
        size += RawSize(data.ServerUri);
        size += RawSize(data.ProductUri);
        size += RawSizeContainer(data.ServerNames);
        size += RawSize(data.ServerType);
        size += RawSize(data.GatewayServerUri);
        size += RawSizeContainer(data.DiscoveryUrls);
        size += RawSize(data.SemaphoreFilePath);
        size += RawSize(data.IsOnline);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<RegisterServerParameters>(const RegisterServerParameters& data)
    {
        size_t size = 0;
        size += RawSize(data.Server);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<RegisterServerRequest>(const RegisterServerRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<RegisterServerResponse>(const RegisterServerResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ChannelSecurityToken>(const ChannelSecurityToken& data)
    {
        size_t size = 0;
        size += RawSize(data.ChannelId);
        size += RawSize(data.TokenId);
        size += RawSize(data.CreatedAt);
        size += RawSize(data.RevisedLifetime);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<OpenSecureChannelParameters>(const OpenSecureChannelParameters& data)
    {
        size_t size = 0;
        size += RawSize(data.ClientProtocolVersion);
        size += RawSize(data.RequestType);
        size += RawSize(data.SecurityMode);
        size += RawSize(data.ClientNonce);
        size += RawSize(data.RequestedLifetime);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<OpenSecureChannelRequest>(const OpenSecureChannelRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<OpenSecureChannelResult>(const OpenSecureChannelResult& data)
    {
        size_t size = 0;
        size += RawSize(data.ServerProtocolVersion);
        size += RawSize(data.SecurityToken);
        size += RawSize(data.ServerNonce);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<OpenSecureChannelResponse>(const OpenSecureChannelResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<CloseSecureChannelRequest>(const CloseSecureChannelRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<CloseSecureChannelResponse>(const CloseSecureChannelResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        return size;
    }

*/

template<>
std::size_t RawSize<SignedSoftwareCertificate>(const SignedSoftwareCertificate & data)
{
  size_t size = 0;
  size += RawSize(data.CertificateData);
  size += RawSize(data.Signature);
  return size;
}


template<>
std::size_t RawSize<SignatureData>(const SignatureData & data)
{
  size_t size = 0;
  size += RawSize(data.Algorithm);
  size += RawSize(data.Signature);
  return size;
}


template<>
std::size_t RawSize<CreateSessionParameters>(const CreateSessionParameters & data)
{
  size_t size = 0;
  size += RawSize(data.ClientDescription);
  size += RawSize(data.ServerUri);
  size += RawSize(data.EndpointUrl);
  size += RawSize(data.SessionName);
  size += RawSize(data.ClientNonce);
  size += RawSize(data.ClientCertificate);
  size += RawSize(data.RequestedSessionTimeout);
  size += RawSize(data.MaxResponseMessageSize);
  return size;
}


template<>
std::size_t RawSize<CreateSessionRequest>(const CreateSessionRequest & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Parameters);
  return size;
}


template<>
std::size_t RawSize<CreateSessionResult>(const CreateSessionResult & data)
{
  size_t size = 0;
  size += RawSize(data.SessionId);
  size += RawSize(data.AuthenticationToken);
  size += RawSize(data.RevisedSessionTimeout);
  size += RawSize(data.ServerNonce);
  size += RawSize(data.ServerCertificate);
  size += RawSizeContainer(data.ServerEndpoints);
  size += RawSizeContainer(data.ServerSoftwareCertificates);
  size += RawSize(data.ServerSignature);
  size += RawSize(data.MaxRequestMessageSize);
  return size;
}


template<>
std::size_t RawSize<CreateSessionResponse>(const CreateSessionResponse & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Parameters);
  return size;
}


/* DISABLED

    template<>
    std::size_t RawSize<UserIdentityToken>(const UserIdentityToken& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.PolicyId);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<AnonymousIdentityToken>(const AnonymousIdentityToken& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.PolicyId);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<UserNameIdentityToken>(const UserNameIdentityToken& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.PolicyId);
        size += RawSize(data.UserName);
        size += RawSize(data.Password);
        size += RawSize(data.EncryptionAlgorithm);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<X509IdentityToken>(const X509IdentityToken& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.PolicyId);
        size += RawSize(data.CertificateData);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<IssuedIdentityToken>(const IssuedIdentityToken& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.PolicyId);
        size += RawSize(data.TokenData);
        size += RawSize(data.EncryptionAlgorithm);
        return size;
    }

*/

template<>
std::size_t RawSize<ActivateSessionParameters>(const ActivateSessionParameters & data)
{
  size_t size = 0;
  size += RawSize(data.ClientSignature);
  size += RawSizeContainer(data.ClientSoftwareCertificates);
  size += RawSizeContainer(data.LocaleIds);
  size += RawSize(data.UserIdentityToken);
  size += RawSize(data.UserTokenSignature);
  return size;
}


template<>
std::size_t RawSize<ActivateSessionRequest>(const ActivateSessionRequest & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Parameters);
  return size;
}


template<>
std::size_t RawSize<ActivateSessionResult>(const ActivateSessionResult & data)
{
  size_t size = 0;
  size += RawSize(data.ServerNonce);
  size += RawSizeContainer(data.Results);
  size += RawSizeContainer(data.DiagnosticInfos);
  return size;
}


template<>
std::size_t RawSize<ActivateSessionResponse>(const ActivateSessionResponse & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Parameters);
  return size;
}


/* DISABLED

    template<>
    std::size_t RawSize<CloseSessionRequest>(const CloseSessionRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.DeleteSubscriptions);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<CloseSessionResponse>(const CloseSessionResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<CancelParameters>(const CancelParameters& data)
    {
        size_t size = 0;
        size += RawSize(data.RequestHandle);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<CancelRequest>(const CancelRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<CancelResult>(const CancelResult& data)
    {
        size_t size = 0;
        size += RawSize(data.CancelCount);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<CancelResponse>(const CancelResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<NodeAttributes>(const NodeAttributes& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.SpecifiedAttributes);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ObjectAttributes>(const ObjectAttributes& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.SpecifiedAttributes);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSize(data.EventNotifier);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<VariableAttributes>(const VariableAttributes& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.SpecifiedAttributes);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSize(data.Value);
        size += RawSize(data.DataType);
        size += RawSize(data.ValueRank);
        size += RawSizeContainer(data.ArrayDimensions);
        size += RawSize(data.AccessLevel);
        size += RawSize(data.UserAccessLevel);
        size += RawSize(data.MinimumSamplingInterval);
        size += RawSize(data.Historizing);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<MethodAttributes>(const MethodAttributes& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.SpecifiedAttributes);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSize(data.Executable);
        size += RawSize(data.UserExecutable);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ObjectTypeAttributes>(const ObjectTypeAttributes& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.SpecifiedAttributes);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSize(data.IsAbstract);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<VariableTypeAttributes>(const VariableTypeAttributes& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.SpecifiedAttributes);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSize(data.Value);
        size += RawSize(data.DataType);
        size += RawSize(data.ValueRank);
        size += RawSizeContainer(data.ArrayDimensions);
        size += RawSize(data.IsAbstract);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ReferenceTypeAttributes>(const ReferenceTypeAttributes& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.SpecifiedAttributes);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSize(data.IsAbstract);
        size += RawSize(data.Symmetric);
        size += RawSize(data.InverseName);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<DataTypeAttributes>(const DataTypeAttributes& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.SpecifiedAttributes);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSize(data.IsAbstract);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ViewAttributes>(const ViewAttributes& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.SpecifiedAttributes);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        size += RawSize(data.WriteMask);
        size += RawSize(data.UserWriteMask);
        size += RawSize(data.ContainsNoLoops);
        size += RawSize(data.EventNotifier);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<AddNodesItem>(const AddNodesItem& data)
    {
        size_t size = 0;
        size += RawSize(data.ParentNodeId);
        size += RawSize(data.ReferenceTypeId);
        size += RawSize(data.RequestedNewNodeId);
        size += RawSize(data.BrowseName);
        size += RawSize(data.NodeClass);
        size += RawSize(data.NodeAttributes);
        size += RawSize(data.TypeDefinition);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<AddNodesResult>(const AddNodesResult& data)
    {
        size_t size = 0;
        size += RawSize(data.Status);
        size += RawSize(data.AddedNodeId);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<AddNodesParameters>(const AddNodesParameters& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.NodesToAdd);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<AddNodesRequest>(const AddNodesRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<AddNodesResponse>(const AddNodesResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSizeContainer(data.Results);
        size += RawSizeContainer(data.DiagnosticInfos);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<AddReferencesItem>(const AddReferencesItem& data)
    {
        size_t size = 0;
        size += RawSize(data.SourceNodeId);
        size += RawSize(data.ReferenceTypeId);
        size += RawSize(data.IsForward);
        size += RawSize(data.TargetServerUri);
        size += RawSize(data.TargetNodeId);
        size += RawSize(data.TargetNodeClass);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<AddReferencesRequest>(const AddReferencesRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSizeContainer(data.ReferencesToAdd);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<AddReferencesResponse>(const AddReferencesResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSizeContainer(data.Results);
        size += RawSizeContainer(data.DiagnosticInfos);
        return size;
    }

*/

template<>
std::size_t RawSize<DeleteNodesItem>(const DeleteNodesItem & data)
{
  size_t size = 0;
  size += RawSize(data.NodeId);
  size += RawSize(data.DeleteTargetReferences);
  return size;
}


template<>
std::size_t RawSize<DeleteNodesRequest>(const DeleteNodesRequest & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSizeContainer(data.NodesToDelete);
  return size;
}


template<>
std::size_t RawSize<DeleteNodesResponse>(const DeleteNodesResponse & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSizeContainer(data.Results);
  size += RawSizeContainer(data.DiagnosticInfos);
  return size;
}


/* DISABLED

    template<>
    std::size_t RawSize<DeleteReferencesItem>(const DeleteReferencesItem& data)
    {
        size_t size = 0;
        size += RawSize(data.SourceNodeId);
        size += RawSize(data.ReferenceTypeId);
        size += RawSize(data.IsForward);
        size += RawSize(data.TargetNodeId);
        size += RawSize(data.DeleteBidirectional);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<DeleteReferencesParameters>(const DeleteReferencesParameters& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.ReferencesToDelete);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<DeleteReferencesRequest>(const DeleteReferencesRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<DeleteReferencesResult>(const DeleteReferencesResult& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.Results);
        size += RawSizeContainer(data.DiagnosticInfos);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<DeleteReferencesResponse>(const DeleteReferencesResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ViewDescription>(const ViewDescription& data)
    {
        size_t size = 0;
        size += RawSize(data.ViewId);
        size += RawSize(data.Timestamp);
        size += RawSize(data.ViewVersion);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<BrowseDescription>(const BrowseDescription& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.BrowseDirection);
        size += RawSize(data.ReferenceTypeId);
        size += RawSize(data.IncludeSubtypes);
        size += RawSize(data.NodeClassMask);
        size += RawSize(data.ResultMask);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ReferenceDescription>(const ReferenceDescription& data)
    {
        size_t size = 0;
        size += RawSize(data.ReferenceTypeId);
        size += RawSize(data.IsForward);
        size += RawSize(data.NodeId);
        size += RawSize(data.BrowseName);
        size += RawSize(data.DisplayName);
        size += RawSize(data.NodeClass);
        size += RawSize(data.TypeDefinition);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<BrowseResult>(const BrowseResult& data)
    {
        size_t size = 0;
        size += RawSize(data.Status);
        size += RawSize(data.ContinuationPoint);
        size += RawSizeContainer(data.References);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<BrowseParameters>(const BrowseParameters& data)
    {
        size_t size = 0;
        size += RawSize(data.View);
        size += RawSize(data.RequestedMaxReferencesPerNode);
        size += RawSizeContainer(data.NodesToBrowse);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<BrowseRequest>(const BrowseRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<BrowseResponse>(const BrowseResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSizeContainer(data.Results);
        size += RawSizeContainer(data.DiagnosticInfos);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<BrowseNextParameters>(const BrowseNextParameters& data)
    {
        size_t size = 0;
        size += RawSize(data.ReleaseContinuationPoints);
        size += RawSizeContainer(data.ContinuationPoints);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<BrowseNextRequest>(const BrowseNextRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<BrowseNextResult>(const BrowseNextResult& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.Results);
        size += RawSizeContainer(data.DiagnosticInfos);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<BrowseNextResponse>(const BrowseNextResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<RelativePathElement>(const RelativePathElement& data)
    {
        size_t size = 0;
        size += RawSize(data.ReferenceTypeId);
        size += RawSize(data.IsInverse);
        size += RawSize(data.IncludeSubtypes);
        size += RawSize(data.TargetName);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<RelativePath>(const RelativePath& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.Elements);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<BrowsePath>(const BrowsePath& data)
    {
        size_t size = 0;
        size += RawSize(data.StartingNode);
        size += RawSize(data.RelativePath);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<BrowsePathTarget>(const BrowsePathTarget& data)
    {
        size_t size = 0;
        size += RawSize(data.TargetId);
        size += RawSize(data.RemainingPathIndex);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<BrowsePathResult>(const BrowsePathResult& data)
    {
        size_t size = 0;
        size += RawSize(data.Status);
        size += RawSizeContainer(data.Targets);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TranslateBrowsePathsToNodeIdsParameters>(const TranslateBrowsePathsToNodeIdsParameters& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.BrowsePaths);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TranslateBrowsePathsToNodeIdsRequest>(const TranslateBrowsePathsToNodeIdsRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TranslateBrowsePathsToNodeIdsResponse>(const TranslateBrowsePathsToNodeIdsResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSizeContainer(data.Results);
        size += RawSizeContainer(data.DiagnosticInfos);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<RegisterNodesParameters>(const RegisterNodesParameters& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.NodesToRegister);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<RegisterNodesRequest>(const RegisterNodesRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<RegisterNodesResult>(const RegisterNodesResult& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.RegisteredNodeIds);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<RegisterNodesResponse>(const RegisterNodesResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<UnregisterNodesParameters>(const UnregisterNodesParameters& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.NodesToUnregister);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<UnregisterNodesRequest>(const UnregisterNodesRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<UnregisterNodesResponse>(const UnregisterNodesResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<EndpointConfiguration>(const EndpointConfiguration& data)
    {
        size_t size = 0;
        size += RawSize(data.OperationTimeout);
        size += RawSize(data.UseBinaryEncoding);
        size += RawSize(data.MaxStringLength);
        size += RawSize(data.MaxByteStringLength);
        size += RawSize(data.MaxArrayLength);
        size += RawSize(data.MaxMessageSize);
        size += RawSize(data.MaxBufferSize);
        size += RawSize(data.ChannelLifetime);
        size += RawSize(data.SecurityTokenLifetime);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<SupportedProfile>(const SupportedProfile& data)
    {
        size_t size = 0;
        size += RawSize(data.OrganizationUri);
        size += RawSize(data.ProfileId);
        size += RawSize(data.ComplianceTool);
        size += RawSize(data.ComplianceDate);
        size += RawSize(data.ComplianceLevel);
        size += RawSizeContainer(data.UnsupportedUnitIds);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<SoftwareCertificate>(const SoftwareCertificate& data)
    {
        size_t size = 0;
        size += RawSize(data.ProductName);
        size += RawSize(data.ProductUri);
        size += RawSize(data.VendorName);
        size += RawSize(data.VendorProductCertificate);
        size += RawSize(data.SoftwareVersion);
        size += RawSize(data.BuildNumber);
        size += RawSize(data.BuildDate);
        size += RawSize(data.IssuedBy);
        size += RawSize(data.IssueDate);
        size += RawSizeContainer(data.SupportedProfiles);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<QueryDataDescription>(const QueryDataDescription& data)
    {
        size_t size = 0;
        size += RawSize(data.RelativePath);
        size += RawSize(data.AttributeId);
        size += RawSize(data.IndexRange);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<NodeTypeDescription>(const NodeTypeDescription& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeDefinitionNode);
        size += RawSize(data.IncludeSubTypes);
        size += RawSizeContainer(data.DataToReturn);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<QueryDataSet>(const QueryDataSet& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.TypeDefinitionNode);
        size += RawSizeContainer(data.Values);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<NodeReference>(const NodeReference& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.ReferenceTypeId);
        size += RawSize(data.IsForward);
        size += RawSizeContainer(data.ReferencedNodeIds);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ContentFilterElement>(const ContentFilterElement& data)
    {
        size_t size = 0;
        size += RawSize(data.FilterOperator);
        size += RawSizeContainer(data.FilterOperands);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ContentFilter>(const ContentFilter& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.Elements);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<FilterOperand>(const FilterOperand& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) size += RawSize(data.Body);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ElementOperand>(const ElementOperand& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.Index);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<LiteralOperand>(const LiteralOperand& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.Value);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<AttributeOperand>(const AttributeOperand& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.NodeId);
        size += RawSize(data.Alias);
        size += RawSize(data.BrowsePath);
        size += RawSize(data.AttributeId);
        size += RawSize(data.IndexRange);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<SimpleAttributeOperand>(const SimpleAttributeOperand& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.TypeDefinitionId);
        size += RawSizeContainer(data.BrowsePath);
        size += RawSize(data.AttributeId);
        size += RawSize(data.IndexRange);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ContentFilterElementResult>(const ContentFilterElementResult& data)
    {
        size_t size = 0;
        size += RawSize(data.Status);
        size += RawSizeContainer(data.OperandStatusCodes);
        size += RawSizeContainer(data.OperandDiagnosticInfos);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ContentFilterResult>(const ContentFilterResult& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.ElementResults);
        size += RawSizeContainer(data.ElementDiagnosticInfos);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ParsingResult>(const ParsingResult& data)
    {
        size_t size = 0;
        size += RawSize(data.Status);
        size += RawSizeContainer(data.DataStatusCodes);
        size += RawSizeContainer(data.DataDiagnosticInfos);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<QueryFirstParameters>(const QueryFirstParameters& data)
    {
        size_t size = 0;
        size += RawSize(data.View);
        size += RawSizeContainer(data.NodeTypes);
        size += RawSize(data.Filter);
        size += RawSize(data.MaxDataSetsToReturn);
        size += RawSize(data.MaxReferencesToReturn);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<QueryFirstRequest>(const QueryFirstRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<QueryFirstResult>(const QueryFirstResult& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.QueryDataSets);
        size += RawSize(data.ContinuationPoint);
        size += RawSizeContainer(data.ParsingResults);
        size += RawSizeContainer(data.DiagnosticInfos);
        size += RawSize(data.FilterResult);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<QueryFirstResponse>(const QueryFirstResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<QueryNextParameters>(const QueryNextParameters& data)
    {
        size_t size = 0;
        size += RawSize(data.ReleaseContinuationPoint);
        size += RawSize(data.ContinuationPoint);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<QueryNextRequest>(const QueryNextRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<QueryNextResult>(const QueryNextResult& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.QueryDataSets);
        size += RawSize(data.RevisedContinuationPoint);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<QueryNextResponse>(const QueryNextResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

template<>
std::size_t RawSize<ReadValueId>(const ReadValueId & data)
{
  size_t size = 0;
  size += RawSize(data.NodeId);
  size += RawSize(data.AttributeId);
  size += RawSize(data.IndexRange);
  size += RawSize(data.DataEncoding);
  return size;
}


template<>
std::size_t RawSize<ReadParameters>(const ReadParameters & data)
{
  size_t size = 0;
  size += RawSize(data.MaxAge);
  size += RawSize(data.TimestampsToReturn);
  size += RawSizeContainer(data.AttributesToRead);
  return size;
}


template<>
std::size_t RawSize<ReadRequest>(const ReadRequest & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Parameters);
  return size;
}


template<>
std::size_t RawSize<ReadResponse>(const ReadResponse & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSizeContainer(data.Results);
  size += RawSizeContainer(data.DiagnosticInfos);
  return size;
}


/* DISABLED

    template<>
    std::size_t RawSize<HistoryReadValueId>(const HistoryReadValueId& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.IndexRange);
        size += RawSize(data.DataEncoding);
        size += RawSize(data.ContinuationPoint);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<HistoryReadResult>(const HistoryReadResult& data)
    {
        size_t size = 0;
        size += RawSize(data.Status);
        size += RawSize(data.ContinuationPoint);
        size += RawSize(data.HistoryData);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<HistoryReadDetails>(const HistoryReadDetails& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) size += RawSize(data.Body);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ReadRawModifiedDetails>(const ReadRawModifiedDetails& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.IsReadModified);
        size += RawSize(data.StartTime);
        size += RawSize(data.EndTime);
        size += RawSize(data.NumValuesPerNode);
        size += RawSize(data.ReturnBounds);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ReadAtTimeDetails>(const ReadAtTimeDetails& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSizeContainer(data.ReqTimes);
        size += RawSize(data.UseSimpleBounds);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<HistoryData>(const HistoryData& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.DataValues);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ModificationInfo>(const ModificationInfo& data)
    {
        size_t size = 0;
        size += RawSize(data.ModificationTime);
        size += RawSize(data.UpdateType);
        size += RawSize(data.UserName);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<HistoryModifiedData>(const HistoryModifiedData& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.DataValues);
        size += RawSizeContainer(data.ModificationInfos);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<HistoryReadParameters>(const HistoryReadParameters& data)
    {
        size_t size = 0;
        size += RawSize(data.HistoryReadDetails);
        size += RawSize(data.TimestampsToReturn);
        size += RawSize(data.ReleaseContinuationPoints);
        size += RawSizeContainer(data.AttributesToRead);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<HistoryReadRequest>(const HistoryReadRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<HistoryReadResponse>(const HistoryReadResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSizeContainer(data.Results);
        size += RawSizeContainer(data.DiagnosticInfos);
        return size;
    }

*/

template<>
std::size_t RawSize<WriteValue>(const WriteValue & data)
{
  size_t size = 0;
  size += RawSize(data.NodeId);
  size += RawSize(data.AttributeId);
  size += RawSize(data.IndexRange);
  size += RawSize(data.Value);
  return size;
}


template<>
std::size_t RawSize<WriteParameters>(const WriteParameters & data)
{
  size_t size = 0;
  size += RawSizeContainer(data.NodesToWrite);
  return size;
}


template<>
std::size_t RawSize<WriteRequest>(const WriteRequest & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Parameters);
  return size;
}


template<>
std::size_t RawSize<WriteResponse>(const WriteResponse & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSizeContainer(data.Results);
  size += RawSizeContainer(data.DiagnosticInfos);
  return size;
}


/* DISABLED

    template<>
    std::size_t RawSize<HistoryUpdateDetails>(const HistoryUpdateDetails& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<UpdateDataDetails>(const UpdateDataDetails& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.PerformInsertReplace);
        size += RawSizeContainer(data.UpdateValues);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<UpdateStructureDataDetails>(const UpdateStructureDataDetails& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.PerformInsertReplace);
        size += RawSizeContainer(data.UpdateValues);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<DeleteRawModifiedDetails>(const DeleteRawModifiedDetails& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.IsDeleteModified);
        size += RawSize(data.StartTime);
        size += RawSize(data.EndTime);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<DeleteAtTimeDetails>(const DeleteAtTimeDetails& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSizeContainer(data.ReqTimes);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<DeleteEventDetails>(const DeleteEventDetails& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSizeContainer(data.EventIds);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<HistoryUpdateResult>(const HistoryUpdateResult& data)
    {
        size_t size = 0;
        size += RawSize(data.Status);
        size += RawSizeContainer(data.OperationResults);
        size += RawSizeContainer(data.DiagnosticInfos);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<HistoryUpdateParameters>(const HistoryUpdateParameters& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.HistoryUpdateDetails);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<HistoryUpdateRequest>(const HistoryUpdateRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<HistoryUpdateResponse>(const HistoryUpdateResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSizeContainer(data.Results);
        size += RawSizeContainer(data.DiagnosticInfos);
        return size;
    }

*/

template<>
std::size_t RawSize<CallMethodRequest>(const CallMethodRequest & data)
{
  size_t size = 0;
  size += RawSize(data.ObjectId);
  size += RawSize(data.MethodId);
  size += RawSizeContainer(data.InputArguments);
  return size;
}


template<>
std::size_t RawSize<CallMethodResult>(const CallMethodResult & data)
{
  size_t size = 0;
  size += RawSize(data.Status);
  size += RawSizeContainer(data.InputArgumentResults);
  size += RawSizeContainer(data.InputArgumentDiagnosticInfos);
  size += RawSizeContainer(data.OutputArguments);
  return size;
}


template<>
std::size_t RawSize<CallParameters>(const CallParameters & data)
{
  size_t size = 0;
  size += RawSizeContainer(data.MethodsToCall);
  return size;
}


template<>
std::size_t RawSize<CallRequest>(const CallRequest & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Parameters);
  return size;
}


template<>
std::size_t RawSize<CallResponse>(const CallResponse & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSizeContainer(data.Results);
  size += RawSizeContainer(data.DiagnosticInfos);
  return size;
}


/* DISABLED

    template<>
    std::size_t RawSize<MonitoringFilter>(const MonitoringFilter& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) size += RawSize(data.Body);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<DataChangeFilter>(const DataChangeFilter& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.Trigger);
        size += RawSize(data.DeadbandType);
        size += RawSize(data.DeadbandValue);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<EventFilter>(const EventFilter& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSizeContainer(data.SelectClauses);
        size += RawSize(data.WhereClause);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ReadEventDetails>(const ReadEventDetails& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.NumValuesPerNode);
        size += RawSize(data.StartTime);
        size += RawSize(data.EndTime);
        size += RawSize(data.Filter);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<AggregateConfiguration>(const AggregateConfiguration& data)
    {
        size_t size = 0;
        size += RawSize(data.UseServerCapabilitiesDefaults);
        size += RawSize(data.TreatUncertainAsBad);
        size += RawSize(data.PercentDataBad);
        size += RawSize(data.PercentDataGood);
        size += RawSize(data.UseSlopedExtrapolation);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ReadProcessedDetails>(const ReadProcessedDetails& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.StartTime);
        size += RawSize(data.EndTime);
        size += RawSize(data.ProcessingInterval);
        size += RawSizeContainer(data.AggregateType);
        size += RawSize(data.AggregateConfiguration);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<AggregateFilter>(const AggregateFilter& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.StartTime);
        size += RawSize(data.AggregateType);
        size += RawSize(data.ProcessingInterval);
        size += RawSize(data.AggregateConfiguration);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<MonitoringFilterResult>(const MonitoringFilterResult& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) size += RawSize(data.Body);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<EventFilterResult>(const EventFilterResult& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSizeContainer(data.SelectClauseResults);
        size += RawSizeContainer(data.SelectClauseDiagnosticInfos);
        size += RawSize(data.WhereClauseResult);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<HistoryUpdateEventResult>(const HistoryUpdateEventResult& data)
    {
        size_t size = 0;
        size += RawSize(data.Status);
        size += RawSize(data.EventFilterResult);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<AggregateFilterResult>(const AggregateFilterResult& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.RevisedStartTime);
        size += RawSize(data.RevisedProcessingInterval);
        size += RawSize(data.RevisedAggregateConfiguration);
        return size;
    }

*/

template<>
std::size_t RawSize<MonitoringParameters>(const MonitoringParameters & data)
{
  size_t size = 0;
  size += RawSize(data.ClientHandle);
  size += RawSize(data.SamplingInterval);
  size += RawSize(data.Filter);
  size += RawSize(data.QueueSize);
  size += RawSize(data.DiscardOldest);
  return size;
}


template<>
std::size_t RawSize<MonitoredItemCreateRequest>(const MonitoredItemCreateRequest & data)
{
  size_t size = 0;
  size += RawSize(data.ItemToMonitor);
  size += RawSize(data.MonitoringMode);
  size += RawSize(data.RequestedParameters);
  return size;
}


template<>
std::size_t RawSize<MonitoredItemCreateResult>(const MonitoredItemCreateResult & data)
{
  size_t size = 0;
  size += RawSize(data.Status);
  size += RawSize(data.MonitoredItemId);
  size += RawSize(data.RevisedSamplingInterval);
  size += RawSize(data.RevisedQueueSize);
  size += RawSize(data.FilterResult);
  return size;
}


template<>
std::size_t RawSize<MonitoredItemsParameters>(const MonitoredItemsParameters & data)
{
  size_t size = 0;
  size += RawSize(data.SubscriptionId);
  size += RawSize(data.TimestampsToReturn);
  size += RawSizeContainer(data.ItemsToCreate);
  return size;
}


template<>
std::size_t RawSize<CreateMonitoredItemsRequest>(const CreateMonitoredItemsRequest & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Parameters);
  return size;
}


template<>
std::size_t RawSize<CreateMonitoredItemsResponse>(const CreateMonitoredItemsResponse & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSizeContainer(data.Results);
  size += RawSizeContainer(data.DiagnosticInfos);
  return size;
}


/* DISABLED

    template<>
    std::size_t RawSize<MonitoredItemModifyRequest>(const MonitoredItemModifyRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.MonitoredItemId);
        size += RawSize(data.RequestedParameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<MonitoredItemModifyResult>(const MonitoredItemModifyResult& data)
    {
        size_t size = 0;
        size += RawSize(data.Status);
        size += RawSize(data.RevisedSamplingInterval);
        size += RawSize(data.RevisedQueueSize);
        size += RawSize(data.FilterResult);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ModifyMonitoredItemsParameters>(const ModifyMonitoredItemsParameters& data)
    {
        size_t size = 0;
        size += RawSize(data.SubscriptionId);
        size += RawSize(data.TimestampsToReturn);
        size += RawSizeContainer(data.ItemsToModify);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ModifyMonitoredItemsRequest>(const ModifyMonitoredItemsRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ModifyMonitoredItemsResponse>(const ModifyMonitoredItemsResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSizeContainer(data.Results);
        size += RawSizeContainer(data.DiagnosticInfos);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<SetMonitoringModeParameters>(const SetMonitoringModeParameters& data)
    {
        size_t size = 0;
        size += RawSize(data.SubscriptionId);
        size += RawSize(data.MonitoringMode);
        size += RawSizeContainer(data.MonitoredItemIds);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<SetMonitoringModeRequest>(const SetMonitoringModeRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<SetMonitoringModeResult>(const SetMonitoringModeResult& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.Results);
        size += RawSizeContainer(data.DiagnosticInfos);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<SetMonitoringModeResponse>(const SetMonitoringModeResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<SetTriggeringParameters>(const SetTriggeringParameters& data)
    {
        size_t size = 0;
        size += RawSize(data.SubscriptionId);
        size += RawSize(data.TriggeringItemId);
        size += RawSizeContainer(data.LinksToAdd);
        size += RawSizeContainer(data.LinksToRemove);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<SetTriggeringRequest>(const SetTriggeringRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<SetTriggeringResult>(const SetTriggeringResult& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.AddResults);
        size += RawSizeContainer(data.AddDiagnosticInfos);
        size += RawSizeContainer(data.RemoveResults);
        size += RawSizeContainer(data.RemoveDiagnosticInfos);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<SetTriggeringResponse>(const SetTriggeringResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

template<>
std::size_t RawSize<DeleteMonitoredItemsParameters>(const DeleteMonitoredItemsParameters & data)
{
  size_t size = 0;
  size += RawSize(data.SubscriptionId);
  size += RawSizeContainer(data.MonitoredItemIds);
  return size;
}


template<>
std::size_t RawSize<DeleteMonitoredItemsRequest>(const DeleteMonitoredItemsRequest & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Parameters);
  return size;
}


template<>
std::size_t RawSize<DeleteMonitoredItemsResponse>(const DeleteMonitoredItemsResponse & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSizeContainer(data.Results);
  size += RawSizeContainer(data.DiagnosticInfos);
  return size;
}


template<>
std::size_t RawSize<CreateSubscriptionParameters>(const CreateSubscriptionParameters & data)
{
  size_t size = 0;
  size += RawSize(data.RequestedPublishingInterval);
  size += RawSize(data.RequestedLifetimeCount);
  size += RawSize(data.RequestedMaxKeepAliveCount);
  size += RawSize(data.MaxNotificationsPerPublish);
  size += RawSize(data.PublishingEnabled);
  size += RawSize(data.Priority);
  return size;
}


template<>
std::size_t RawSize<CreateSubscriptionRequest>(const CreateSubscriptionRequest & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Parameters);
  return size;
}


template<>
std::size_t RawSize<SubscriptionData>(const SubscriptionData & data)
{
  size_t size = 0;
  size += RawSize(data.SubscriptionId);
  size += RawSize(data.RevisedPublishingInterval);
  size += RawSize(data.RevisedLifetimeCount);
  size += RawSize(data.RevisedMaxKeepAliveCount);
  return size;
}


template<>
std::size_t RawSize<CreateSubscriptionResponse>(const CreateSubscriptionResponse & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Data);
  return size;
}


template<>
std::size_t RawSize<ModifySubscriptionParameters>(const ModifySubscriptionParameters & data)
{
  size_t size = 0;
  size += RawSize(data.SubscriptionId);
  size += RawSize(data.RequestedPublishingInterval);
  size += RawSize(data.RequestedLifetimeCount);
  size += RawSize(data.RequestedMaxKeepAliveCount);
  size += RawSize(data.MaxNotificationsPerPublish);
  size += RawSize(data.Priority);
  return size;
}


template<>
std::size_t RawSize<ModifySubscriptionRequest>(const ModifySubscriptionRequest & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Parameters);
  return size;
}


template<>
std::size_t RawSize<ModifySubscriptionResult>(const ModifySubscriptionResult & data)
{
  size_t size = 0;
  size += RawSize(data.RevisedPublishingInterval);
  size += RawSize(data.RevisedLifetimeCount);
  size += RawSize(data.RevisedMaxKeepAliveCount);
  return size;
}


template<>
std::size_t RawSize<ModifySubscriptionResponse>(const ModifySubscriptionResponse & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Parameters);
  return size;
}


template<>
std::size_t RawSize<PublishingModeParameters>(const PublishingModeParameters & data)
{
  size_t size = 0;
  size += RawSize(data.PublishingEnabled);
  size += RawSizeContainer(data.SubscriptionIds);
  return size;
}


template<>
std::size_t RawSize<SetPublishingModeRequest>(const SetPublishingModeRequest & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Parameters);
  return size;
}


template<>
std::size_t RawSize<PublishingModeResult>(const PublishingModeResult & data)
{
  size_t size = 0;
  size += RawSizeContainer(data.Results);
  size += RawSizeContainer(data.DiagnosticInfos);
  return size;
}


template<>
std::size_t RawSize<SetPublishingModeResponse>(const SetPublishingModeResponse & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Result);
  return size;
}


template<>
std::size_t RawSize<NotificationMessage>(const NotificationMessage & data)
{
  size_t size = 0;
  size += RawSize(data.SequenceNumber);
  size += RawSize(data.PublishTime);
  size += RawSizeContainer(data.NotificationData);
  return size;
}


/* DISABLED

    template<>
    std::size_t RawSize<NotificationData>(const NotificationData& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        if ((data.Encoding) & (1<<(0))) size += RawSize(data.Body);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<MonitoredItemNotification>(const MonitoredItemNotification& data)
    {
        size_t size = 0;
        size += RawSize(data.ClientHandle);
        size += RawSize(data.Value);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<DataChangeNotification>(const DataChangeNotification& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSizeContainer(data.MonitoredItems);
        size += RawSizeContainer(data.DiagnosticInfos);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<EventFieldList>(const EventFieldList& data)
    {
        size_t size = 0;
        size += RawSize(data.ClientHandle);
        size += RawSizeContainer(data.EventFields);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<EventNotificationList>(const EventNotificationList& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSizeContainer(data.Events);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<HistoryEventFieldList>(const HistoryEventFieldList& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.EventFields);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<HistoryEvent>(const HistoryEvent& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.Events);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<UpdateEventDetails>(const UpdateEventDetails& data)
    {
        size_t size = 0;
        size += RawSize(data.NodeId);
        size += RawSize(data.PerformInsertReplace);
        size += RawSize(data.Filter);
        size += RawSizeContainer(data.EventData);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<StatusChangeNotification>(const StatusChangeNotification& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Encoding);
        size += RawSize(data.BodyLength);
        size += RawSize(data.Status);
        size += RawSize(data.DiagnosticInfo);
        return size;
    }

*/

template<>
std::size_t RawSize<SubscriptionAcknowledgement>(const SubscriptionAcknowledgement & data)
{
  size_t size = 0;
  size += RawSize(data.SubscriptionId);
  size += RawSize(data.SequenceNumber);
  return size;
}


template<>
std::size_t RawSize<PublishRequest>(const PublishRequest & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSizeContainer(data.SubscriptionAcknowledgements);
  return size;
}


template<>
std::size_t RawSize<PublishResult>(const PublishResult & data)
{
  size_t size = 0;
  size += RawSize(data.SubscriptionId);
  size += RawSizeContainer(data.AvailableSequenceNumbers);
  size += RawSize(data.MoreNotifications);
  size += RawSize(data.NotificationMessage);
  size += RawSizeContainer(data.Results);
  size += RawSizeContainer(data.DiagnosticInfos);
  return size;
}


template<>
std::size_t RawSize<PublishResponse>(const PublishResponse & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Parameters);
  return size;
}


template<>
std::size_t RawSize<RepublishParameters>(const RepublishParameters & data)
{
  size_t size = 0;
  size += RawSize(data.SubscriptionId);
  size += RawSize(data.RetransmitSequenceNumber);
  return size;
}


template<>
std::size_t RawSize<RepublishRequest>(const RepublishRequest & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.Parameters);
  return size;
}


template<>
std::size_t RawSize<RepublishResponse>(const RepublishResponse & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSize(data.NotificationMessage);
  return size;
}


/* DISABLED

    template<>
    std::size_t RawSize<TransferResult>(const TransferResult& data)
    {
        size_t size = 0;
        size += RawSize(data.Status);
        size += RawSizeContainer(data.AvailableSequenceNumbers);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TransferSubscriptionsParameters>(const TransferSubscriptionsParameters& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.SubscriptionIds);
        size += RawSize(data.SendInitialValues);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TransferSubscriptionsRequest>(const TransferSubscriptionsRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TransferSubscriptionsResult>(const TransferSubscriptionsResult& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.Results);
        size += RawSizeContainer(data.DiagnosticInfos);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TransferSubscriptionsResponse>(const TransferSubscriptionsResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

template<>
std::size_t RawSize<DeleteSubscriptionsRequest>(const DeleteSubscriptionsRequest & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSizeContainer(data.SubscriptionIds);
  return size;
}


template<>
std::size_t RawSize<DeleteSubscriptionsResponse>(const DeleteSubscriptionsResponse & data)
{
  size_t size = 0;
  size += RawSize(data.TypeId);
  size += RawSize(data.Header);
  size += RawSizeContainer(data.Results);
  size += RawSizeContainer(data.DiagnosticInfos);
  return size;
}


/* DISABLED

    template<>
    std::size_t RawSize<ScalarTestType>(const ScalarTestType& data)
    {
        size_t size = 0;
        size += RawSize(data.Boolean);
        size += RawSize(data.SByte);
        size += RawSize(data.Byte);
        size += RawSize(data.Int16);
        size += RawSize(data.UInt16);
        size += RawSize(data.Int32);
        size += RawSize(data.UInt32);
        size += RawSize(data.Int64);
        size += RawSize(data.UInt64);
        size += RawSize(data.Float);
        size += RawSize(data.Double);
        size += RawSize(data.String);
        size += RawSize(data.DateTime);
        size += RawSize(data.Guid);
        size += RawSize(data.ByteString);
        size += RawSize(data.XmlElement);
        size += RawSize(data.NodeId);
        size += RawSize(data.ExpandedNodeId);
        size += RawSize(data.Status);
        size += RawSize(data.DiagnosticInfo);
        size += RawSize(data.QualifiedName);
        size += RawSize(data.LocalizedText);
        size += RawSize(data.ExtensionObject);
        size += RawSize(data.DataValue);
        size += RawSize(data.EnumeratedValue);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ArrayTestType>(const ArrayTestType& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.Booleans);
        size += RawSizeContainer(data.SBytes);
        size += RawSizeContainer(data.Int16s);
        size += RawSizeContainer(data.UInt16s);
        size += RawSizeContainer(data.Int32s);
        size += RawSizeContainer(data.UInt32s);
        size += RawSizeContainer(data.Int64s);
        size += RawSizeContainer(data.UInt64s);
        size += RawSizeContainer(data.Floats);
        size += RawSizeContainer(data.Doubles);
        size += RawSizeContainer(data.Strings);
        size += RawSizeContainer(data.DateTimes);
        size += RawSizeContainer(data.Guids);
        size += RawSizeContainer(data.ByteStrings);
        size += RawSizeContainer(data.XmlElements);
        size += RawSizeContainer(data.NodeIds);
        size += RawSizeContainer(data.ExpandedNodeIds);
        size += RawSizeContainer(data.StatusCodes);
        size += RawSizeContainer(data.DiagnosticInfos);
        size += RawSizeContainer(data.QualifiedNames);
        size += RawSizeContainer(data.LocalizedTexts);
        size += RawSizeContainer(data.ExtensionObjects);
        size += RawSizeContainer(data.DataValues);
        size += RawSizeContainer(data.Variants);
        size += RawSizeContainer(data.EnumeratedValues);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<CompositeTestType>(const CompositeTestType& data)
    {
        size_t size = 0;
        size += RawSize(data.Field1);
        size += RawSize(data.Field2);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TestStackParameters>(const TestStackParameters& data)
    {
        size_t size = 0;
        size += RawSize(data.TestId);
        size += RawSize(data.Iteration);
        size += RawSize(data.Input);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TestStackRequest>(const TestStackRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TestStackResult>(const TestStackResult& data)
    {
        size_t size = 0;
        size += RawSize(data.Output);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TestStackResponse>(const TestStackResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TestStackExParameters>(const TestStackExParameters& data)
    {
        size_t size = 0;
        size += RawSize(data.TestId);
        size += RawSize(data.Iteration);
        size += RawSize(data.Input);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TestStackExRequest>(const TestStackExRequest& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TestStackExResult>(const TestStackExResult& data)
    {
        size_t size = 0;
        size += RawSize(data.Output);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<TestStackExResponse>(const TestStackExResponse& data)
    {
        size_t size = 0;
        size += RawSize(data.TypeId);
        size += RawSize(data.Header);
        size += RawSize(data.Parameters);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<BuildInfo>(const BuildInfo& data)
    {
        size_t size = 0;
        size += RawSize(data.ProductUri);
        size += RawSize(data.ManufacturerName);
        size += RawSize(data.ProductName);
        size += RawSize(data.SoftwareVersion);
        size += RawSize(data.BuildNumber);
        size += RawSize(data.BuildDate);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<RedundantServerDataType>(const RedundantServerDataType& data)
    {
        size_t size = 0;
        size += RawSize(data.ServerId);
        size += RawSize(data.ServiceLevel);
        size += RawSize(data.ServerState);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<EndpointUrlListDataType>(const EndpointUrlListDataType& data)
    {
        size_t size = 0;
        size += RawSizeContainer(data.EndpointUrlList);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<NetworkGroupDataType>(const NetworkGroupDataType& data)
    {
        size_t size = 0;
        size += RawSize(data.ServerUri);
        size += RawSizeContainer(data.NetworkPaths);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<SamplingIntervalDiagnosticsDataType>(const SamplingIntervalDiagnosticsDataType& data)
    {
        size_t size = 0;
        size += RawSize(data.SamplingInterval);
        size += RawSize(data.MonitoredItemCount);
        size += RawSize(data.MaxMonitoredItemCount);
        size += RawSize(data.DisabledMonitoredItemCount);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ServerDiagnosticsSummaryDataType>(const ServerDiagnosticsSummaryDataType& data)
    {
        size_t size = 0;
        size += RawSize(data.ServerViewCount);
        size += RawSize(data.CurrentSessionCount);
        size += RawSize(data.CumulatedSessionCount);
        size += RawSize(data.SecurityRejectedSessionCount);
        size += RawSize(data.RejectedSessionCount);
        size += RawSize(data.SessionTimeoutCount);
        size += RawSize(data.SessionAbortCount);
        size += RawSize(data.CurrentSubscriptionCount);
        size += RawSize(data.CumulatedSubscriptionCount);
        size += RawSize(data.PublishingIntervalCount);
        size += RawSize(data.SecurityRejectedRequestsCount);
        size += RawSize(data.RejectedRequestsCount);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ServerStatusDataType>(const ServerStatusDataType& data)
    {
        size_t size = 0;
        size += RawSize(data.StartTime);
        size += RawSize(data.CurrentTime);
        size += RawSize(data.State);
        size += RawSize(data.BuildInfo);
        size += RawSize(data.SecondsTillShutdown);
        size += RawSize(data.ShutdownReason);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<SessionSecurityDiagnosticsDataType>(const SessionSecurityDiagnosticsDataType& data)
    {
        size_t size = 0;
        size += RawSize(data.SessionId);
        size += RawSize(data.ClientUserIdOfSession);
        size += RawSizeContainer(data.ClientUserIdHistory);
        size += RawSize(data.AuthenticationMechanism);
        size += RawSize(data.Encoding);
        size += RawSize(data.TransportProtocol);
        size += RawSize(data.SecurityMode);
        size += RawSize(data.SecurityPolicyUri);
        size += RawSize(data.ClientCertificate);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ServiceCounterDataType>(const ServiceCounterDataType& data)
    {
        size_t size = 0;
        size += RawSize(data.TotalCount);
        size += RawSize(data.ErrorCount);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<SessionDiagnosticsDataType>(const SessionDiagnosticsDataType& data)
    {
        size_t size = 0;
        size += RawSize(data.SessionId);
        size += RawSize(data.SessionName);
        size += RawSize(data.ClientDescription);
        size += RawSize(data.ServerUri);
        size += RawSize(data.EndpointUrl);
        size += RawSizeContainer(data.LocaleIds);
        size += RawSize(data.ActualSessionTimeout);
        size += RawSize(data.MaxResponseMessageSize);
        size += RawSize(data.ClientConnectionTime);
        size += RawSize(data.ClientLastContactTime);
        size += RawSize(data.CurrentSubscriptionsCount);
        size += RawSize(data.CurrentMonitoredItemsCount);
        size += RawSize(data.CurrentPublishRequestsInQueue);
        size += RawSize(data.TotalRequestCount);
        size += RawSize(data.UnauthorizedRequestCount);
        size += RawSize(data.ReadCount);
        size += RawSize(data.HistoryReadCount);
        size += RawSize(data.WriteCount);
        size += RawSize(data.HistoryUpdateCount);
        size += RawSize(data.CallCount);
        size += RawSize(data.CreateMonitoredItemsCount);
        size += RawSize(data.ModifyMonitoredItemsCount);
        size += RawSize(data.SetMonitoringModeCount);
        size += RawSize(data.SetTriggeringCount);
        size += RawSize(data.DeleteMonitoredItemsCount);
        size += RawSize(data.CreateSubscriptionCount);
        size += RawSize(data.ModifySubscriptionCount);
        size += RawSize(data.SetPublishingModeCount);
        size += RawSize(data.PublishCount);
        size += RawSize(data.RepublishCount);
        size += RawSize(data.TransferSubscriptionsCount);
        size += RawSize(data.DeleteSubscriptionsCount);
        size += RawSize(data.AddNodesCount);
        size += RawSize(data.AddReferencesCount);
        size += RawSize(data.DeleteNodesCount);
        size += RawSize(data.DeleteReferencesCount);
        size += RawSize(data.BrowseCount);
        size += RawSize(data.BrowseNextCount);
        size += RawSize(data.TranslateBrowsePathsToNodeIdsCount);
        size += RawSize(data.QueryFirstCount);
        size += RawSize(data.QueryNextCount);
        size += RawSize(data.RegisterNodesCount);
        size += RawSize(data.UnregisterNodesCount);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<StatusResult>(const StatusResult& data)
    {
        size_t size = 0;
        size += RawSize(data.Status);
        size += RawSize(data.DiagnosticInfo);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<SubscriptionDiagnosticsDataType>(const SubscriptionDiagnosticsDataType& data)
    {
        size_t size = 0;
        size += RawSize(data.SessionId);
        size += RawSize(data.SubscriptionId);
        size += RawSize(data.Priority);
        size += RawSize(data.PublishingInterval);
        size += RawSize(data.MaxKeepAliveCount);
        size += RawSize(data.MaxLifetimeCount);
        size += RawSize(data.MaxNotificationsPerPublish);
        size += RawSize(data.PublishingEnabled);
        size += RawSize(data.ModifyCount);
        size += RawSize(data.EnableCount);
        size += RawSize(data.DisableCount);
        size += RawSize(data.RepublishRequestCount);
        size += RawSize(data.RepublishMessageRequestCount);
        size += RawSize(data.RepublishMessageCount);
        size += RawSize(data.TransferRequestCount);
        size += RawSize(data.TransferredToAltClientCount);
        size += RawSize(data.TransferredToSameClientCount);
        size += RawSize(data.PublishRequestCount);
        size += RawSize(data.DataChangeNotificationsCount);
        size += RawSize(data.EventNotificationsCount);
        size += RawSize(data.NotificationsCount);
        size += RawSize(data.LatePublishRequestCount);
        size += RawSize(data.CurrentKeepAliveCount);
        size += RawSize(data.CurrentLifetimeCount);
        size += RawSize(data.UnacknowledgedMessageCount);
        size += RawSize(data.DiscardedMessageCount);
        size += RawSize(data.MonitoredItemCount);
        size += RawSize(data.DisabledMonitoredItemCount);
        size += RawSize(data.MonitoringQueueOverflowCount);
        size += RawSize(data.NextSequenceNumber);
        size += RawSize(data.EventQueueOverFlowCount);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ModelChangeStructureDataType>(const ModelChangeStructureDataType& data)
    {
        size_t size = 0;
        size += RawSize(data.Affected);
        size += RawSize(data.AffectedType);
        size += RawSize(data.Verb);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<SemanticChangeStructureDataType>(const SemanticChangeStructureDataType& data)
    {
        size_t size = 0;
        size += RawSize(data.Affected);
        size += RawSize(data.AffectedType);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<Range>(const Range& data)
    {
        size_t size = 0;
        size += RawSize(data.Low);
        size += RawSize(data.High);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<EUInformation>(const EUInformation& data)
    {
        size_t size = 0;
        size += RawSize(data.NamespaceUri);
        size += RawSize(data.UnitId);
        size += RawSize(data.DisplayName);
        size += RawSize(data.Description);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ComplexNumberType>(const ComplexNumberType& data)
    {
        size_t size = 0;
        size += RawSize(data.Real);
        size += RawSize(data.Imaginary);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<DoubleComplexNumberType>(const DoubleComplexNumberType& data)
    {
        size_t size = 0;
        size += RawSize(data.Real);
        size += RawSize(data.Imaginary);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<AxisInformation>(const AxisInformation& data)
    {
        size_t size = 0;
        size += RawSize(data.EngineeringUnits);
        size += RawSize(data.EURange);
        size += RawSize(data.Title);
        size += RawSize(data.AxisScaleType);
        size += RawSizeContainer(data.AxisSteps);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<XVType>(const XVType& data)
    {
        size_t size = 0;
        size += RawSize(data.X);
        size += RawSize(data.Value);
        return size;
    }

*/

/* DISABLED

    template<>
    std::size_t RawSize<ProgramDiagnosticDataType>(const ProgramDiagnosticDataType& data)
    {
        size_t size = 0;
        size += RawSize(data.CreateSessionId);
        size += RawSize(data.CreateClientName);
        size += RawSize(data.InvocationCreationTime);
        size += RawSize(data.LastTransitionTime);
        size += RawSize(data.LastMethodCall);
        size += RawSize(data.LastMethodSessionId);
        size += RawSizeContainer(data.LastMethodInputArguments);
        size += RawSizeContainer(data.LastMethodOutputArguments);
        size += RawSize(data.LastMethodCallTime);
        size += RawSize(data.LastMethodReturnStatus);
        return size;
    }

*/

template<>
std::size_t RawSize<Annotation>(const Annotation & data)
{
  size_t size = 0;
  size += RawSize(data.Message);
  size += RawSize(data.UserName);
  size += RawSize(data.AnnotationTime);
  return size;
}


}

} // namespace

