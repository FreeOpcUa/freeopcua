//
// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

#pragma once

inline AttributeId GetAttributeIdOptionValue(const po::variables_map & vm)
{
  const std::string name = vm[OPTION_ATTRIBUTE].as<std::string>();

  if (name == "node id")
    {
      return AttributeId::NodeId;
    }

  if (name == "node class")
    {
      return AttributeId::NodeClass;
    }

  if (name == "browse name")
    {
      return AttributeId::BrowseName;
    }

  if (name == "display name")
    {
      return AttributeId::DisplayName;
    }

  if (name == "description")
    {
      return AttributeId::Description;
    }

  if (name == "write mask")
    {
      return AttributeId::WriteMask;
    }

  if (name == "user write mask")
    {
      return AttributeId::UserWriteMask;
    }

  if (name == "is abstract")
    {
      return AttributeId::IsAbstract;
    }

  if (name == "symmetric")
    {
      return AttributeId::Symmetric;
    }

  if (name == "inverse name")
    {
      return AttributeId::InverseName;
    }

  if (name == "contains no loops")
    {
      return AttributeId::ContainsNoLoops;
    }

  if (name == "event notifier")
    {
      return AttributeId::EventNotifier;
    }

  if (name == "value")
    {
      return AttributeId::Value;
    }

  if (name == "data type")
    {
      return AttributeId::DataType;
    }

  if (name == "value rank")
    {
      return AttributeId::ValueRank;
    }

  if (name == "array dimensions")
    {
      return AttributeId::ArrayDimensions;
    }

  if (name == "access level")
    {
      return AttributeId::AccessLevel;
    }

  if (name == "user access level")
    {
      return AttributeId::UserAccessLevel;
    }

  if (name == "minimum sampling interval")
    {
      return AttributeId::MinimumSamplingInterval;
    }

  if (name == "historizing")
    {
      return AttributeId::Historizing;
    }

  if (name == "executable")
    {
      return AttributeId::Executable;
    }

  if (name == "user executable")
    {
      return AttributeId::UserExecutable;
    }

  throw std::logic_error(std::string("Unknown AttributeId: ") + name);
}

